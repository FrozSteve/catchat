import React, { useState, useRef, useContext, useEffect, createRef } from "react";
import { makeStyles } from "@material-ui/styles";
import ReactDOM from "react-dom";
import ThreadBar from "./threadBar";
import SendBox from "../chat/sendBox";
import ThreadMessageList from "./threadMessageList";
import { renderTime } from "../../utils/index";
import { useSelector, useDispatch } from "../../EaseApp/index";
import deleteIcon from '../../common/images/cancel.png';
import MessageActions from "../../redux/message";
import { Box, IconButton } from "@material-ui/core";
import { EaseChatContext } from "../chat/index";
import _ from "lodash";
import avatar from "../../common/icons/avatar1.jpg"; // import "../../i18n";

import i18next from "i18next";
import { emoji } from "../../common/emoji";
import AudioPlayer from "../chat/messages/audioPlayer/audioPlayer";
import { userAvatar } from '../../utils';
import '../chat/index.css';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      width: "100%",
      flex: 1,
      display: "flex",
      position: "relative",
      bottom: "0",
      top: "0",
      // overflow: "hidden",
      flexDirection: 'column',
      padding: '0 20px 0 12px',
      height: 'calc(100% - 20px)',
      boxSizing: 'border-box'
    },
    chat: {
      height: 'calc(100% - 130px)',
      overflow: "hidden",
      overflowY: 'scroll'
    },
    createThreadCon: {
      position: 'relative',
      marginTop: '12px',
      borderBottom: '1px solid #e6e6e6',
      width: '100%',
      paddingRight: '36px',
      boxSizing: 'border-box'
    },
    threadNameInput: {
      lineHeight: '38px',
      border: 'none',
      outline: 'none',
      fontSize: '18px',
      fontWeight: '700',
      width: '100%',
      textAlign: 'left'
    },
    threadNameClear: {
      position: 'absolute',
      display: 'block',
      right: '10px',
      bottom: '10px',
      height: '16px',
      width: '16px',
      background: "url(" + deleteIcon + ") center center no-repeat",
      cursor: 'pointer'
    },
    startTips: {
      marginTop: '8px',
      lineHeight: '20px',
      fontSize: '14px',
      color: '#4d4d4d'
    },
    threadOwnerInfo: {
      marginTop: '15px',
      display: 'flex',
      width: '100%'
    },
    threadOwnerAvatarCon: {
      height: '28px',
      flex: '0 0 28px'
    },
    threadOwnerAvatar: {
      display: 'block',
      height: '100%',
      width: '100%',
      borderRadius: '50%'
    },
    threadOwnerMsg: {
      width: '100%',
      paddingLeft: '8px',
      flex: '1 1 calc(100% - 36px)',
      overflow: 'hidden',
      textAlign: 'left'
    },
    info: {
      display: 'flex',
      justifyContent: 'space-between',
      lineHeight: '15px',
      fontSize: '12px',
      color: '#999'
    },
    threadReplayMessage: {
      marginTop: '2px',
      lineHeight: '20px',
      fontWeight: '600',
      fontSize: '16px',
      width: '100%',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      textAlign: 'left'
    },
    threadOriginalMessage: {
      marginTop: '2px',
      lineHeight: '14px',
      fontSize: '12px',
      color: '#4d4d4d',
      width: 'calc(100%)',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      textAlign: 'left'
    },
    threadName: {
      marginTop: '4px',
      lineHeight: '30px',
      fontWeight: '700',
      fontSize: '18px',
      textAlign: 'left',
      maxWidth: '350px'
    },
    threadDesc: {
      lineHeight: '20px',
      fontWeight: '600',
      fontSize: '14px',
      color: '#4d4d4d',
      textAlign: 'left',
      width: '340px',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap'
    },
    threadStartMember: {
      color: '#000'
    },
    split: {
      marginTop: '11px',
      height: '0',
      width: '100%',
      border: 'none',
      borderBottom: '1px solid #e6e6e6'
    },
    emptyMsg: {
      width: '100%',
      marginTop: '15px',
      height: '28px',
      lineHeight: '28px',
      color: '#999',
      fontSize: '16px',
      fontWeight: '600',
      textAlign: 'left'
    },
    fileCard: {
      width: "252px",
      height: "72px",
      backgroundColor: "rgba(0,0,0,0.05)",
      display: "flex",
      alignItems: "center",
      marginLeft: "10px",
      marginBottom: "6px"
    },
    fileIcon: {
      width: "59px",
      height: "59px",
      background: "rgba(35, 195, 129, 0.06)",
      borderRadius: "4px",
      border: "1px solid rgba(35, 195, 129, 0.06)",
      textAlign: "center",
      lineHeight: "59px",
      margin: "0 7px 0 7px",
      flexShrink: 0
    },
    fileInfo: {
      "& p": {
        overflow: "hidden",
        whiteSpace: "nowrap",
        textOverflow: "ellipsis",
        width: "126px",
        margin: "0"
      },
      "& span": {
        fontSize: "12px",
        color: "#010101",
        lineHeight: "16px"
      }
    },
    download: {
      fontSize: "16px",
      color: "rgba(0,0,0,.6)",
      fontWeight: "bold",
      cursor: "pointer"
    },
    duration: {
      margin: "0 4px",
      position: "relative",
      left: '15px'
    }
  };
});

var ThreadPanel = function ThreadPanel() {
  var classes = useStyles();
  var dispatch = useDispatch();
  var easeChatProps = useContext(EaseChatContext);
  var showByselfAvatar = easeChatProps.showByselfAvatar;

  var _useState = useState(''),
      threadName = _useState[0],
      setThreadName = _useState[1];

  var changeThreadName = function changeThreadName(e) {
    setThreadName(e.target.value);
  };

  var clearThreadName = function clearThreadName() {
    setThreadName('');
  };

  var isCreatingThread = useSelector(function (state) {
    var _state$thread;

    return (_state$thread = state.thread) === null || _state$thread === void 0 ? void 0 : _state$thread.isCreatingThread;
  });
  var currentMessage = useSelector(function (state) {
    var _state$thread2;

    return (_state$thread2 = state.thread) === null || _state$thread2 === void 0 ? void 0 : _state$thread2.currentThreadInfo;
  });
  var threadOriginalMsg = useSelector(function (state) {
    var _state$thread3;

    return (_state$thread3 = state.thread) === null || _state$thread3 === void 0 ? void 0 : _state$thread3.threadOriginalMsg;
  });
  var inputRef = createRef();

  var renderMessage = function renderMessage(body) {
    switch (body === null || body === void 0 ? void 0 : body.type) {
      case 'txt':
        return renderTxt(body.msg);

      case 'file':
        return "[" + i18next.t('File') + "]";

      case 'img':
        return "[" + i18next.t('Image') + "]";

      case 'audio':
        return "[" + i18next.t('Audio') + "]";

      case 'video':
        return "[" + i18next.t('Video') + "]";

      default:
        return '';
    }
  };

  var renderTxt = function renderTxt(txt) {
    if (txt === undefined) {
      return [];
    }

    var rnTxt = [];
    var match = null;
    var regex = /(\[.*?\])/g;
    var start = 0;
    var index = 0;

    while (match = regex.exec(txt)) {
      index = match.index;

      if (index > start) {
        rnTxt.push(txt.substring(start, index));
      }

      if (match[1] in emoji.map) {
        var v = emoji.map[match[1]];
        rnTxt.push( /*#__PURE__*/React.createElement("img", {
          key: v + Math.floor(Math.random() * 99 + 1),
          alt: v,
          src: require("../../common/reactions/" + v)["default"],
          width: 20,
          height: 20
        }));
      } else {
        rnTxt.push(match[1]);
      }

      start = index + match[1].length;
    }

    rnTxt.push(txt.substring(start, txt.length));
    return rnTxt;
  };

  useEffect(function () {
    if (isCreatingThread) {
      inputRef.current && inputRef.current.focus();
    }
  }, [isCreatingThread]);

  var createThread = function createThread() {
    return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement("div", {
      className: classes.createThreadCon
    }, /*#__PURE__*/React.createElement("input", {
      ref: inputRef,
      className: classes.threadNameInput,
      style: {
        color: threadName.length === 0 ? '#ccc' : '#000'
      },
      placeholder: i18next.t('Thread Name'),
      maxLength: 64,
      value: threadName,
      onChange: function onChange(e) {
        return changeThreadName(e);
      }
    }), /*#__PURE__*/React.createElement("span", {
      className: classes.threadNameClear,
      style: {
        opacity: threadName.length === 0 ? '15%' : '100%'
      },
      onClick: clearThreadName
    })), /*#__PURE__*/React.createElement("div", {
      className: classes.startTips,
      style: {
        color: threadName.length === 0 ? '#ccc' : '#4d4d4d'
      }
    }, i18next.t('Send a message to start a thread in this Group Chat.')));
  };

  var showThreadMessage = function showThreadMessage() {
    return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement("div", {
      className: classes.threadName
    }, (currentMessage === null || currentMessage === void 0 ? void 0 : currentMessage.name) || ''), /*#__PURE__*/React.createElement("div", {
      className: classes.threadDesc
    }, i18next.t('Started by'), " ", /*#__PURE__*/React.createElement("span", {
      className: classes.threadStartMember
    }, (currentMessage === null || currentMessage === void 0 ? void 0 : currentMessage.owner) || '')));
  };

  var timeSyle = 'MMM D, YYYY, HH:mm';

  var renderOriginalMsg = function renderOriginalMsg() {
    return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement("div", {
      className: classes.threadOwnerInfo
    }, /*#__PURE__*/React.createElement("div", {
      className: classes.threadOwnerAvatarCon
    }, /*#__PURE__*/React.createElement("img", {
      className: classes.threadOwnerAvatar,
      src: userAvatar(threadOriginalMsg.from)
    })), /*#__PURE__*/React.createElement("div", {
      className: classes.threadOwnerMsg
    }, /*#__PURE__*/React.createElement("div", {
      className: classes.info
    }, /*#__PURE__*/React.createElement("span", null, threadOriginalMsg.from), /*#__PURE__*/React.createElement("span", null, renderTime(threadOriginalMsg.time, timeSyle))), JSON.stringify(threadOriginalMsg) !== '{}' && renderMsgDom(threadOriginalMsg), /*#__PURE__*/React.createElement("div", {
      className: classes.threadOriginalMessage
    }, i18next.t('Original message from Group Chat')))), isCreatingThread ? null : /*#__PURE__*/React.createElement("hr", {
      className: classes.split
    }));
  };

  var threadAudioRef = useRef(null);

  var _useState2 = useState(false),
      isPlaying = _useState2[0],
      setIsPlaying = _useState2[1];

  var play = function play(e, message) {
    setIsPlaying(true);
    threadAudioRef.current.play();
    var time = message.body.length * 1000;
    setTimeout(function () {
      setIsPlaying(false);
    }, time + 500);
  };

  var _useState3 = useState(''),
      audioUrl = _useState3[0],
      setUrl = _useState3[1];

  useEffect(function () {
    var _threadOriginalMsg$bo;

    if (threadOriginalMsg.body && (threadOriginalMsg === null || threadOriginalMsg === void 0 ? void 0 : (_threadOriginalMsg$bo = threadOriginalMsg.body) === null || _threadOriginalMsg$bo === void 0 ? void 0 : _threadOriginalMsg$bo.type) === "audio") {
      var options = {
        url: threadOriginalMsg.bySelf ? threadOriginalMsg.url : threadOriginalMsg.audioSrcUrl || threadOriginalMsg.url,
        headers: {
          Accept: 'audio/mp3'
        },
        onFileDownloadComplete: function onFileDownloadComplete(response) {
          var objectUrl = WebIM.utils.parseDownloadResponse.call(WebIM.conn, response);
          setUrl(objectUrl);
        },
        onFileDownloadError: function onFileDownloadError() {}
      };
      WebIM.utils.download.call(WebIM.conn, options);
    }
  }, [threadOriginalMsg]);

  var renderMsgDom = function renderMsgDom(message) {
    if (message.body.type === "txt") {
      return /*#__PURE__*/React.createElement("div", {
        className: classes.threadReplayMessage
      }, renderMessage(threadOriginalMsg.body));
    } else if (message.body.type === "file") {
      return /*#__PURE__*/React.createElement("div", {
        className: classes.fileCard
      }, /*#__PURE__*/React.createElement("div", {
        className: classes.fileIcon
      }, i18next.t("file")), /*#__PURE__*/React.createElement("div", {
        className: classes.fileInfo
      }, /*#__PURE__*/React.createElement("p", null, message.filename), /*#__PURE__*/React.createElement("span", null, Math.floor(message.body.size / 1024) + "kb")), /*#__PURE__*/React.createElement("div", {
        className: classes.download
      }, /*#__PURE__*/React.createElement("a", {
        href: message.body.url,
        download: message.filename
      }, /*#__PURE__*/React.createElement(IconButton, {
        className: "iconfont icon-xiazai"
      }))));
    } else if (message.body.type === "img") {
      return /*#__PURE__*/React.createElement("img", {
        src: message.url,
        alt: "img message",
        style: {
          display: 'inline-block',
          maxWidth: '80%'
        }
      });
    } else if (message.body.type === "audio") {
      return /*#__PURE__*/React.createElement("div", {
        style: {
          display: "flex",
          position: 'relative',
          width: '80px',
          backgroundColor: "rgba(0,0,0,0.05)",
          lineHeight: '38px',
          borderRadius: '4px'
        },
        onClick: function onClick(e) {
          return play(e, message);
        }
      }, /*#__PURE__*/React.createElement("span", {
        className: classes.duration
      }, Math.floor(message.body.length) + "''"), /*#__PURE__*/React.createElement(AudioPlayer, {
        play: isPlaying
      }), /*#__PURE__*/React.createElement("audio", {
        src: audioUrl,
        ref: threadAudioRef
      }));
    } else if (message.body.type === "video") {
      return /*#__PURE__*/React.createElement("div", {
        style: {
          position: "relative",
          maxWidth: '80%'
        }
      }, /*#__PURE__*/React.createElement("video", {
        style: {
          width: "100%",
          borderRadius: "20px"
        },
        controls: true,
        src: message.url
      }));
    } else {
      return null;
    }
  };

  var renderEmptyMsg = function renderEmptyMsg() {
    return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement("div", {
      className: classes.emptyMsg
    }, i18next.t('Sorry,unable to load original message')), isCreatingThread ? null : /*#__PURE__*/React.createElement("hr", {
      className: classes.split
    }));
  };

  var _useState4 = useState(false),
      isPullingDown = _useState4[0],
      setIsPullingDown = _useState4[1];

  var threadHasHistory = useSelector(function (state) {
    return state.message.threadHasHistory;
  });
  var messageList = useSelector(function (state) {
    var _state$thread$current;

    var to = (_state$thread$current = state.thread.currentThreadInfo) === null || _state$thread$current === void 0 ? void 0 : _state$thread$current.id;
    return _.get(state, ["message", 'threadMessage', to], []);
  }) || [];
  var scrollThreadEl = useRef(null);
  useEffect(function () {
    if (currentMessage === null || currentMessage === void 0 ? void 0 : currentMessage.id) {
      setThreadName('');
      setIsPullingDown(false);
      var dom = scrollThreadEl.current;
      if (!ReactDOM.findDOMNode(dom)) return;
      dom.scrollTop = 0;
    }

    if (currentMessage.source !== 'notify') {
      currentMessage.id && dispatch(MessageActions.setThreadHasHistory(true));
      currentMessage.id && dispatch(MessageActions.fetchThreadMessage(currentMessage.id));
    }
  }, [currentMessage.id]);
  useEffect(function () {
    var dom = scrollThreadEl.current;
    if (!ReactDOM.findDOMNode(dom)) return; // if (!threadHasHistory && dom.scrollTop !==0 && messageList.length !== 0 && dom.scrollHeight >= (dom.scrollTop + dom.clientHeight)) {//receive new message

    if (!threadHasHistory && messageList.length !== 0 && dom.scrollHeight >= dom.scrollTop + dom.clientHeight) {
      //receive new message
      dom.scrollTop = dom.scrollHeight;
    }
  }, [messageList.length]);

  var handleScroll = function handleScroll(e) {
    if (threadHasHistory && e.target.scrollTop !== 0 && e.target.scrollHeight - 1 >= e.target.scrollTop + e.target.clientHeight) {
      if (!isPullingDown) {
        setIsPullingDown(true);
        setTimeout(function () {
          var to = currentMessage.id;
          dispatch(MessageActions.fetchThreadMessage(to, cb, 'scroll'));
        }, 500);
      }
    }
  };

  var cb = function cb() {
    setIsPullingDown(false);
  };

  var isChatThread = true;
  return /*#__PURE__*/React.createElement(Box, {
    className: classes.root
  }, /*#__PURE__*/React.createElement(ThreadBar, null), /*#__PURE__*/React.createElement(Box, {
    ref: scrollThreadEl,
    className: classes.chat,
    onScroll: handleScroll
  }, isCreatingThread ? createThread() : showThreadMessage(), threadOriginalMsg.id === currentMessage.messageId || JSON.stringify(currentMessage) == '{}' ? renderOriginalMsg() : renderEmptyMsg(), /*#__PURE__*/React.createElement(ThreadMessageList, {
    messageList: messageList,
    showByselfAvatar: showByselfAvatar
  }), /*#__PURE__*/React.createElement("div", {
    style: {
      display: isPullingDown ? "block" : "none"
    }
  }, /*#__PURE__*/React.createElement("span", null, "Loading..."))), /*#__PURE__*/React.createElement(SendBox, {
    isChatThread: isChatThread,
    threadName: threadName
  }));
};

export default ThreadPanel;