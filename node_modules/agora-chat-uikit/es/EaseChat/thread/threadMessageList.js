import React, { memo, useCallback } from "react";
import { makeStyles } from "@material-ui/styles";
import "../chat/index.css";
import { useDispatch } from "react-redux";
import RetractedMessage from "../chat/messages/retractedMessage";
import FileMessage from "../chat/messages/fileMessage";
import ImgMessage from "../chat/messages/imageMessage";
import AudioOrVideoMessage from "../chat/messages/audioOrVideoMessage";
import TextMessage from "../chat/messages/textMessage";
import i18next from "i18next";
import MessageActions from "../../redux/message";
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      width: "100%",
      flex: 1,
      display: "flex",
      position: "relative",
      bottom: "0",
      top: "0"
    },
    pulldownWrapper: {
      width: '100%',
      padding: ' 0 16px'
    }
  };
});

function ThreadMessageList(_ref) {
  var messageList = _ref.messageList,
      showByselfAvatar = _ref.showByselfAvatar;
  var classes = useStyles();
  var dispatch = useDispatch();
  var handleRecallThreadMsg = useCallback(function (message) {
    var to = message.to,
        chatType = message.chatType;
    dispatch(MessageActions.recallMessage(to, chatType, message, true));
  }, [dispatch]);
  return /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React.createElement("div", {
    className: "pulldown-wrapper",
    style: {
      padding: '0'
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "pulldown-tips"
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
    style: {
      fontSize: "12px"
    }
  }, i18next.t("no more messages")))), /*#__PURE__*/React.createElement("ul", {
    className: "pulldown-list"
  }, messageList.length ? messageList.map(function (msg, index) {
    if (msg.body.type === "txt") {
      return /*#__PURE__*/React.createElement(TextMessage, {
        message: msg,
        key: msg.id + index,
        onRecallMessage: handleRecallThreadMsg,
        showByselfAvatar: showByselfAvatar,
        isThreadPanel: "true"
      });
    } else if (msg.body.type === "file") {
      return /*#__PURE__*/React.createElement(FileMessage, {
        message: msg,
        key: msg.id + index,
        onRecallMessage: handleRecallThreadMsg,
        showByselfAvatar: showByselfAvatar,
        isThreadPanel: "true"
      });
    } else if (msg.body.type === "img") {
      return /*#__PURE__*/React.createElement(ImgMessage, {
        message: msg,
        key: msg.id + index,
        onRecallMessage: handleRecallThreadMsg,
        showByselfAvatar: showByselfAvatar,
        isThreadPanel: "true"
      });
    } else if (msg.body.type === "audio" || msg.body.type === "video") {
      return /*#__PURE__*/React.createElement(AudioOrVideoMessage, {
        message: msg,
        key: msg.id + index,
        showByselfAvatar: showByselfAvatar,
        isThreadPanel: "true"
      });
    } else if (msg.body.type === "recall") {
      return /*#__PURE__*/React.createElement(RetractedMessage, {
        message: msg,
        key: msg.id + index
      });
    } else {
      return null;
    }
  }) : null)));
}

export default memo(ThreadMessageList);