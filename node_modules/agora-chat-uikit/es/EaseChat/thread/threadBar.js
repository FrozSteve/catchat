import React, { useContext } from "react";
import { makeStyles } from "@material-ui/styles";
import { Box, IconButton } from "@material-ui/core";
import threadIcon from '../../common/images/thread.png';
import close from '../../common/images/threadClose.png';
import edit from '../../common/images/edit.png';
import { useSelector, useDispatch } from "../../EaseApp/index";
import ThreadActions from "../../redux/thread";
import { EaseChatContext } from "../chat/index"; // import "../../i18n";

import i18next from "i18next";
import muteImg from '../../common/images/gray@2x.png';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      display: "flex",
      zIndex: "999",
      width: "100%",
      height: "6.67vh",
      maxHeight: "60px",
      minHeight: "40px",
      justifyContent: "space-between",
      alignItems: "center"
    },
    threadIconContainer: {
      // position: 'absolute',
      top: '4px',
      left: '16px',
      display: 'inline-block',
      width: '32px',
      height: '32px' // textAlign: 'center',

    },
    threadIcon: {
      marginTop: '5px',
      display: 'inline-block',
      width: '21px',
      height: '20px',
      objectFit: 'contain'
    },
    close: {
      width: '14px',
      height: '14px'
    },
    leftBar: {
      // position: 'relative',
      // paddingLeft: '36px',
      fontWeight: '600',
      textAlign: 'left',
      width: '315px',
      display: 'flex',
      alignItems: 'center'
    },
    rightBar: {
      display: 'flex'
    },
    editPanel: {
      marginTop: '4px',
      height: '32px',
      width: '32px',
      textAlign: 'center',
      lineHeight: '32px',
      cursor: 'pointer',
      borderRadius: '100%',
      background: '#fff',
      '&:hover': {
        background: '#F2F2F2'
      },
      '&:active': {
        background: '#E6E6E6'
      }
    },
    editIcon: {
      display: 'inline-block',
      width: '4px',
      height: '16px',
      objectFit: 'contain'
    },
    closeCon: {
      marginTop: '4px',
      marginLeft: '4px',
      height: '32px',
      width: '32px',
      textAlign: 'center',
      lineHeight: '32px',
      cursor: 'pointer',
      borderRadius: '100%',
      background: '#fff',
      '&:hover': {
        background: '#F2F2F2'
      },
      '&:active': {
        background: '#E6E6E6'
      }
    },
    muteImgStyle: {
      width: '12px',
      marginLeft: '2px',
      height: '12px'
    },
    threadNameStyle: {
      width: '250px',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      display: 'inline-block',
      fontSize: '16px',
      fontWeight: '600'
    }
  };
});

var ThreadBar = function ThreadBar() {
  var _presenceExt$threadId;

  var easeChatProps = useContext(EaseChatContext);
  var onEditThreadPanel = easeChatProps.onEditThreadPanel;
  var classes = useStyles();
  var dispatch = useDispatch();

  var closeThreadPanel = function closeThreadPanel() {
    dispatch(ThreadActions.updateThreadStates(false));
    dispatch(ThreadActions.setCurrentThreadInfo({}));
  };

  var threadName = useSelector(function (state) {
    var _state$thread, _state$thread$current;

    return (_state$thread = state.thread) === null || _state$thread === void 0 ? void 0 : (_state$thread$current = _state$thread.currentThreadInfo) === null || _state$thread$current === void 0 ? void 0 : _state$thread$current.name;
  }) || i18next.t('New thread');
  var threadId = useSelector(function (state) {
    var _state$thread2, _state$thread2$curren;

    return (_state$thread2 = state.thread) === null || _state$thread2 === void 0 ? void 0 : (_state$thread2$curren = _state$thread2.currentThreadInfo) === null || _state$thread2$curren === void 0 ? void 0 : _state$thread2$curren.id;
  }) || '';
  var threadOwner = useSelector(function (state) {
    var _state$thread3, _state$thread3$curren, _state$thread4, _state$thread4$curren;

    return ((_state$thread3 = state.thread) === null || _state$thread3 === void 0 ? void 0 : (_state$thread3$curren = _state$thread3.currentThreadInfo) === null || _state$thread3$curren === void 0 ? void 0 : _state$thread3$curren.from) || ((_state$thread4 = state.thread) === null || _state$thread4 === void 0 ? void 0 : (_state$thread4$curren = _state$thread4.currentThreadInfo) === null || _state$thread4$curren === void 0 ? void 0 : _state$thread4$curren.owner);
  });
  var isCreatingThread = useSelector(function (state) {
    var _state$thread5;

    return (_state$thread5 = state.thread) === null || _state$thread5 === void 0 ? void 0 : _state$thread5.isCreatingThread;
  }) || false;
  var to = useSelector(function (state) {
    var _state$global$globalP;

    return (_state$global$globalP = state.global.globalProps) === null || _state$global$globalP === void 0 ? void 0 : _state$global$globalP.to;
  });
  var hasThreadEditPanel = useSelector(function (state) {
    var _state$thread6;

    return (_state$thread6 = state.thread) === null || _state$thread6 === void 0 ? void 0 : _state$thread6.hasThreadEditPanel;
  }) || false; //打开thread编辑窗口

  var openEditPanel = function openEditPanel(e) {
    onEditThreadPanel(e, {
      groupId: to,
      //群组id
      threadId: threadId,
      //thread id
      threadName: threadName,
      //thread name
      threadOwner: threadOwner //thread owner

    });
  };

  var globalProps = useSelector(function (state) {
    var _state$global;

    return (_state$global = state.global) === null || _state$global === void 0 ? void 0 : _state$global.globalProps;
  });
  var presenceExt = globalProps.presenceExt;
  return /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React.createElement(Box, {
    position: "static",
    className: classes.leftBar
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.threadIconContainer
  }, /*#__PURE__*/React.createElement("img", {
    alt: "",
    className: classes.threadIcon,
    src: threadIcon
  })), /*#__PURE__*/React.createElement("span", {
    className: classes.threadNameStyle
  }, threadName), presenceExt && ((_presenceExt$threadId = presenceExt[threadId]) === null || _presenceExt$threadId === void 0 ? void 0 : _presenceExt$threadId.muteFlag) ? /*#__PURE__*/React.createElement("img", {
    className: classes.muteImgStyle,
    alt: "",
    src: muteImg
  }) : null), /*#__PURE__*/React.createElement(Box, {
    position: "static",
    className: classes.rightBar
  }, !isCreatingThread && hasThreadEditPanel && /*#__PURE__*/React.createElement("div", {
    className: classes.editPanel,
    onClick: function onClick(e) {
      return openEditPanel(e);
    }
  }, /*#__PURE__*/React.createElement("img", {
    alt: "",
    className: classes.editIcon,
    src: edit
  })), /*#__PURE__*/React.createElement("div", {
    className: classes.closeCon,
    onClick: closeThreadPanel
  }, /*#__PURE__*/React.createElement("img", {
    alt: "",
    className: classes.close,
    src: close
  }))));
};

export default ThreadBar;