import React, { useMemo, useEffect } from 'react';
import ReactDOM from 'react-dom';
import { Alert } from '@material-ui/lab';
var wrap;
export var message = {
  error: function error(content) {
    alert(content, 'error');
  },
  warn: function warn(content) {
    alert(content, 'warning');
  },
  info: function info(content) {
    alert(content, 'info');
  },
  success: function success(content) {
    alert(content, 'success');
  }
};
export var alert = function alert(content, type) {
  if (type === void 0) {
    type = 'info';
  }

  if (!wrap) {
    wrap = document.createElement("div");
    wrap.style.cssText = "\n        line-height:1.5;\n        text-align:center;\n        color: #333;\n\t\tbox-sizing: border-box;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tlist-style: none;\n\t\tposition: fixed;\n\t\tz-index: 100000;\n\t\twidth: 100%;\n\t\ttop: 16px;\n\t\tleft: 0;\n\t\tpointer-events: none;";
  }

  if (wrap) {
    document.body && document.body.appendChild(wrap); //挂body上
  }

  var divs = document.createElement("div");
  wrap.appendChild(divs);
  ReactDOM.render( /*#__PURE__*/React.createElement(Message, {
    rootDom: wrap,
    parentDom: divs,
    content: content,
    type: type
  }), divs);
};
export function Message(props) {
  var parentDom = props.parentDom,
      rootDom = props.rootDom,
      content = props.content,
      type = props.type;
  var unmount = useMemo(function () {
    return function () {
      if (parentDom && rootDom) {
        ReactDOM.unmountComponentAtNode(parentDom);
        rootDom.removeChild(parentDom);
      }
    };
  }, [parentDom, rootDom]);
  useEffect(function () {
    setTimeout(function () {
      unmount();
    }, 2000);
  }, [unmount]);
  return /*#__PURE__*/React.createElement(Alert, {
    severity: type
  }, content);
}