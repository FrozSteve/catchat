import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import React, { useState, useEffect, useContext, useRef } from "react";
import { useSelector, useDispatch } from "../../../EaseApp/index";
import { Menu, MenuItem, IconButton, Icon, InputBase, Tooltip } from "@material-ui/core";
import Toolbar from "@material-ui/core/Toolbar";
import Typography from "@material-ui/core/Typography";
import { makeStyles, fade } from "@material-ui/styles";
import Avatar from "@material-ui/core/Avatar";
import Box from "@material-ui/core/Box";
import i18next from "i18next";
import MessageActions from "../../../redux/message";
import SessionActions from "../../../redux/session";
import ThreadActions from "../../../redux/thread";
import GlobalPropsActions from "../../../redux/globalProps";
import ThreadListPanel from "../../thread/threadList/index.js";
import { EaseChatContext } from "../index";
import _ from 'lodash';
import avatarIcon1 from '../../../common/images/avatar1.jpg';
import avatarIcon2 from '../../../common/images/avatar2.jpg';
import avatarIcon3 from '../../../common/images/avatar3.jpg';
import avatarIcon4 from '../../../common/images/avatar4.jpg';
import avatarIcon5 from '../../../common/images/avatar5.jpg';
import avatarIcon6 from '../../../common/images/avatar6.jpg';
import avatarIcon7 from '../../../common/images/avatar7.jpg';
import avatarIcon11 from '../../../common/images/avatar11.jpg';
import groupAvatarIcon from '../../../common/images/groupAvatar.png';
import CallKit from 'chat-callkit';
import WebIM from '../../../utils/WebIM';
import InviteModal from './inviteModal';
import threadIcon from '../../../common/images/thread.png';
import offlineImg from '../../../common/images/Offline.png';
import onlineIcon from '../../../common/images/Online.png';
import busyIcon from '../../../common/images/Busy.png';
import donotdisturbIcon from '../../../common/images/Do_not_Disturb.png';
import customIcon from '../../../common/images/custom.png';
import leaveIcon from '../../../common/images/leave.png';
import muteImg from '../../../common/images/gray@2x.png';
import deleteChat from '../../../common/icons/reaction_delete@2x.png';
import moreIcon from '../../../common/icons/menu@2x.png';
import deleteIcon from '../../../common/icons/delete@2x.png';
import clearIcon from '../../../common/icons/clear@2x.png';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      display: "flex",
      zIndex: "999",
      width: "100%",
      height: "60px",
      maxHeight: "60px",
      minHeight: "40px",
      justifyContent: "space-between",
      alignItems: "center",
      // padding: "0 10px",
      backdropFilter: 'blur(32px)',
      background: 'rgba(255,255,255,.8)'
    },
    leftBar: {
      display: "flex",
      alignItems: "center",
      position: 'relative'
    },
    avatar: {
      margin: "0 12px 0 16px"
    },
    imgBox: {
      position: 'absolute',
      bottom: '0px',
      left: '45px',
      zIndex: 1,
      borderRadius: '50%',
      width: '17px',
      height: '17px',
      lineHeight: '21px',
      textAlign: 'center',
      background: '#fff'
    },
    imgStyle: {
      width: '15px',
      height: '15px',
      borderRadius: '50%'
    },
    muteImgStyle: {
      width: '12px',
      marginLeft: '2px',
      height: '12px'
    },
    threadIcon: {
      width: '20px',
      height: '20px'
    },
    deleteChatImg: {
      width: '30px',
      height: '30px',
      verticalAlign: 'middle'
    },
    imgActive: {
      borderRadius: '50%',
      width: '32px',
      cursor: 'pointer',
      marginRight: '12px',
      verticalAlign: 'middle',
      '&:hover': {
        background: 'rgba(0, 0, 0, 0.04)'
      }
    },
    userStatusOnline: {
      fontFamily: 'Roboto',
      fontStyle: 'normal',
      fontWeight: ' 500',
      fontSize: '12px',
      lineHeight: '14px',
      color: '#999999'
    },
    nameStatusMuteBox: {
      textAlign: 'left'
    },
    threadBtnBox: {
      padding: '6px'
    }
  };
});
var intervalTime = null;
var timeoutTime = null;

var MessageBar = function MessageBar(_ref) {
  var _presenceExt$to, _presenceExt$to2, _presenceExt$to3, _presenceExt$to4, _presenceExt$to5, _presenceExt$to6, _presenceExt$to7;

  var showinvite = _ref.showinvite,
      onInviteClose = _ref.onInviteClose,
      confrData = _ref.confrData;
  var easeChatProps = useContext(EaseChatContext);
  var onChatAvatarClick = easeChatProps.onChatAvatarClick,
      isShowRTC = easeChatProps.isShowRTC,
      getRTCToken = easeChatProps.getRTCToken,
      agoraUid = easeChatProps.agoraUid,
      getIdMap = easeChatProps.getIdMap,
      appId = easeChatProps.appId;
  var classes = useStyles();
  var dispatch = useDispatch();
  var groupById = useSelector(function (state) {
    var _state$group;

    return (_state$group = state.group) === null || _state$group === void 0 ? void 0 : _state$group.group.byId;
  }) || {};
  var globalProps = useSelector(function (state) {
    return state.global.globalProps;
  });
  var showThread = useSelector(function (state) {
    return state.thread.showThread;
  });

  var _useState = useState(null),
      sessionEl = _useState[0],
      setSessionEl = _useState[1];

  var _useState2 = useState(false),
      showEnter = _useState2[0],
      setShowEnter = _useState2[1];

  var showTyping = useSelector(function (state) {
    return state.global.showTyping;
  });
  var chatType = globalProps.chatType,
      to = globalProps.to,
      name = globalProps.name,
      presenceExt = globalProps.presenceExt;

  var renderSessionInfoMenu = function renderSessionInfoMenu() {
    var handleClickClearMessage = function handleClickClearMessage() {
      dispatch(MessageActions.clearMessage(chatType, to));
    };

    var handleClickDeleteSession = function handleClickDeleteSession() {
      dispatch(MessageActions.clearMessage(chatType, to));
      dispatch(SessionActions.deleteSession(to));
      dispatch(GlobalPropsActions.setGlobalProps({
        to: null
      }));
    };

    return /*#__PURE__*/React.createElement(Menu, {
      id: "simple-menu",
      anchorEl: sessionEl,
      keepMounted: true,
      open: Boolean(sessionEl),
      onClose: function onClose() {
        return setSessionEl(null);
      }
    }, /*#__PURE__*/React.createElement(MenuItem, {
      onClick: handleClickClearMessage
    }, /*#__PURE__*/React.createElement("img", {
      src: clearIcon,
      alt: "",
      style: {
        width: '30px'
      }
    }), /*#__PURE__*/React.createElement(Typography, {
      variant: "inherit",
      noWrap: true
    }, i18next.t("Clear Messages"))), /*#__PURE__*/React.createElement(MenuItem, {
      onClick: handleClickDeleteSession
    }, /*#__PURE__*/React.createElement(Box, {
      className: classes.menuItemIconBox
    }, /*#__PURE__*/React.createElement("img", {
      className: classes.deleteChatImg,
      src: deleteChat,
      alt: ""
    })), /*#__PURE__*/React.createElement(Typography, {
      variant: "inherit",
      noWrap: true
    }, i18next.t("Delete Chat"))));
  };

  var handleSessionInfoClick = function handleSessionInfoClick(e) {
    setSessionEl(e.currentTarget);
  };

  var _useState3 = useState(null),
      anchorEl = _useState3[0],
      setAnchorEl = _useState3[1];

  var onClose = function onClose() {
    setAnchorEl(null);
    dispatch(ThreadActions.setThreadListPanelDisplay(false));
  };

  var openThreadList = function openThreadList(e) {
    setAnchorEl(e.currentTarget);
  };

  var threadListAnchorEl = useRef(null);
  var getUserOnlineStatus = {
    'Offline': offlineImg,
    'Online': onlineIcon,
    'Busy': busyIcon,
    'Do not Disturb': donotdisturbIcon,
    'Leave': leaveIcon,
    '': onlineIcon
  };
  var userAvatars = {
    1: avatarIcon1,
    2: avatarIcon2,
    3: avatarIcon3,
    4: avatarIcon4,
    5: avatarIcon5,
    6: avatarIcon6,
    7: avatarIcon7,
    8: avatarIcon11
  };

  var _useState4 = useState([]),
      userAvatarIndex = _useState4[0],
      setUserAvatarIndex = _useState4[1];

  var _useState5 = useState([]),
      usersInfoData = _useState5[0],
      setUsersInfoData = _useState5[1];

  var _useState6 = useState(false),
      inviteOpen = _useState6[0],
      setInviteOpen = _useState6[1];

  var _useState7 = useState([]),
      groupMembers = _useState7[0],
      setGroupMembers = _useState7[1];

  var _useState8 = useState(''),
      callType = _useState8[0],
      setCallType = _useState8[1];

  useEffect(function () {
    if (to) {
      var _$find;

      var newwInfoData = localStorage.getItem("usersInfo_1.0");

      if (newwInfoData) {
        newwInfoData = JSON.parse(newwInfoData);
      }

      setUserAvatarIndex(((_$find = _.find(newwInfoData, {
        username: to
      })) === null || _$find === void 0 ? void 0 : _$find.userAvatar) || 8);

      if (intervalTime) {
        clearInterval(intervalTime);
      }

      intervalTime = setInterval(function () {
        var _$find2;

        var newwInfoData = localStorage.getItem("usersInfo_1.0");

        if (newwInfoData) {
          newwInfoData = JSON.parse(newwInfoData);
        }

        setUserAvatarIndex(((_$find2 = _.find(newwInfoData, {
          username: to
        })) === null || _$find2 === void 0 ? void 0 : _$find2.userAvatar) || 8);
      }, 500);
      timeoutTime = setTimeout(function () {
        clearInterval(intervalTime);
        clearTimeout(timeoutTime);
      }, 2000);
    }
  }, [to]);

  var callAudio = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var channel, members, _yield$getRTCToken, _agoraUid, accessToken, options, idMap;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setCallType('audio');
              channel = Math.uuid(8);

              if (!(chatType === 'groupChat')) {
                _context.next = 13;
                break;
              }

              _context.next = 5;
              return getGroupMembers(to);

            case 5:
              _context.t0 = _context.sent;

              if (_context.t0) {
                _context.next = 8;
                break;
              }

              _context.t0 = [];

            case 8:
              members = _context.t0;
              setGroupMembers(members);
              setInviteOpen(true);
              _context.next = 20;
              break;

            case 13:
              _context.next = 15;
              return getRTCToken({
                channel: channel,
                username: WebIM.conn.context.userId
              });

            case 15:
              _yield$getRTCToken = _context.sent;
              _agoraUid = _yield$getRTCToken.agoraUid;
              accessToken = _yield$getRTCToken.accessToken;
              options = {
                callType: 0,
                chatType: 'singleChat',
                to: to,
                agoraUid: _agoraUid,
                message: 'Start a voice call',
                accessToken: accessToken,
                channel: channel
              };
              CallKit.startCall(options);

            case 20:
              _context.next = 22;
              return getIdMap({
                userId: WebIM.conn.context.userId,
                channel: channel
              });

            case 22:
              idMap = _context.sent;
              CallKit.setUserIdMap(idMap);

            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function callAudio() {
      return _ref2.apply(this, arguments);
    };
  }();

  console.log('easeChatProps @@@@', easeChatProps);

  var callVideo = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var channel, _yield$getRTCToken2, agoraUid, accessToken, members, options, idMap;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              channel = Math.uuid(8);
              _context2.next = 3;
              return getRTCToken({
                channel: channel,
                // agoraId: WebIM.conn.agoraUid,
                username: WebIM.conn.context.userId
              });

            case 3:
              _yield$getRTCToken2 = _context2.sent;
              agoraUid = _yield$getRTCToken2.agoraUid;
              accessToken = _yield$getRTCToken2.accessToken;
              console.log('token', agoraUid, accessToken);
              setCallType('video');

              if (!(chatType === 'groupChat')) {
                _context2.next = 19;
                break;
              }

              _context2.next = 11;
              return getGroupMembers(to);

            case 11:
              _context2.t0 = _context2.sent;

              if (_context2.t0) {
                _context2.next = 14;
                break;
              }

              _context2.t0 = [];

            case 14:
              members = _context2.t0;
              setGroupMembers(members);
              setInviteOpen(true);
              _context2.next = 21;
              break;

            case 19:
              options = {
                callType: 1,
                chatType: 'singleChat',
                to: to,
                agoraUid: agoraUid,
                message: 'Start a video call',
                accessToken: accessToken,
                channel: channel
              };
              CallKit.startCall(options);

            case 21:
              _context2.next = 23;
              return getIdMap({
                userId: WebIM.conn.context.userId,
                channel: channel
              });

            case 23:
              idMap = _context2.sent;
              CallKit.setUserIdMap(idMap);

            case 25:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function callVideo() {
      return _ref3.apply(this, arguments);
    };
  }();

  var startCall = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(members) {
      var channel, type, _yield$getRTCToken3, agoraUid, accessToken, options, idMap;

      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              setInviteOpen(false);
              channel = confrData.channel || Math.uuid(8);
              type = confrData.type || callType == 'audio' ? 3 : 2;
              _context3.next = 5;
              return getRTCToken({
                channel: channel,
                username: WebIM.conn.context.userId
              });

            case 5:
              _yield$getRTCToken3 = _context3.sent;
              agoraUid = _yield$getRTCToken3.agoraUid;
              accessToken = _yield$getRTCToken3.accessToken;
              options = {
                callType: type,
                chatType: 'groupChat',
                to: members,
                agoraUid: agoraUid,
                message: "Start a " + (callType == 'audio' ? 'voice' : 'video') + " call",
                groupId: to || confrData.groupId,
                groupName: confrData.groupName || name[to],
                accessToken: accessToken,
                channel: channel
              }; // 多人通话过程中发邀请的文档

              CallKit.startCall(options);
              _context3.next = 12;
              return getIdMap({
                userId: WebIM.conn.context.userId,
                channel: channel
              });

            case 12:
              idMap = _context3.sent;
              CallKit.setUserIdMap(idMap);

            case 14:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function startCall(_x) {
      return _ref4.apply(this, arguments);
    };
  }();

  var handleInviteClose = function handleInviteClose() {
    setInviteOpen(false);
    onInviteClose && onInviteClose();
  };

  useEffect(function () {
    function updateGroupMember() {
      return _updateGroupMember.apply(this, arguments);
    }

    function _updateGroupMember() {
      _updateGroupMember = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var gid, members;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(chatType === 'groupChat' || !chatType)) {
                  _context4.next = 14;
                  break;
                }

                gid = to;

                if (!to) {
                  gid = confrData.groupId;
                }

                console.log('gid', gid);

                if (gid) {
                  _context4.next = 6;
                  break;
                }

                return _context4.abrupt("return");

              case 6:
                _context4.next = 8;
                return getGroupMembers(gid);

              case 8:
                _context4.t0 = _context4.sent;

                if (_context4.t0) {
                  _context4.next = 11;
                  break;
                }

                _context4.t0 = [];

              case 11:
                members = _context4.t0;
                setGroupMembers(members);
                setInviteOpen(showinvite);

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
      return _updateGroupMember.apply(this, arguments);
    }

    updateGroupMember();
  }, [showinvite]);

  var getGroupMembers = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(gid) {
      var data;
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return WebIM.conn.listGroupMembers({
                pageNum: 1,
                pageSize: 500,
                groupId: gid
              });

            case 2:
              data = _context5.sent;
              return _context5.abrupt("return", data.data);

            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function getGroupMembers(_x2) {
      return _ref5.apply(this, arguments);
    };
  }();

  var threadListPanelDisplay = useSelector(function (state) {
    var _state$thread;

    return (_state$thread = state.thread) === null || _state$thread === void 0 ? void 0 : _state$thread.threadListPanelDisplay;
  }) || false;
  useEffect(function () {
    if (threadListPanelDisplay) {
      setAnchorEl(threadListAnchorEl.current);
    } else {
      onClose();
    }
  }, [threadListPanelDisplay]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React.createElement(Box, {
    position: "static",
    className: classes.leftBar
  }, /*#__PURE__*/React.createElement(Avatar, {
    className: classes.avatar,
    onClick: function onClick(e) {
      return onChatAvatarClick && onChatAvatarClick(e, {
        chatType: chatType,
        to: to
      });
    },
    src: chatType === "singleChat" ? userAvatars[userAvatarIndex] : groupAvatarIcon,
    style: {
      borderRadius: chatType === "singleChat" ? "50%" : 'inherit'
    }
  }), chatType === "singleChat" ? /*#__PURE__*/React.createElement("div", {
    className: classes.imgBox
  }, /*#__PURE__*/React.createElement("img", {
    alt: "",
    src: presenceExt && getUserOnlineStatus[(_presenceExt$to = presenceExt[to]) === null || _presenceExt$to === void 0 ? void 0 : _presenceExt$to.ext] ? getUserOnlineStatus[(_presenceExt$to2 = presenceExt[to]) === null || _presenceExt$to2 === void 0 ? void 0 : _presenceExt$to2.ext] : customIcon,
    className: classes.imgStyle
  })) : null, /*#__PURE__*/React.createElement("div", {
    className: classes.nameStatusMuteBox
  }, name && name[to] || to, presenceExt && ((_presenceExt$to3 = presenceExt[to]) === null || _presenceExt$to3 === void 0 ? void 0 : _presenceExt$to3.muteFlag) ? /*#__PURE__*/React.createElement("img", {
    className: classes.muteImgStyle,
    alt: "",
    src: muteImg
  }) : null, /*#__PURE__*/React.createElement("div", {
    className: classes.userStatusOnline
  }, chatType === "singleChat" && presenceExt && ((_presenceExt$to4 = presenceExt[to]) === null || _presenceExt$to4 === void 0 ? void 0 : _presenceExt$to4.device) && /*#__PURE__*/React.createElement("span", null, (_presenceExt$to5 = presenceExt[to]) === null || _presenceExt$to5 === void 0 ? void 0 : _presenceExt$to5.device, " ", ((_presenceExt$to6 = presenceExt[to]) === null || _presenceExt$to6 === void 0 ? void 0 : _presenceExt$to6.ext) === '' ? 'Online' : (_presenceExt$to7 = presenceExt[to]) === null || _presenceExt$to7 === void 0 ? void 0 : _presenceExt$to7.ext), showTyping && /*#__PURE__*/React.createElement("span", {
    className: classes.userStatusOnline,
    style: {
      marginLeft: '5px'
    }
  }, "Entering ...")))), /*#__PURE__*/React.createElement(Box, {
    position: "static"
  }, window.location.protocol === 'https:' && isShowRTC && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconButton, {
    onClick: callAudio,
    className: "iconfont icon-yuyin icon"
  }), /*#__PURE__*/React.createElement(IconButton, {
    onClick: callVideo,
    className: "iconfont icon-shipin icon"
  })), /*#__PURE__*/React.createElement(IconButton, {
    className: classes.threadBtnBox + " iconfont icon",
    style: {
      display: chatType === "groupChat" && showThread ? "inline-flex" : "none"
    },
    onClick: openThreadList,
    ref: threadListAnchorEl
  }, /*#__PURE__*/React.createElement("img", {
    alt: "",
    className: classes.threadIcon,
    src: threadIcon
  })), /*#__PURE__*/React.createElement("img", {
    src: moreIcon,
    className: classes.imgActive,
    style: {
      background: sessionEl ? '#ccc' : ''
    },
    onClick: handleSessionInfoClick,
    alt: ""
  })), renderSessionInfoMenu(), /*#__PURE__*/React.createElement(ThreadListPanel, {
    anchorEl: anchorEl,
    onClose: onClose
  })), /*#__PURE__*/React.createElement(InviteModal, {
    open: inviteOpen,
    onClose: handleInviteClose,
    onCall: startCall,
    members: groupMembers,
    joinedMembers: confrData.joinedMembers
  }));
};

export default MessageBar;