var _excluded = ["children", "value", "index"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { memo, useState, useEffect } from "react";
import rnReactionEmoji from "../../../utils/rnReactionEmoji";
import { makeStyles } from "@material-ui/styles";
import store from "../../../redux/index";
import MessageActions from "../../../redux/message";
import WebIM from "../../../utils/WebIM";
import Dialog from "@material-ui/core/Dialog";
import AppBar from "@material-ui/core/AppBar";
import Tabs from "@material-ui/core/Tabs";
import Tab from "@material-ui/core/Tab";
import Typography from "@material-ui/core/Typography";
import Box from "@material-ui/core/Box";
import Avatar from "@material-ui/core/Avatar";
import deleteReactionIcon from "../../../common/icons/reaction_delete@2x.png";
import avatarIcon1 from "../../../common/images/avatar1.jpg";
import avatarIcon2 from "../../../common/images/avatar2.jpg";
import avatarIcon3 from "../../../common/images/avatar3.jpg";
import threadClose from "../../../common/images/threadClose.png";
var useStyles = makeStyles(function (theme) {
  return {
    infoBox: {
      height: "360px",
      width: "480px",
      flexGrow: 1
    },
    infoTitle: {
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between",
      padding: "0px 15px",
      height: "58px",
      borderBottom: "1px solid #C4C4C4"
    },
    infoReaction: {
      height: "calc(100% - 60px)"
    },
    textStyleTitle: {
      fontFamily: "Roboto",
      fontWeight: "600",
      fontStyle: "normal",
      fontSize: "18px",
      LineHeight: "28px",
      blend: "Pass through",
      padding: "8px"
    },
    closeStyle: {
      width: "14px",
      height: "14px",
      blend: "Pass through",
      cursor: "pointer"
    },
    root: {
      background: "#FFFFFF",
      '& .MuiTabs-scroller .MuiTabs-indicator': {
        background: '#114EFF',
        height: '3px',
        display: 'inline-block',
        borderRadius: '5px'
      },
      '& .MuiTabScrollButton-root': {
        width: '25px',
        '& .MuiSvgIcon-root': {
          width: '25px',
          height: '25px'
        }
      }
    },
    iconStyle: {
      width: "24px",
      height: "24px",
      cursor: "pointer"
    },
    reactionItem: {
      width: "70px !important",
      minWidth: "0 !important"
    },
    tabPanelItem: {
      position: "relative",
      '& .MuiBox-root': {
        padding: '12px'
      }
    },
    reactionNumLabel: {
      display: "flex",
      justifyContent: "center",
      "& span": {
        margin: "0 10px"
      }
    },
    reactionUsreItem: {
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center"
    },
    reactionUserStyle: {
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
      fontFamily: "SF Compact Text",
      fontWeight: "600",
      fontStyle: "normal",
      fontSize: "16px",
      lineHeight: "20px",
      marginTop: "10px"
    },
    userBox: {
      display: "flex",
      justifyContent: "center",
      alignItems: "center"
    },
    textStyle: {
      marginLeft: '8px !important'
    },
    myselfPopover: {
      '& .MuiDialog-paper': {
        borderRadius: '12px' // backdropFilter: 'blur(12px)',
        // background: 'rgba(255,255,255,.8)',

      }
    }
  };
});

function TabPanel(props) {
  var children = props.children,
      value = props.value,
      index = props.index,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  return /*#__PURE__*/React.createElement("div", _extends({
    role: "tabpanel",
    hidden: value !== index,
    id: "scrollable-force-tabpanel-" + index,
    "aria-labelledby": "scrollable-force-tab-" + index
  }, other), value === index && /*#__PURE__*/React.createElement(Box, {
    p: 3
  }, /*#__PURE__*/React.createElement(Typography, null, children)));
}

function a11yProps(index) {
  return {
    id: "scrollable-force-tab-" + index,
    "aria-controls": "scrollable-force-tabpanel-" + index
  };
}

var ReactionInfo = function ReactionInfo(_ref) {
  var anchorEl = _ref.anchorEl,
      onClose = _ref.onClose,
      message = _ref.message;
  var classes = useStyles();

  var _useState = useState(0),
      value = _useState[0],
      setValue = _useState[1];

  var reactionMsg = message.reactions || [];
  var loginUserId = WebIM.conn.context.userId || "";
  var userAvatars = {
    1: avatarIcon1,
    2: avatarIcon2,
    3: avatarIcon3
  };
  useEffect(function () {
    setValue(0);
  }, [anchorEl]);

  var handleChange = function handleChange(event, newValue) {
    setValue(newValue);
  };

  var handleDeleteReaction = function handleDeleteReaction(reaction) {
    if (reactionMsg.length === 0) {
      onClose();
    }

    store.dispatch(MessageActions.deleteReaction(message, reaction));
  };

  var reactionUserList = function reactionUserList(item) {
    var userList = item.userList,
        reaction = item.reaction;
    var userName = "";
    return /*#__PURE__*/React.createElement(React.Fragment, null, userList.map(function (val, i) {
      var isCurrentLoginUser = val === loginUserId;

      if (isCurrentLoginUser) {
        userName = "You";
      } else {
        userName = val;
      }

      return /*#__PURE__*/React.createElement("div", {
        key: i,
        className: classes.reactionUserStyle
      }, /*#__PURE__*/React.createElement("div", {
        className: classes.userBox
      }, /*#__PURE__*/React.createElement(Avatar, {
        src: userAvatars[1]
      }), /*#__PURE__*/React.createElement(Typography, {
        className: classes.textStyle
      }, userName)), isCurrentLoginUser && /*#__PURE__*/React.createElement("img", {
        src: deleteReactionIcon,
        alt: "",
        className: classes.iconStyle,
        onClick: function onClick() {
          return handleDeleteReaction(reaction);
        }
      }));
    }));
  };

  return /*#__PURE__*/React.createElement(Dialog, {
    open: anchorEl,
    onClose: onClose,
    className: classes.myselfPopover
  }, /*#__PURE__*/React.createElement(Box, {
    className: classes.infoBox
  }, /*#__PURE__*/React.createElement(Box, {
    className: classes.infoTitle
  }, /*#__PURE__*/React.createElement("span", {
    className: classes.textStyleTitle
  }, "Reactions"), /*#__PURE__*/React.createElement("span", {
    className: classes.closeStyle,
    onClick: onClose
  }, /*#__PURE__*/React.createElement("img", {
    slt: "",
    src: threadClose
  }))), /*#__PURE__*/React.createElement(Box, {
    className: classes.infoReaction
  }, /*#__PURE__*/React.createElement(AppBar, {
    position: "static",
    color: "default",
    style: {
      boxShadow: "none"
    }
  }, /*#__PURE__*/React.createElement(Tabs, {
    value: value,
    onChange: handleChange,
    variant: "scrollable",
    scrollButtons: "on",
    indicatorColor: "primary",
    textColor: "primary",
    "aria-label": "scrollable force tabs example",
    className: classes.root
  }, reactionMsg.map(function (item, i) {
    if (item.count === 0) return;
    var label = /*#__PURE__*/React.createElement("div", {
      className: classes.reactionNumLabel
    }, rnReactionEmoji(item.reaction), " ", /*#__PURE__*/React.createElement("span", null, item.userList.length));
    return /*#__PURE__*/React.createElement(Tab, _extends({
      label: label
    }, a11yProps(i), {
      className: classes.reactionItem,
      key: i
    }));
  }))), reactionMsg.map(function (item, i) {
    if (item.count === 0) return;
    return /*#__PURE__*/React.createElement("div", {
      key: item.reaction
    }, /*#__PURE__*/React.createElement(TabPanel, {
      value: value,
      index: i,
      className: classes.tabPanelItem
    }, /*#__PURE__*/React.createElement("div", null, reactionUserList(item))));
  }))));
};

export default memo(ReactionInfo);