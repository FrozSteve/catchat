import React, { memo, useState } from "react";
import { makeStyles } from "@material-ui/styles";
import store from "../../../redux/index";
import MessageActions from "../../../redux/message";
import ReactionIcon from "./renderReactionIcon";
import addReactionIcon from "../../../common/icons/add_reaction@2x.png";
import { Tooltip } from '@material-ui/core';
var useStyles = makeStyles(function (theme) {
  return {
    iconStyley: {
      height: "24px",
      width: "24px",
      cursor: "pointer"
    },
    conatiner: {
      height: "24px",
      width: "24px",
      "float": function float(props) {
        return props.bySelf ? 'right' : 'left';
      },
      borderRadius: '50%',
      '&:hover': {
        background: '#E6E6E6'
      }
    },
    reactionTooltip: {
      background: '#fff',
      color: 'rgba(0, 0, 0, 0.87)',
      boxShadow: '6px 6px 12px rgba(0, 0, 0, 0.12), -2px 0px 8px rgba(0, 0, 0, 0.08)'
    }
  };
});

var Reaction = function Reaction(_ref) {
  var message = _ref.message;
  var classes = useStyles({});

  var _useState = useState(null),
      reactionVisible = _useState[0],
      setReactionVisible = _useState[1];

  var handleClickEmoji = function handleClickEmoji(e) {
    setReactionVisible(e.currentTarget);
  };

  var handleEmojiClose = function handleEmojiClose() {
    setReactionVisible(null);
  };

  var handleEmojiSelected = function handleEmojiSelected(emoji) {
    if (!emoji) return;
    console.log('>>> handleEomji');
    store.dispatch(MessageActions.addReactions(message, emoji));
  };

  return /*#__PURE__*/React.createElement("div", {
    className: classes.conatiner
  }, /*#__PURE__*/React.createElement(Tooltip, {
    title: "Add Reactions",
    placement: "top",
    classes: {
      tooltip: classes.reactionTooltip
    }
  }, /*#__PURE__*/React.createElement("img", {
    src: addReactionIcon,
    alt: "reaction",
    className: classes.iconStyley,
    onClick: handleClickEmoji
  })), /*#__PURE__*/React.createElement(ReactionIcon, {
    anchorEl: reactionVisible,
    onSelected: handleEmojiSelected,
    onClose: handleEmojiClose,
    message: message
  }));
};

export default memo(Reaction);