import React, { memo, useState, useContext } from "react";
import { makeStyles } from "@material-ui/styles";
import avatar from "../../../common/icons/avatar1.jpg"; // import clsx from 'clsx';

import i18next from "i18next";
import { IconButton, Icon, Menu, MenuItem, Tooltip } from "@material-ui/core";
import { renderTime, sessionItemTime } from "../../../utils";
import { EaseChatContext } from "../index";
import Reaction from "../reaction";
import RenderReactions from "../reaction/renderReaction";
import threadIcon from "../../../common/images/thread.png";
import MsgThreadInfo from "./msgThreadInfo";
import MessageStatus from "./messageStatus";
import ico_file from "../../../common/images/ico_file.svg";
import ico_img from "../../../common/images/img_file@2x.png";
import ico_video from "../../../common/images/video_file@2x.png";
import { userAvatar } from '../../../utils';
import download from '../../../utils/download';
var useStyles = makeStyles(function (theme) {
  var _textBodyBox;

  return {
    pulldownListItem: {
      padding: "10px 0",
      listStyle: "none",
      marginTop: "26px",
      position: "relative",
      display: "flex",
      flexDirection: function flexDirection(props) {
        return props.bySelf ? "row-reverse" : "row";
      },
      alignItems: "flex-end"
    },
    userName: {
      padding: "0 10px 4px",
      color: "#8797A4",
      fontSize: "14px",
      display: function display(props) {
        return props.chatType !== "singleChat" && !props.bySelf ? "inline-block" : "none";
      },
      textAlign: function textAlign(props) {
        return props.bySelf ? "right" : "left";
      }
    },
    textBodyBox: (_textBodyBox = {
      display: "flex",
      // flexDirection: (props) => (props.bySelf ? "inherit" : "column"),
      flexDirection: 'column',
      maxWidth: "80%",
      minWidth: "40%",
      alignItems: function alignItems(props) {
        return props.bySelf ? "flex-start" : "unset";
      },
      position: "relative",
      background: '#f2f2f2',
      padding: function padding(props) {
        return props.showThreadEntry ? '0' : '12px';
      },
      marginLeft: '12px'
    }, _textBodyBox["padding"] = '0', _textBodyBox.borderRadius = function borderRadius(props) {
      return props.bySelf ? "16px 16px 4px 16px" : "16px 16px 16px 4px";
    }, _textBodyBox),
    fileCard: {
      width: function width(props) {
        return props.bySelf ? "252px" : '';
      },
      height: function height(props) {
        return props.bySelf ? "72px" : '';
      },
      marginTop: function marginTop(props) {
        return !props.bySelf && props.rnReactions ? "15px" : "0";
      },
      // backgroundColor: "#fff",
      display: "flex",
      alignItems: "center",
      justifyContent: function justifyContent(props) {
        return props.bySelf ? '' : 'space-between';
      },
      flexDirection: function flexDirection(props) {
        return props.bySelf ? '' : 'row-reverse';
      },
      // marginBottom: "6px",
      padding: function padding(props) {
        return props.bySelf ? '' : '8px';
      }
    },
    fileIcon: {
      width: "50px",
      height: "50px",
      background: "#fff",
      borderRadius: "12px",
      border: "1px solid rgba(35, 195, 129, 0.06)",
      textAlign: "center",
      lineHeight: "47px",
      margin: "0 7px 0 7px",
      marginRight: function marginRight(props) {
        return props.bySelf ? '7px' : '0px';
      },
      flexShrink: 0,
      '& img': {
        width: '40px',
        verticalAlign: 'middle'
      }
    },
    icoFileImg: {
      transform: 'rotateX(180deg)'
    },
    fileInfo: {
      "& p": {
        overflow: "hidden",
        whiteSpace: "nowrap",
        textOverflow: "ellipsis",
        width: "126px",
        margin: "0"
      },
      "& span": {
        fontSize: "12px",
        color: "#010101",
        lineHeight: "16px"
      }
    },
    icon: {
      color: "rgba(35, 195, 129, 1)",
      fontWeight: "bold",
      fontSize: "38px"
    },
    download: {
      fontSize: "16px",
      color: "rgba(0,0,0,.6)",
      fontWeight: "bold",
      cursor: "pointer"
    },
    time: {
      position: "absolute",
      fontSize: "11px",
      height: "16px",
      color: "rgba(1, 1, 1, .2)",
      lineHeight: "20px",
      textAlign: "center",
      top: "-18px",
      width: "100%"
    },
    avatarStyle: {
      height: "28px",
      width: "28px",
      borderRadius: "50%"
    },
    textReaction: {
      position: "absolute",
      right: function right(props) {
        return props.bySelf ? "" : "0";
      },
      left: function left(props) {
        return props.bySelf ? "0" : "";
      },
      bottom: "6px",
      transform: function transform(props) {
        return props.bySelf ? "translateX(-100%)" : "translateX(100%)";
      },
      height: '24px'
    },
    textReactionCon: {
      width: function width(props) {
        return props.showThreadEntry ? "48px" : "24px";
      },
      height: '100%',
      "float": function float(props) {
        return props.bySelf ? 'right' : 'left';
      }
    },
    reactionBox: {
      position: "absolute",
      top: function top(props) {
        return props.bySelf ? "-15px" : "33px";
      },
      right: function right(props) {
        return props.bySelf ? "0px" : "";
      },
      left: function left(props) {
        return props.bySelf ? "" : "5px";
      },
      background: "#F2F2F2",
      borderRadius: "17.5px",
      padding: "3px",
      border: "solid 3px #FFFFFF",
      boxShadow: "0 10px 10px 0 rgb(0 0 0 / 30%)"
    },
    threadCon: {
      "float": function float(props) {
        return props.bySelf ? 'left' : 'right';
      },
      height: '24px',
      width: '24px',
      borderRadius: '50%',
      '&:hover': {
        background: '#E6E6E6'
      }
    },
    thread: {
      marginTop: '5px',
      marginLeft: '4px',
      width: '16px',
      height: '15px',
      background: "url(" + threadIcon + ") center center no-repeat",
      backgroundSize: 'contain',
      cursor: 'pointer'
    },
    tooltipthread: {
      background: '#fff',
      color: 'rgba(0, 0, 0, 0.87)',
      boxShadow: '6px 6px 12px rgba(0, 0, 0, 0.12), -2px 0px 8px rgba(0, 0, 0, 0.08)'
    }
  };
});
var initialState = {
  mouseX: null,
  mouseY: null
};

function FileMessage(_ref) {
  var message = _ref.message,
      onRecallMessage = _ref.onRecallMessage,
      showByselfAvatar = _ref.showByselfAvatar,
      onCreateThread = _ref.onCreateThread,
      isThreadPanel = _ref.isThreadPanel,
      showThread = _ref.showThread;
  var easeChatProps = useContext(EaseChatContext);
  var onAvatarChange = easeChatProps.onAvatarChange,
      isShowReaction = easeChatProps.isShowReaction,
      customMessageClick = easeChatProps.customMessageClick,
      customMessageList = easeChatProps.customMessageList;

  var _useState = useState(initialState),
      state = _useState[0],
      setState = _useState[1];

  var _useState2 = useState(false),
      hoverDeviceModule = _useState2[0],
      setHoverDeviceModule = _useState2[1];

  var reactionMsg = (message === null || message === void 0 ? void 0 : message.reactions) || [];

  var handleClose = function handleClose() {
    setState(initialState);
  };

  var recallMessage = function recallMessage() {
    onRecallMessage(message);
    handleClose();
  };

  var handleClick = function handleClick(event) {
    event.preventDefault();
    setState({
      mouseX: event.clientX - 2,
      mouseY: event.clientY - 4
    });
  };

  var _customMessageClick = function _customMessageClick(val, option) {
    return function (e) {
      customMessageClick && customMessageClick(e, val, option);
      handleClose();
    };
  };

  var createThread = function createThread() {
    onCreateThread(message);
  };

  var sentStatus = function sentStatus() {
    return /*#__PURE__*/React.createElement("div", null, message.bySelf && !isThreadPanel && /*#__PURE__*/React.createElement(MessageStatus, {
      status: message.status,
      style: {
        marginRight: "-30px",
        marginTop: message.chatType === "singleChat" ? "0" : "22px"
      }
    }));
  };

  var showThreadEntry = showThread && !message.chatThreadOverview && !isThreadPanel && message.chatType === 'groupChat';
  var showThreaddInfo = showThread && !isThreadPanel && message.chatType === "groupChat" && message.chatThreadOverview && JSON.stringify(message.chatThreadOverview) !== '{}';
  var classes = useStyles({
    bySelf: message.bySelf,
    showThreadEntry: showThreadEntry,
    rnReactions: reactionMsg.length > 0
  });

  var handleDownloadFile = function handleDownloadFile() {
    fetch(message.body.url).then(function (res) {
      return res.blob();
    }).then(function (blob) {
      download(blob, message.filename);
    })["catch"](function (err) {
      return false;
    })["finally"](function (res) {
      return true;
    });
  };

  return /*#__PURE__*/React.createElement("li", {
    className: classes.pulldownListItem,
    onMouseOver: function onMouseOver() {
      return setHoverDeviceModule(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setHoverDeviceModule(false);
    }
  }, !message.bySelf && /*#__PURE__*/React.createElement("img", {
    className: classes.avatarStyle,
    src: userAvatar(message.from),
    onClick: function onClick(e) {
      return onAvatarChange && onAvatarChange(e, message);
    }
  }), showByselfAvatar && message.bySelf && /*#__PURE__*/React.createElement("img", {
    className: classes.avatarStyle,
    src: userAvatar(message.from)
  }), /*#__PURE__*/React.createElement("div", {
    className: classes.textBodyBox,
    onClick: handleDownloadFile
  }, /*#__PURE__*/React.createElement("span", {
    className: classes.userName
  }, message.from), /*#__PURE__*/React.createElement("div", {
    className: classes.fileCard,
    onContextMenu: handleClick
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.fileIcon
  }, message.data && message.data.type ? message.data.type.includes('image') ? /*#__PURE__*/React.createElement("img", {
    src: ico_img,
    alt: "file"
  }) : message.data.type.includes('video') ? /*#__PURE__*/React.createElement("img", {
    src: ico_video,
    alt: "file"
  }) : /*#__PURE__*/React.createElement("img", {
    className: classes.icoFileImg,
    src: ico_file,
    alt: "file"
  }) : /*#__PURE__*/React.createElement("img", {
    className: classes.icoFileImg,
    src: ico_file,
    alt: "file"
  })), /*#__PURE__*/React.createElement("div", {
    className: classes.fileInfo
  }, /*#__PURE__*/React.createElement("p", null, message.filename), /*#__PURE__*/React.createElement("span", null, Math.floor(message.body.size / 1024) + "kb"))), /*#__PURE__*/React.createElement("div", {
    className: classes.textReaction
  }, hoverDeviceModule ? /*#__PURE__*/React.createElement("div", {
    className: classes.textReactionCon
  }, isShowReaction && /*#__PURE__*/React.createElement(Reaction, {
    message: message
  }), showThreadEntry && /*#__PURE__*/React.createElement("div", {
    className: classes.threadCon,
    onClick: createThread
  }, /*#__PURE__*/React.createElement(Tooltip, {
    title: "Create Thread",
    placement: "top",
    classes: {
      tooltip: classes.tooltipthread
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.thread
  })))) : sentStatus()), showThreaddInfo ? /*#__PURE__*/React.createElement(MsgThreadInfo, {
    message: message
  }) : null, reactionMsg.length > 0 && /*#__PURE__*/React.createElement("div", {
    className: classes.reactionBox
  }, /*#__PURE__*/React.createElement(RenderReactions, {
    message: message
  }))), /*#__PURE__*/React.createElement("div", {
    className: classes.time
  }, sessionItemTime(message.time)), /*#__PURE__*/React.createElement(Menu, {
    keepMounted: true,
    open: state.mouseY !== null,
    onClose: handleClose,
    anchorReference: "anchorPosition",
    anchorPosition: state.mouseY !== null && state.mouseX !== null ? {
      top: state.mouseY,
      left: state.mouseX
    } : undefined
  }, message.bySelf && /*#__PURE__*/React.createElement(MenuItem, {
    onClick: recallMessage
  }, i18next.t("Withdraw")), customMessageList && customMessageList.map(function (val, key) {
    var bySelf = message.bySelf;
    var show = false;

    if (val.position === 'others') {}

    switch (val.position) {
      case 'others':
        show = bySelf ? false : true;
        break;

      case 'self':
        show = bySelf ? true : false;
        break;

      default:
        show = true;
        break;
    }

    return show ? /*#__PURE__*/React.createElement(MenuItem, {
      key: key,
      onClick: _customMessageClick(val, message)
    }, val.name) : null;
  })));
}

export default memo(FileMessage);