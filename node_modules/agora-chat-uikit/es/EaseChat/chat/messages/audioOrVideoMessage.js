import React, { memo, useEffect, useRef, useState, useContext } from "react";
import { makeStyles } from "@material-ui/styles";
import { Avatar, Icon, Tooltip } from "@material-ui/core";
import { renderTime, sessionItemTime } from "../../../utils/index";
import avatar from "../../../common/icons/avatar1.jpg";
import AudioPlayer from "./audioPlayer/audioPlayer";
import { Menu, MenuItem } from "@mui/material";
import { EaseChatContext } from "../index";
import Reaction from "../reaction";
import RenderReactions from "../reaction/renderReaction";
import threadIcon from "../../../common/images/thread.png";
import MsgThreadInfo from "./msgThreadInfo";
import MessageStatus from "./messageStatus";
import { userAvatar } from '../../../utils';
var useStyles = makeStyles(function (theme) {
  return {
    pulldownListItem: {
      padding: "10px 0",
      listStyle: "none",
      marginTop: "26px",
      position: "relative",
      display: "flex",
      flexDirection: function flexDirection(props) {
        return props.bySelf ? "row-reverse" : "row";
      },
      alignItems: 'flex-end'
    },
    userName: {
      padding: "0 10px 4px",
      color: "#8797A4",
      fontSize: "14px",
      display: function display(props) {
        return props.chatType !== "singleChat" && !props.bySelf ? "inline-block" : "none";
      },
      textAlign: function textAlign(props) {
        return props.bySelf ? "right" : "left";
      }
    },
    textBodyBox: {
      position: 'relative',
      display: "flex",
      marginLeft: function marginLeft(props) {
        return props.showThreaddInfo ? '12px' : '0';
      },
      flexDirection: 'column',
      background: function background(props) {
        return props.showThreaddInfo ? '#f2f2f2' : '#fff';
      },
      maxWidth: "80%",
      alignItems: function alignItems(props) {
        return props.bySelf ? "inherit" : "unset";
      },
      padding: function padding(props) {
        return props.showThreaddInfo ? '12px' : '0';
      },
      borderRadius: function borderRadius(props) {
        return props.bySelf ? "16px 16px 4px 16px" : "16px 16px 16px 4px";
      }
    },
    audioBox: {
      margin: function margin(props) {
        return props.bySelf ? "0 0px 6px 0" : props.rnReactions ? "15px 0 10px 10px" : "0 0 6px 10px";
      },
      width: function width(props) {
        return "calc(208px * " + props.duration / 15 + ")";
      },
      minWidth: '70px',
      maxWidth: '100%',
      height: "34px",
      background: function background(props) {
        return props.bySelf ? "linear-gradient(135deg, #B128DD 0%, #234AFC 100%)" // linear-gradient(124deg, rgb(201, 19, 223) 20%, rgb(21, 77, 254) 90%)
        : "rgb(242, 242, 242)";
      },
      borderRadius: function borderRadius(props) {
        return props.bySelf ? "16px 16px 4px" : "16px 16px 16px 4px";
      },
      color: function color(props) {
        return props.bySelf ? "#fff" : "rgb(0, 0, 0)";
      },
      textAlign: function textAlign(props) {
        return props.bySelf ? "left" : "right";
      },
      // flexDirection: (props) => (props.bySelf ? "row" : "row-reverse"),
      flexDirection: "row",
      alignItems: "center",
      minHeight: "40px",
      lineHeight: "34px",
      padding: "0 5px",
      display: "flex",
      cursor: "pointer",
      fontSize: "14px",
      position: "relative"
    },
    time: {
      position: "absolute",
      fontSize: "11px",
      height: "16px",
      color: "rgba(1, 1, 1, .2)",
      lineHeight: "20px",
      textAlign: "center",
      top: "-18px",
      width: "100%"
    },
    duration: {
      margin: "0 4px",
      position: "relative",
      left: function left(props) {
        return props.bySelf ? "-15px" : "15px";
      }
    },
    icon: {
      transform: function transform(props) {
        return props.bySelf ? "rotate(0deg)" : "rotate(180deg)";
      },
      display: "block",
      height: "34px"
    },
    textReaction: {
      position: "absolute",
      right: function right(props) {
        return props.bySelf ? "" : "0";
      },
      left: function left(props) {
        return props.bySelf ? "0" : "";
      },
      bottom: '6px',
      transform: function transform(props) {
        return props.bySelf ? "translateX(-100%)" : "translateX(100%)";
      }
    },
    reactionBox: {
      position: "absolute",
      top: function top(props) {
        return props.bySelf ? "-26px" : "22px";
      },
      right: function right(props) {
        return props.bySelf ? "0" : "";
      },
      left: function left(props) {
        return props.bySelf ? "" : "0";
      },
      background: "#F2F2F2",
      borderRadius: "17.5px",
      padding: "3px",
      border: "solid 2px #FFFFFF",
      boxShadow: "0 10px 10px 0 rgb(0 0 0 / 30%)"
    },
    textReactionCon: {
      width: function width(props) {
        return props.showThreadEntry ? "48px" : "24px";
      },
      height: '100%',
      "float": function float(props) {
        return props.bySelf ? 'right' : 'left';
      }
    },
    threadCon: {
      "float": function float(props) {
        return props.bySelf ? 'left' : 'right';
      },
      height: '24px',
      width: '24px',
      borderRadius: '50%',
      '&:hover': {
        background: '#E6E6E6'
      }
    },
    thread: {
      marginTop: '5px',
      marginLeft: '4px',
      width: '16px',
      height: '15px',
      background: "url(" + threadIcon + ") center center no-repeat",
      backgroundSize: 'contain',
      cursor: 'pointer'
    },
    tooltipthread: {
      background: '#fff',
      color: 'rgba(0, 0, 0, 0.87)',
      boxShadow: '6px 6px 12px rgba(0, 0, 0, 0.12), -2px 0px 8px rgba(0, 0, 0, 0.08)'
    }
  };
});
var initialState = {
  mouseX: null,
  mouseY: null
};

function AudioOrVideoMessage(_ref) {
  var message = _ref.message,
      showByselfAvatar = _ref.showByselfAvatar,
      onCreateThread = _ref.onCreateThread,
      isThreadPanel = _ref.isThreadPanel,
      showThread = _ref.showThread;
  var audioType = message.body.type === "audio";
  var easeChatProps = useContext(EaseChatContext);
  var onAvatarChange = easeChatProps.onAvatarChange,
      isShowReaction = easeChatProps.isShowReaction,
      customMessageClick = easeChatProps.customMessageClick,
      customMessageList = easeChatProps.customMessageList; // const url = message.bySelf? message.url: message.audioSrcUrl;

  var _useState = useState(''),
      url = _useState[0],
      setUrl = _useState[1];

  useEffect(function () {
    var options = {
      url: message.bySelf ? message.url : message.audioSrcUrl || message.url,
      headers: {
        Accept: 'audio/mp3'
      },
      onFileDownloadComplete: function onFileDownloadComplete(response) {
        var objectUrl = WebIM.utils.parseDownloadResponse.call(WebIM.conn, response);
        setUrl(objectUrl);
      },
      onFileDownloadError: function onFileDownloadError() {}
    };
    WebIM.utils.download.call(WebIM.conn, options);
  }, [message.audioSrcUrl, message.url]);
  var audioRef = useRef(null);

  var _useState2 = useState(false),
      isPlaying = _useState2[0],
      setIsPlaying = _useState2[1];

  var _useState3 = useState(initialState),
      state = _useState3[0],
      setState = _useState3[1];

  var _useState4 = useState(false),
      hoverDeviceModule = _useState4[0],
      setHoverDeviceModule = _useState4[1];

  var reactionMsg = (message === null || message === void 0 ? void 0 : message.reactions) || [];

  var handleClose = function handleClose() {
    setState(initialState);
  };

  var handleClick = function handleClick(event) {
    event.preventDefault();
    setState({
      mouseX: event.clientX - 2,
      mouseY: event.clientY - 4
    });
  };

  var play = function play() {
    setIsPlaying(true);
    audioRef.current.play();
    var time = message.body.length * 1000;
    setTimeout(function () {
      setIsPlaying(false);
    }, time + 500);
  };

  var _customMessageClick = function _customMessageClick(val, option) {
    return function (e) {
      customMessageClick && customMessageClick(e, val, option);
      handleClose();
    };
  };

  var createThread = function createThread() {
    onCreateThread(message);
  };

  var sentStatus = function sentStatus() {
    return /*#__PURE__*/React.createElement("div", null, message.bySelf && !isThreadPanel && /*#__PURE__*/React.createElement(MessageStatus, {
      status: message.status,
      style: {
        marginRight: "-30px",
        marginTop: message.chatType === "singleChat" ? "0" : "22px"
      }
    }));
  };

  var showThreadEntry = showThread && !message.chatThreadOverview && !isThreadPanel && message.chatType === 'groupChat';
  var showThreaddInfo = showThread && !isThreadPanel && message.chatType === "groupChat" && message.chatThreadOverview && JSON.stringify(message.chatThreadOverview) !== '{}';
  var classes = useStyles({
    bySelf: message.bySelf,
    duration: Math.round(message.body.length),
    msgType: audioType,
    showThreaddInfo: showThreaddInfo,
    rnReactions: reactionMsg.length > 0,
    showThreadEntry: showThreadEntry
  });
  return /*#__PURE__*/React.createElement("li", {
    className: classes.pulldownListItem,
    onMouseOver: function onMouseOver() {
      return setHoverDeviceModule(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setHoverDeviceModule(false);
    }
  }, !message.bySelf && /*#__PURE__*/React.createElement(Avatar, {
    src: userAvatar(message.from),
    onClick: function onClick(e) {
      return onAvatarChange && onAvatarChange(e, message);
    }
  }), showByselfAvatar && message.bySelf && /*#__PURE__*/React.createElement(Avatar, {
    src: userAvatar(message.from)
  }), /*#__PURE__*/React.createElement("div", {
    className: classes.textBodyBox
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.messageBox
  }, /*#__PURE__*/React.createElement("span", {
    className: classes.userName
  }, message.from), audioType ? /*#__PURE__*/React.createElement("div", {
    className: classes.audioBox,
    onClick: play,
    onContextMenu: handleClick
  }, /*#__PURE__*/React.createElement(AudioPlayer, {
    play: isPlaying,
    reverse: message.bySelf
  }), /*#__PURE__*/React.createElement("span", {
    className: classes.duration
  }, Math.floor(message.body.length) + "''"), /*#__PURE__*/React.createElement("audio", {
    src: url,
    ref: audioRef
  })) : /*#__PURE__*/React.createElement("div", {
    style: {
      position: "relative",
      width: '100%',
      maxWidth: '320px'
    }
  }, /*#__PURE__*/React.createElement("video", {
    style: {
      width: "100%",
      borderRadius: "20px"
    },
    controls: true,
    src: message.url,
    onContextMenu: handleClick
  }))), showThreaddInfo ? /*#__PURE__*/React.createElement(MsgThreadInfo, {
    message: message
  }) : null, /*#__PURE__*/React.createElement("div", {
    className: classes.textReaction
  }, hoverDeviceModule ? /*#__PURE__*/React.createElement("div", {
    className: classes.textReactionCon
  }, isShowReaction && /*#__PURE__*/React.createElement(Reaction, {
    message: message
  }), showThreadEntry && /*#__PURE__*/React.createElement("div", {
    className: classes.threadCon,
    onClick: createThread
  }, /*#__PURE__*/React.createElement(Tooltip, {
    title: "Create Thread",
    placement: "top",
    classes: {
      tooltip: classes.tooltipthread
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.thread
  })))) : sentStatus()), reactionMsg.length > 0 && /*#__PURE__*/React.createElement("div", {
    className: classes.reactionBox
  }, /*#__PURE__*/React.createElement(RenderReactions, {
    message: message
  }))), /*#__PURE__*/React.createElement("div", {
    className: classes.time
  }, sessionItemTime(message.time)), customMessageList && /*#__PURE__*/React.createElement(Menu, {
    keepMounted: true,
    open: state.mouseY !== null,
    onClose: handleClose,
    anchorReference: "anchorPosition",
    anchorPosition: state.mouseY !== null && state.mouseX !== null ? {
      top: state.mouseY,
      left: state.mouseX
    } : undefined
  }, customMessageList.map(function (val, key) {
    return /*#__PURE__*/React.createElement(MenuItem, {
      key: key,
      onClick: _customMessageClick(val, message)
    }, val.name);
  })));
}

export default memo(AudioOrVideoMessage);