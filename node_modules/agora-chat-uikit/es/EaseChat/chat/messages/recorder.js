import React, { memo, useState, useEffect } from "react";
import SettingsVoiceIcon from "@material-ui/icons/SettingsVoice";
import StopIcon from "@material-ui/icons/Stop";
import { IconButton, Dialog } from "@material-ui/core";
import { makeStyles } from "@material-ui/styles";
import MessageActions from "../../../redux/message";
import { useDispatch, useSelector } from "react-redux";
import recording from "./recorder/recordAudio";
import WebIM from "../../../utils/WebIM";
import i18next from "i18next";
var useStyles = makeStyles(function (theme) {
  return {
    container: {
      width: "300px",
      overflowX: "hidden",
      padding: "10px",
      "& canvas": {
        width: "300px !important"
      }
    },
    start: {
      color: "#23C381",
      border: "1px solid"
    },
    stop: {
      color: "red",
      border: "1px solid"
    },
    tipText: {
      textAlign: 'center',
      color: '#727272',
      marginBottom: '20px'
    }
  };
});
var MediaStream;

function Recorder(_ref) {
  var open = _ref.open,
      onClose = _ref.onClose,
      isChatThread = _ref.isChatThread,
      threadName = _ref.threadName;
  var classes = useStyles();
  var dispatch = useDispatch();

  var _useState = useState(""),
      status = _useState[0],
      setStatus = _useState[1];

  var _useState2 = useState(60),
      num = _useState2[0],
      setNum = _useState2[1];

  var _useState3 = useState({}),
      recorderObj = _useState3[0],
      setRecorderObj = _useState3[1];

  var _useState4 = useState(""),
      timeInterval = _useState4[0],
      setTimeInterval = _useState4[1];

  var _useState5 = useState(""),
      startTime = _useState5[0],
      setStartTime = _useState5[1];

  var currentThreadInfo = useSelector(function (state) {
    var _state$thread;

    return (_state$thread = state.thread) === null || _state$thread === void 0 ? void 0 : _state$thread.currentThreadInfo;
  });
  var threadOriginalMsg = useSelector(function (state) {
    var _state$thread2;

    return (_state$thread2 = state.thread) === null || _state$thread2 === void 0 ? void 0 : _state$thread2.threadOriginalMsg;
  });
  var isCreatingThread = useSelector(function (state) {
    var _state$thread3;

    return (_state$thread3 = state.thread) === null || _state$thread3 === void 0 ? void 0 : _state$thread3.isCreatingThread;
  });
  var mounted;
  useEffect(function () {
    mounted = true;
    return function () {
      mounted = false;
      clearInterval(timeInterval);
    };
  }, []);
  var globalProps = useSelector(function (state) {
    return state.global.globalProps;
  });
  var to = globalProps.to,
      chatType = globalProps.chatType;

  var handleClose = function handleClose() {
    if (status === "recording") {
      setStatus("inactive");
    }

    onClose();
  };

  var clearTimer = function clearTimer() {
    if (timeInterval) {
      setNum(60);
      clearInterval(timeInterval);
    }
  }; // start recorder


  var mouseStart = function mouseStart(e) {
    e.preventDefault();
    e.stopPropagation();
    setStatus("recording");

    var _startTime = new Date().getTime();

    setStartTime(_startTime);
    clearTimer();
    recording.get(function (rec, val) {
      setRecorderObj(rec);
      console.log('recrecrecrecrec', rec, val.getTracks());
      MediaStream = val;

      if (rec) {
        var _interval = setInterval(function () {
          if (num <= 0 && mounted) {
            rec.stop();
            setNum(60);
            clearTimer();
          } else {
            var n = num - 1;
            setNum(n);
            rec.start();
          }
        }, 1000);

        setTimeInterval(_interval);
      }
    });
  }; // end recorder


  var mouseEnd = function mouseEnd(type) {
    return function (e) {
      e.preventDefault();
      e.stopPropagation();
      setStatus("inactive");
      clearTimer();

      var _endTime = new Date().getTime();

      var duration = (_endTime - startTime) / 1000;

      if (recorderObj) {
        console.log('recorderObj>>', recording);
        recorderObj.stop(); // 重置说话时间

        setNum(60); // 获取语音二进制文件

        var blob = recorderObj.getBlob(); // 发送语音功能

        if (type === "audio") {
          var uri = {
            url: WebIM.utils.parseDownloadResponse.call(WebIM.conn, blob),
            filename: "audio-message.wav",
            filetype: "audio",
            data: blob,
            length: duration,
            duration: duration
          };
          createChatThread().then(function (to) {
            dispatch(MessageActions.sendRecorder(to, chatType, uri, isChatThread));
          });
          onClose();
          MediaStream.getTracks()[0].stop();
        }
      }
    };
  };

  var createChatThread = function createChatThread() {
    return new Promise(function (resolve, reject) {
      if (isCreatingThread && isChatThread) {
        if (!threadName) {
          console.log('threadName can not empty');
          return;
        }

        var options = {
          name: threadName.replace(/(^\s*)|(\s*$)/g, ""),
          messageId: threadOriginalMsg.id,
          parentId: threadOriginalMsg.to
        };
        WebIM.conn.createChatThread(options).then(function (res) {
          var _res$data;

          var threadId = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.chatThreadId;
          resolve(threadId);
        });
      } else if (isChatThread) {
        resolve(currentThreadInfo.id);
      } else {
        resolve(to);
      }
    });
  };

  return /*#__PURE__*/React.createElement(Dialog, {
    onClose: handleClose,
    "aria-labelledby": "simple-dialog-title",
    open: open
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.container
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.tipText
  }, i18next.t("Click to start recording")), /*#__PURE__*/React.createElement("div", {
    style: {
      textAlign: "center"
    }
  }, status !== "recording" && /*#__PURE__*/React.createElement(IconButton, {
    className: classes.start,
    onClick: mouseStart
  }, /*#__PURE__*/React.createElement(SettingsVoiceIcon, null)), status === "recording" && /*#__PURE__*/React.createElement(IconButton, {
    className: classes.stop,
    onClick: mouseEnd("audio")
  }, /*#__PURE__*/React.createElement(StopIcon, null)))));
}

export default memo(Recorder);