import React, { memo, useContext } from 'react';
import { makeStyles } from "@material-ui/styles";
import i18next from "i18next";
import { useSelector, useDispatch } from "react-redux";
import ThreadActions from "../../../redux/thread";
import AppDB from "../../../utils/AppDB";
import { message as Alert } from '../../../EaseChat/common/alert';
import { EaseChatContext } from "../index";
var useStyles = makeStyles(function (theme) {
  return {
    pulldownListItem: {
      padding: '10px 0',
      listStyle: 'none',
      marginTop: '26px',
      position: 'relative',
      alignItems: 'center'
    },
    root: {
      width: '100%',
      textAlign: 'center',
      fontSize: '12px',
      color: '#999',
      fontWeight: '600',
      lineHeight: '20px'
    },
    name: {
      color: '#154DFE',
      cursor: 'pointer'
    }
  };
});

function ThreadNotify(_ref) {
  var message = _ref.message;
  var classes = useStyles();
  var dispatch = useDispatch();
  var threadList = useSelector(function (state) {
    var _state$thread;

    return (_state$thread = state.thread) === null || _state$thread === void 0 ? void 0 : _state$thread.threadList;
  }) || [];
  var easeChatProps = useContext(EaseChatContext);
  var onOpenThreadPanel = easeChatProps.onOpenThreadPanel;

  var joinThread = function joinThread() {
    //Whether you are in the thread. If not, call the interface added by SDK
    var hasJoined = threadList.find(function (item) {
      return item.id === message.threadId;
    });

    if (!hasJoined) {
      WebIM.conn.joinChatThread({
        chatThreadId: message.threadId
      }).then(function (res) {
        changeThreadStatus();
      })["catch"](function (e) {
        if (e.type === 1301) {
          changeThreadStatus();
        } else if (e.type === 1300) {
          Alert.warn(i18next.t('The thread has been disbanded'));
        }
      });
      return;
    }

    changeThreadStatus();
  }; //changes thread status after joing the thread


  var changeThreadStatus = function changeThreadStatus() {
    //change the status of creatingThread
    dispatch(ThreadActions.setIsCreatingThread(false)); //updtate currentThreadInfo

    WebIM.conn.getChatThreadDetail({
      chatThreadId: message.threadId
    }).then(function (res) {
      var _res$data;

      dispatch(ThreadActions.setCurrentThreadInfo(res.data)); //updatea setThreadOriginalMsg

      if ((_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.messageId) {
        AppDB.findLocalMessage('groupChat', res.data.messageId).then(function (res) {
          var msg = res.length === 1 ? res[0] : {};
          dispatch(ThreadActions.setThreadOriginalMsg(msg));
        });
      }

      onOpenThreadPanel && onOpenThreadPanel(res.data);
    }); //open threadPanel

    dispatch(ThreadActions.updateThreadStates(true));
  };

  return /*#__PURE__*/React.createElement("li", {
    className: classes.pulldownListItem
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, message.from, " ", i18next.t("Started a Thread"), ": ", message.name, ", ", /*#__PURE__*/React.createElement("span", {
    className: classes.name,
    onClick: joinThread
  }, i18next.t("Join the thread"))));
}

export default memo(ThreadNotify);