import React, { useContext, useState } from "react";
import { makeStyles } from "@material-ui/styles";
import List from "@material-ui/core/List";
import SearchIcon from '@material-ui/icons/Search';
import { IconButton, InputBase } from "@material-ui/core";
import Paper from "@material-ui/core/Paper";
import { useSelector } from "../../EaseApp/index";
import { EaseAppContext } from '../../EaseApp/index';
import _ from 'lodash';
import SessionItem from './sessionItem';
import groupIcon from "../../common/images/groupAvatar.png";
import chatRoomIcon from "../../common/images/chatroom@2x.jpg";
import noticeIcon from "../../common/images/notice@2x.png";
import avatarIcon1 from '../../common/images/avatar1.jpg';
import avatarIcon2 from '../../common/images/avatar2.jpg';
import avatarIcon3 from '../../common/images/avatar3.jpg';
import avatarIcon4 from '../../common/images/avatar4.jpg';
import avatarIcon5 from '../../common/images/avatar5.jpg';
import avatarIcon6 from '../../common/images/avatar6.jpg';
import avatarIcon7 from '../../common/images/avatar7.jpg';
import avatarIcon11 from '../../common/images/avatar11.jpg';
import searchgray from '../../common/images/searchgray.png';
import i18next from "i18next";
import HighlightOffIcon from '@material-ui/icons/HighlightOff';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      width: "100%",
      height: "100%",
      margin: '0 !important',
      padding: '0 8px !important',
      overflowY: 'auto',
      boxSizing: 'border-box',
      '& .MuiListItem-root.Mui-selected': {
        background: '#fff'
      },
      '& .MuiListItem-root.Mui-selected:hover': {
        background: '#fff'
      },
      '& .MuiListItem-button:hover': {
        background: 'rgb(242, 243, 245)'
      }
    },
    paper: {
      margin: '8px 8px 15px 8px',
      paddingRight: '20px',
      borderRadius: '25px',
      display: 'flex',
      boxShadow: 'none',
      position: 'relative',
      '& .MuiIconButton-root': {
        padding: '8px'
      }
    },
    inputBase: {
      width: '100%',
      paddingRight: '14px',
      height: '40px'
    },
    closeBtn: {
      position: 'absolute !important',
      right: '0px',
      top: '0px'
    },
    searchImgStyle: {
      width: '22px',
      height: '22px',
      margin: '10px 8px 0px 8px'
    }
  };
});
export default function SessionList(props) {
  var easeAppProps = useContext(EaseAppContext);
  var classes = useStyles();
  var sessionList = useSelector(function (state) {
    var _state$session;

    return (_state$session = state.session) === null || _state$session === void 0 ? void 0 : _state$session.sessionList;
  }) || [];
  var to = useSelector(function (state) {
    return state.global.globalProps.to;
  });
  var message = useSelector(function (state) {
    return state.message;
  });
  var unread = message.unread;
  var currentSession = useSelector(function (state) {
    var _state$session2;

    return (_state$session2 = state.session) === null || _state$session2 === void 0 ? void 0 : _state$session2.currentSession;
  });
  var currentSessionIndex = null;
  var joinedGroups = useSelector(function (state) {
    var _state$session3;

    return (_state$session3 = state.session) === null || _state$session3 === void 0 ? void 0 : _state$session3.joinedGroups;
  }); // dealwith notice unread num

  var notices = useSelector(function (state) {
    var _state$notice;

    return (_state$notice = state.notice) === null || _state$notice === void 0 ? void 0 : _state$notice.notices;
  }) || [];

  var _useState = useState([]),
      searchAry = _useState[0],
      setSearchAry = _useState[1];

  var newGroupName = useSelector(function (state) {
    return state.global.globalProps.name;
  });

  var _useState2 = useState(''),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var noticeUnreadNum = 0;
  /******** -session- ********/

  notices.forEach(function (item) {
    if (!item.disabled) {
      noticeUnreadNum++;
    }
  });
  var renderSessionList = sessionList.asMutable({
    deep: true
  }).map(function (session) {
    var _message$session$sess;

    /******* --sessionId replaces the group name-- *******/
    joinedGroups.length > 0 && joinedGroups.forEach(function (item) {
      if (item.groupid === session.sessionId) {
        session.name = newGroupName && newGroupName[session.sessionId] ? newGroupName[session.sessionId] : item.groupname;
      }
    });
    var chatMsgs = (message === null || message === void 0 ? void 0 : (_message$session$sess = message[session.sessionType]) === null || _message$session$sess === void 0 ? void 0 : _message$session$sess[session.sessionId]) || [];

    if (chatMsgs.length > 0) {
      var lastMessage = chatMsgs[chatMsgs.length - 1];
      var val = lastMessage.body || '';

      if (val && val.type === 'recall') {
        session.lastMessage = {
          time: lastMessage.time,
          body: {
            msg: lastMessage.chatType === 'singleChat' && lastMessage.bySelf ? i18next.t("you retracted a message") : "" + lastMessage.from + i18next.t("retracted a message")
          }
        };
      } else {
        session.lastMessage = lastMessage;
      }

      session.unreadNum = unread[session.sessionType][session.sessionId];
    }

    if (session.sessionType === "notice") {
      if (notices.length) {
        var msg;
        session.unreadNum = noticeUnreadNum;

        if (notices[notices.length - 1].type === "joinGroupNotifications") {
          msg = "Request to join the group:" + notices[notices.length - 1].gid;
        } else {
          var _notices;

          msg = (_notices = notices[notices.length - 1]) === null || _notices === void 0 ? void 0 : _notices.status;
        }

        session.lastMessage = {
          time: notices[notices.length - 1].id,
          body: {
            msg: msg
          }
        };
      }
    }

    return session;
  }).sort(function (a, b) {
    var _a$lastMessage, _b$lastMessage, _b$lastMessage2, _a$lastMessage2;

    if (!(a === null || a === void 0 ? void 0 : (_a$lastMessage = a.lastMessage) === null || _a$lastMessage === void 0 ? void 0 : _a$lastMessage.time)) return 1;
    if (!(b === null || b === void 0 ? void 0 : (_b$lastMessage = b.lastMessage) === null || _b$lastMessage === void 0 ? void 0 : _b$lastMessage.time)) return -1;
    return (b === null || b === void 0 ? void 0 : (_b$lastMessage2 = b.lastMessage) === null || _b$lastMessage2 === void 0 ? void 0 : _b$lastMessage2.time) - (a === null || a === void 0 ? void 0 : (_a$lastMessage2 = a.lastMessage) === null || _a$lastMessage2 === void 0 ? void 0 : _a$lastMessage2.time);
  });
  /******** -- ********/

  renderSessionList.forEach(function (element, index) {
    if (element.sessionId === currentSession) {
      currentSessionIndex = index;
    }
  });

  var handleListItemClick = function handleListItemClick(e, index, session) {
    e.preventDefault();
    e.stopPropagation();

    if (currentSessionIndex !== index || !to) {
      props.onClickItem(session);
    }
  };

  var searchSession = function searchSession(e) {
    setInputValue(e.target.value);
    var ary = [];

    if (e.target.value) {
      renderSessionList.map(function (val, key) {
        var isIncludeAry = val.sessionType === 'groupChat' ? val.name : val.sessionId;

        var isIncludeVal = _.includes(_.toLower(isIncludeAry), _.toLower(e.target.value));

        if (isIncludeVal) {
          ary.push(val);
        }

        setSearchAry(_.uniq(ary));
      });
    } else {
      setSearchAry([]);
    }
  };

  var userAvatars = {
    1: avatarIcon1,
    2: avatarIcon2,
    3: avatarIcon3,
    4: avatarIcon4,
    5: avatarIcon5,
    6: avatarIcon6,
    7: avatarIcon7
  };
  var renderSession = searchAry && searchAry.length > 0 ? searchAry : renderSessionList;

  var deleteSessionClick = function deleteSessionClick(v) {
    var newAry = _.filter(searchAry, function (o) {
      return v.sessionId !== o.sessionId;
    });

    setSearchAry(newAry);
  };

  var handleMouseDownPassword = function handleMouseDownPassword(event) {
    event.preventDefault();
  };

  var handleClickClearagoraId = function handleClickClearagoraId() {
    setInputValue('');
    setSearchAry([]);
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Paper, {
    component: "form",
    className: classes.paper,
    sx: {
      p: '2px 4px',
      display: 'flex',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement("img", {
    alt: "search",
    className: classes.searchImgStyle,
    src: searchgray
  }), /*#__PURE__*/React.createElement(InputBase, {
    className: classes.inputBase,
    sx: {
      ml: 1,
      flex: 2
    },
    placeholder: "Search",
    value: inputValue,
    onChange: searchSession
  }), inputValue && /*#__PURE__*/React.createElement(IconButton, {
    "aria-label": "toggle password visibility",
    onClick: handleClickClearagoraId,
    onMouseDown: handleMouseDownPassword,
    className: classes.closeBtn
  }, /*#__PURE__*/React.createElement(HighlightOffIcon, null))), /*#__PURE__*/React.createElement(List, {
    dense: true,
    className: classes.root
  }, renderSession.map(function (session, index) {
    var usersInfoData = localStorage.getItem("usersInfo_1.0");
    var avatarSrc = "";

    if (session.sessionType === "singleChat") {
      if (usersInfoData) {
        usersInfoData = JSON.parse(usersInfoData);
      }

      var findIndex = _.find(usersInfoData, {
        username: session.sessionId
      }) || '';
      avatarSrc = userAvatars[findIndex.userAvatar] || avatarIcon11;
    } else if (session.sessionType === "groupChat") {
      avatarSrc = groupIcon;
    } else if (session.sessionType === "chatRoom") {
      avatarSrc = chatRoomIcon;
    } else if (session.sessionType === "notice") {
      avatarSrc = noticeIcon;
    }

    return /*#__PURE__*/React.createElement(SessionItem, {
      key: index,
      currentVal: {
        session: session,
        index: index,
        currentSessionIndex: currentSessionIndex,
        avatarSrc: avatarSrc
      },
      handleListItemClick: handleListItemClick,
      deleteSessionClick: deleteSessionClick
    });
  })));
}