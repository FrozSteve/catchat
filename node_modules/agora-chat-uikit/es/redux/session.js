var _createReducer;

import { createReducer, createActions } from 'reduxsauce';
import Immutable from 'seamless-immutable';
import _ from 'lodash';
import AppDB from '../utils/AppDB';
import WebIM from '../utils/WebIM';
/* ------------- Types and Action Creators ------------- */

var _createActions = createActions({
  setSessionList: ['sessionList'],
  setCurrentSession: ['userId'],
  topSession: ['sessionId', 'sessionType', 'message'],
  deleteSession: ['sessionId'],
  pushSession: ['session'],
  setJoinedGroups: ["joinedGroups"],
  getSessionList: function getSessionList(userId) {
    return function (dispatch, getState) {
      AppDB.getSessionList(null, userId).then(function (res) {
        console.log('获取会话列表', res);
        dispatch(Creators.setSessionList(res));
      });
    };
  },
  getJoinedGroupList: function getJoinedGroupList() {
    return function (dispatch, getState) {
      WebIM.conn.getGroup().then(function (res) {
        console.log('res', res);
        var joinedGroups = res.data;
        dispatch(Creators.setJoinedGroups(joinedGroups));
      });
    };
  },
  _pushSession: function _pushSession(session) {
    return function (dispatch) {
      dispatch(Creators.pushSession(session));
    };
  }
}),
    Types = _createActions.Types,
    Creators = _createActions.Creators;

export default Creators;
export var INITIAL_STATE = Immutable({
  sessionList: [],
  currentSession: '',
  joinedGroups: []
});
/* ------------- Reducers ------------- */

export var setSessionList = function setSessionList(state, _ref) {
  var sessionList = _ref.sessionList;
  var stateSession = state.sessionList ? state.sessionList : [];

  var concatSession = _.concat(stateSession, sessionList);

  var newConcatSession = _.uniqBy(concatSession, 'sessionId');

  return state.merge({
    sessionList: newConcatSession
  });
};
export var setCurrentSession = function setCurrentSession(state, _ref2) {
  var userId = _ref2.userId;
  return state.merge({
    currentSession: userId
  });
};
export var setJoinedGroups = function setJoinedGroups(state, _ref3) {
  var joinedGroups = _ref3.joinedGroups;
  return state.merge({
    joinedGroups: joinedGroups
  });
};
export var topSession = function topSession(state, _ref4) {
  var sessionId = _ref4.sessionId,
      sessionType = _ref4.sessionType,
      message = _ref4.message;

  if ((message === null || message === void 0 ? void 0 : message.chatThread) && JSON.stringify(message.chatThread) !== '{}') {
    return state;
  }

  var sessionList = state.getIn(['sessionList'], Immutable([])).asMutable();
  var topSession = {
    sessionId: sessionId,
    sessionType: sessionType
  };
  sessionList.forEach(function (element, index) {
    if (sessionId === element.sessionId) {
      topSession = element;
      sessionList.splice(index, 1);
    }
  });
  sessionList.unshift(topSession);
  return state.merge({
    sessionList: sessionList
  });
};
export var deleteSession = function deleteSession(state, _ref5) {
  var sessionId = _ref5.sessionId;
  var sessionList = state.sessionList.asMutable();
  sessionList = sessionList.filter(function (item) {
    return item.sessionId !== sessionId;
  });
  state = state.setIn(['sessionList'], sessionList);
  state = state.setIn(['currentSession', '']);
  return state;
};
export var pushSession = function pushSession(state, _ref6) {
  var session = _ref6.session;
  var ary = state.sessionList.asMutable();

  var newSessionList = _.concat(ary, session);

  return state.setIn(['sessionList'], newSessionList);
};
/* ------------- Hookup Reducers To Types ------------- */

export var sessionReducer = createReducer(INITIAL_STATE, (_createReducer = {}, _createReducer[Types.SET_SESSION_LIST] = setSessionList, _createReducer[Types.SET_CURRENT_SESSION] = setCurrentSession, _createReducer[Types.TOP_SESSION] = topSession, _createReducer[Types.DELETE_SESSION] = deleteSession, _createReducer[Types.PUSH_SESSION] = pushSession, _createReducer[Types.SET_JOINED_GROUPS] = setJoinedGroups, _createReducer));