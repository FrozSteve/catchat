var _createReducer;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { createReducer, createActions } from "reduxsauce";
import Immutable from "seamless-immutable";
import _ from "lodash";

var _createActions = createActions({
  addGlobalProps: ["options"],
  updateGlobalProps: ["options"],
  updateShowTyping: ["options"],
  logout: [],
  saveGlobalProps: function saveGlobalProps(options) {
    return function (dispatch, getState) {
      dispatch(Creators.addGlobalProps(options));
    };
  },
  setGlobalProps: function setGlobalProps(options) {
    return function (dispatch) {
      dispatch(Creators.updateGlobalProps(options));
    };
  },
  setShowTyping: function setShowTyping(options) {
    return function (dispatch) {
      dispatch(Creators.updateShowTyping(options));
    };
  }
}),
    Types = _createActions.Types,
    Creators = _createActions.Creators;
/* ------------- Initial State ------------- */


export var INITIAL_STATE = Immutable({
  globalProps: {},
  showTyping: ''
});
/* ------------- Reducers ------------- */

export var addGlobalProps = function addGlobalProps(state, _ref) {
  var options = _ref.options;
  return Immutable.merge(state, {
    globalProps: _extends({}, options)
  });
};
export var logout = function logout(state) {
  if (state === void 0) {
    state = INITIAL_STATE;
  }

  return state.merge({
    username: null,
    password: null
  });
};
export var updateGlobalProps = function updateGlobalProps(state, _ref2) {
  var _state$globalProps$pr, _state$globalProps$na;

  var options = _ref2.options;
  var presenceObj = ((_state$globalProps$pr = state.globalProps.presenceExt) === null || _state$globalProps$pr === void 0 ? void 0 : _state$globalProps$pr.asMutable()) || {};
  var name = ((_state$globalProps$na = state.globalProps.name) === null || _state$globalProps$na === void 0 ? void 0 : _state$globalProps$na.asMutable()) || {};

  if (typeof options.name === 'object') {
    name = _extends({}, name, options.name);
  } else if (typeof options.name === 'string') {
    var _extends2;

    name = _extends({}, name, (_extends2 = {}, _extends2[options.to] = options.name, _extends2));
  }

  state = state.setIn(["globalProps", "to"], options.to);
  state = state.setIn(["globalProps", "chatType"], options.chatType);
  state = state.setIn(["globalProps", "name"], _extends({}, name));
  state = state.setIn(["globalProps", "showTyping"], options.showTyping);

  if (Object.keys(presenceObj).length) {
    for (var item in presenceObj) {
      for (var val in options.presenceExt) {
        if (item === val) {
          presenceObj[item] = _extends({}, presenceObj[item], options.presenceExt[val]);
        }

        if (!presenceObj[val]) {
          presenceObj[val] = options.presenceExt[val];
        }
      }
    }
  } else {
    presenceObj = options.presenceExt;
  }

  state = state.setIn(["globalProps", "presenceExt"], presenceObj);
  return state;
};
export var updateShowTyping = function updateShowTyping(state, _ref3) {
  var options = _ref3.options;
  state = state.setIn(["showTyping"], options.showTyping);
  return state;
};
/* ------------- Hookup Reducers To Types ------------- */

export var globalPropsReducer = createReducer(INITIAL_STATE, (_createReducer = {}, _createReducer[Types.ADD_GLOBAL_PROPS] = addGlobalProps, _createReducer[Types.UPDATE_GLOBAL_PROPS] = updateGlobalProps, _createReducer[Types.LOGOUT] = logout, _createReducer[Types.UPDATE_SHOW_TYPING] = updateShowTyping, _createReducer));
export default Creators;