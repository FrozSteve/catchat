var _AppDB;

import Dexie from 'dexie';
import _ from 'lodash';
import { message } from '../EaseChat/common/alert';
var DB_VERSION = '1';
var TABLE_NAME = 'IM_message';
var TABLE_INDEX_KEYS = ['id', 'from', 'to', 'chatType', 'isUnread', 'status', 'mid', 'session', 'chatThreadOverview'];
var DB_ENABLE = true;
var PAGE_NUM = 20;
var AppDB = (_AppDB = {
  // init db
  init: function init(username) {
    var _db$version$stores;

    if (this.db) {
      return;
    } // create a database, use username as db name


    var db = this.db = new Dexie(username); // create a table, use TABLE_NAME as table name

    db.version(DB_VERSION).stores((_db$version$stores = {}, _db$version$stores[TABLE_NAME] = TABLE_INDEX_KEYS.join(','), _db$version$stores));
    this.$_TABLE = db.table(TABLE_NAME);
  },
  exec: function exec(cb1, cb2) {
    return new Promise(function (resolve, reject) {
      if (DB_ENABLE) {
        cb1(resolve);
      } else {
        cb2 && cb2(reject);
      }
    });
  },
  // get unread messages
  getUnreadList: function getUnreadList() {
    var $_TABLE = this.$_TABLE;
    return this.exec(function (resolve) {
      $_TABLE.where('isUnread').equals(1).toArray().then(function (res) {
        return resolve(res);
      });
    });
  },
  // get lastest mumber of message by start index
  fetchMessage: function fetchMessage(userId, chatType, offset, limit) {
    if (chatType === void 0) {
      chatType = 'singleChat';
    }

    if (offset === void 0) {
      offset = 0;
    }

    if (limit === void 0) {
      limit = PAGE_NUM;
    }

    var $_TABLE = this.$_TABLE;
    return this.exec(function (resolve) {
      $_TABLE.where('chatType').equals(chatType).filter(function (item) {
        if (item.error) {
          return false;
        }

        if (chatType === 'singleChat') {
          return item.from === userId || item.to === userId;
        } else {
          return item.to === userId;
        }
      }).reverse().offset(offset).limit(limit).sortBy('time').then(function (res) {
        resolve(res.reverse());
      });
    });
  },
  findLocalMessage: function findLocalMessage(chatType, messageId) {
    var $_TABLE = this.$_TABLE;
    return this.exec(function (resolve) {
      $_TABLE.where('chatType').equals(chatType).filter(function (item) {
        return item.id === messageId;
      }).toArray().then(function (res) {
        resolve(res);
      });
    });
  },
  // read all messages of conversation
  readMessage: function readMessage(chatType, userId) {
    var $_TABLE = this.$_TABLE;
    var key = chatType === 'singleChat' ? 'from' : 'to';
    return this.exec(function (resolve) {
      var _$_TABLE$where;

      $_TABLE.where((_$_TABLE$where = {
        'chatType': chatType
      }, _$_TABLE$where[key] = userId, _$_TABLE$where['isUnread'] = 1, _$_TABLE$where)).modify({
        'isUnread': 0
      }).then(function (res) {
        resolve(res);
      });
    });
  },
  // update message status
  updateMessageStatus: function updateMessageStatus(id, serverId, status) {
    console.log(id, status, 'status');
    var $_TABLE = this.$_TABLE;
    return this.exec(function (resolve) {
      $_TABLE.filter(function (item) {
        return item.id === id || item.id === serverId;
      }).modify({
        'status': status
      }).then(function (res) {
        console.log(res, 'res');
        resolve(res);
      });
    });
  },
  deleteMessage: function deleteMessage(id) {
    var $_TABLE = this.$_TABLE;
    return this.exec(function (resolve) {
      $_TABLE.where('id').equals(id)["delete"]().then(function (res) {
        return resolve(res);
      });
    });
  },
  updateMessageMid: function updateMessageMid(mid, id) {
    var $_TABLE = this.$_TABLE;
    return this.exec(function (resolve) {
      $_TABLE.where("id").equals(id).modify({
        'id': mid
      }).then(function (res) {
        return console.log("res", res);
      });
    });
  },
  updateMessageUrl: function updateMessageUrl(id, url) {
    var $_TABLE = this.$_TABLE;
    return this.exec(function (resolve) {
      console.log(">>>>>msgUrl>>>", $_TABLE.where("id").equals(id).modify({
        url: url
      }));
      $_TABLE.where("id").equals(id).modify({
        url: url
      }).then(function (res) {
        return console.log("res", res);
      });
    });
  },
  updateMessageThread: function updateMessageThread(id, thread) {
    var $_TABLE = this.$_TABLE;
    return this.exec(function (resolve) {
      $_TABLE.where('chatType').equals('groupChat').filter(function (item) {
        return item.id === id;
      }).modify({
        'chatThreadOverview': thread
      }).then(function (res) {
        return console.log('res', res);
      }); // $_TABLE.where('id')
      //     .equals(id)
      //     .modify({ 'chatThreadOverview': thread })
      //     .then(res => console.log('res', res))
    });
  },
  updateMessageReaction: function updateMessageReaction(id, reaction) {
    var $_TABLE = this.$_TABLE;
    return this.exec(function (resolve) {
      $_TABLE.where("id").equals(id).modify({
        'reactions': reaction
      }).then(function (res) {
        return console.log("updateMessageReaction", res);
      });
    });
  },
  findMessageById: function findMessageById(id) {
    var $_TABLE = this.$_TABLE;
    return this.exec(function (resolve) {
      $_TABLE.where("id").equals(id).toArray().then(function (res) {
        return resolve(res);
      });
    });
  },
  // add a message to the database
  addMessage: function addMessage(message, isUnread) {
    if (isUnread === void 0) {
      isUnread = 0;
    }

    var $_TABLE = this.$_TABLE;
    if ($_TABLE === undefined) return;

    if (!message.error) {
      return this.exec(function (resolve) {
        $_TABLE.where("id").equals(message.id).count().then(function (res) {
          if (res === 0) {
            message.isUnread = isUnread;
            $_TABLE.add(message).then(function (res) {
              return resolve(res);
            })["catch"](function (e) {
              return console.log("add messaga:", e);
            });
          }
        });
      });
    }
  },
  // clear all messages of specified conversation
  clearMessage: function clearMessage(chatType, id) {
    var $_TABLE = this.$_TABLE;
    return this.exec(function (resolve) {
      $_TABLE.where("chatType").equals(chatType).filter(function (item) {
        if (chatType === "chat") {
          return item.from === id || item.to === id;
        } else {
          return item.to === id;
        }
      })["delete"]().then(function (res) {
        return resolve(res);
      });
    });
  }
}, _AppDB["clearMessage"] = function clearMessage(chatType, id) {
  var $_TABLE = this.$_TABLE;
  return this.exec(function (resolve) {
    $_TABLE.where('chatType').equals(chatType).filter(function (item) {
      if (chatType === 'singleChat') {
        return item.from === id || item.to === id;
      } else {
        return item.to === id;
      }
    })["delete"]().then(function (res) {
      return resolve(res);
    });
  });
}, _AppDB.deleteSession = function deleteSession(chatType, id) {
  var $_TABLE = this.$_TABLE;
  return this.exec(function (resolve) {
    $_TABLE.where('chatType').equals(chatType).where('session').equals(id)["delete"]().then(function (res) {
      return resolve(res);
    });
  });
}, _AppDB.getSessionList = function getSessionList(chatType, id) {
  var $_TABLE = this.$_TABLE;
  return this.exec(function (resolve) {
    $_TABLE.where('id').above(-1).sortBy('time').then(function (res) {
      var sessionList = [];
      var sessionObj = {};
      res.forEach(function (element) {
        if (element.chatType === 'singleChat' && !sessionObj[element.session]) {
          sessionObj[element.session] = true;
          sessionList.push({
            sessionId: element.session,
            sessionType: element.chatType
          });
        } else if (!sessionObj[element.to] && !element.isChatThread && element.to !== id) {
          sessionObj[element.to] = true;
          sessionList.push({
            sessionId: element.to,
            sessionType: element.chatType
          });
        }
      }); // let _sessionList =  _.uniqBy(sessionList,'sessionId')

      resolve(sessionList);
    });
  });
}, _AppDB["updateMessageReaction"] = function updateMessageReaction(id, reactions) {
  var _this = this;

  var $_TABLE = this.$_TABLE;
  return this.exec(function (resolve) {
    var $_TABLE = _this.$_TABLE;
    return _this.exec(function (resolve) {
      $_TABLE.where("id").equals(id).modify({
        reactions: reactions
      }).then(function (res) {
        console.log("updateMessageReaction", res);
      });
    });
  });
}, _AppDB.deleteReactions = function deleteReactions(id, reactions) {
  var $_TABLE = this.$_TABLE;
  return this.exec(function (resolve) {
    $_TABLE.where("id").equals(id).modify({
      reactions: reactions
    }).then(function (res) {
      console.log("deleteReactions", res);
    });
  });
}, _AppDB);
export default AppDB;