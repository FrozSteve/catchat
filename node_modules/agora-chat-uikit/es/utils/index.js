function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import moment from 'moment';
import WebIM from '../utils/WebIM';
import Cookie from 'js-cookie';
import qs from 'qs';
import _ from 'lodash';
import avatarIcon1 from '../common/images/avatar1.jpg';
import avatarIcon2 from '../common/images/avatar2.jpg';
import avatarIcon3 from '../common/images/avatar3.jpg';
import avatarIcon4 from '../common/images/avatar4.jpg';
import avatarIcon5 from '../common/images/avatar5.jpg';
import avatarIcon6 from '../common/images/avatar6.jpg';
import avatarIcon7 from '../common/images/avatar7.jpg';
import avatarIcon11 from '../common/images/avatar11.jpg';
export function renderTime(time, timeStyle) {
  if (!time) return '';
  var localStr = new Date(time);
  var localMoment = moment(localStr);
  var localFormat = timeStyle ? localMoment.format(timeStyle) : localMoment.format('MM-DD HH:mm');
  return localFormat;
} // 小于一分钟：1m ago
// 60分钟以内：XXm ago，忽略下一级单位，下同；
// 24小时以内：XXh ago；
// 本周之内：Xd ago；
// 本月之内：Xwk ago;
// 超过本月不满一年：Xmo ago
// 超过一年：Xyr ago
//Get time difference 

export function getTimeDiff(time) {
  if (!time) return '';
  var localTime = new Date();
  var MsgTime = new Date(time);
  var spanYear = localTime.getFullYear() - MsgTime.getFullYear();
  var spanMonth = localTime.getMonth() - MsgTime.getMonth();
  var spanDate = localTime.getDate() - MsgTime.getDate();
  var spanDay = localTime.getDay() - MsgTime.getDay();
  var spanWeek = 0;

  if (spanDate >= localTime.getDay()) {
    spanWeek = Math.ceil((spanDate + 1 - localTime.getDay()) / 7);
  }

  var spanHour = localTime.getHours() - MsgTime.getHours();
  var spanMinute = localTime.getMinutes() - MsgTime.getMinutes();

  if (spanYear !== 0) {
    return spanYear + "yr ago";
  } else if (spanMonth !== 0) {
    return spanMonth + "mo ago";
  } else if (spanWeek !== 0) {
    return spanWeek + "wk ago";
  } else if (spanDay !== 0) {
    return spanDay + "d ago";
  } else if (spanHour !== 0) {
    return spanHour + "h ago";
  } else if (spanMinute !== 0) {
    return spanMinute + "m ago";
  } else {
    return '1m ago';
  }
}

var _qs$parse = qs.parse(window.location.hash.split('?')[1]),
    username = _qs$parse.username;

(function (doc, win) {
  var docEl = doc.documentElement,
      resizeEvt = "orientationchange" in window ? "orientationchange" : "resize",
      recalc = function recalc() {// if (docEl.clientWidth > 750) {
    //     docEl.style.fontSize = "100px";
    // } else {
    //     var width = docEl.clientWidth / 7.5;
    //     docEl.style.fontSize = width + "px";
    // }
  };

  if (!doc.addEventListener) return;
  win.addEventListener(resizeEvt, recalc, false);
  doc.addEventListener("DOMContentLoaded", recalc, false);
})(document, window);

export function getToken() {
  return Cookie.get('web_im_' + username);
}
export function getUserName() {
  return username;
}
var msgTpl = {
  base: {
    error: false,
    errorCode: '',
    errorText: '',
    // if status is blank, it's treated as "sent" from server side
    status: 'sending',
    // [sending, sent ,fail, read]
    id: '',
    // from - room id need it,should not be deleted
    from: '',
    to: '',
    toJid: '',
    time: '',
    chatType: '',
    // chat / groupchat
    body: {},
    ext: {},
    bySelf: false
  },
  txt: {
    type: 'txt',
    msg: ''
  },
  img: {
    type: 'img',
    file_length: 0,
    filename: '',
    filetype: '',
    length: 0,
    secret: '',
    width: 0,
    height: 0,
    url: '',
    thumb: '',
    thumb_secret: ''
  },
  file: {
    type: 'file',
    file_length: 0,
    filename: '',
    filetype: '',
    length: 0,
    secret: '',
    width: 0,
    height: 0,
    url: '',
    thumb: '',
    thumb_secret: '',
    size: ''
  },
  video: {
    type: 'video',
    file_length: 0,
    filename: '',
    filetype: '',
    length: 0,
    secret: '',
    width: 0,
    height: 0,
    url: '',
    thumb: '',
    thumb_secret: ''
  },
  audio: {
    type: 'audio',
    file_length: 0,
    filename: '',
    filetype: '',
    length: 0,
    secret: '',
    width: 0,
    height: 0,
    url: '',
    thumb: '',
    thumb_secret: ''
  },
  custom: {
    type: 'custom',
    customEvent: '',
    customExts: {}
  },
  threadNotify: {
    type: 'threadNotify'
  },
  cmd: {
    type: 'cmd',
    action: ''
  }
};
export function formatLocalMessage(to, chatType, message, messageType, isChatThread) {
  if (message === void 0) {
    message = {};
  }

  var ext = message.ext || {};
  var formatMsg = Object.assign({}, msgTpl.base, message);
  var body = Object.assign({}, msgTpl[messageType], message);

  if (messageType === 'file' || messageType === 'img' || messageType === 'video') {
    var _message;

    body.size = (_message = message) === null || _message === void 0 ? void 0 : _message.data.size;
  }

  if (messageType === 'threadNotify' || messageType === 'notify') {
    formatMsg.id = WebIM.conn.getUniqueId();
  }

  return _extends({}, formatMsg, {
    // id: WebIM.conn.getUniqueId(),
    to: to,
    from: WebIM.conn.context.userId,
    chatType: chatType,
    session: to,
    isChatThread: isChatThread,
    body: _extends({}, body, ext)
  });
}
export function formatServerMessage(message, messageType) {
  if (message === void 0) {
    message = {};
  }

  var ext = message.ext || {};
  var formatMsg = Object.assign({}, msgTpl.base, message);
  var body = Object.assign({}, msgTpl[messageType], message);
  var chatType = message.chatType;

  if (messageType === 'txt') {
    body.msg = message.msg;
    body.type = 'txt';
  } else if (messageType === 'file') {
    body.type = 'file';
    body.size = body.file_length;
  } else if (messageType === 'img') {
    body.type = 'img';
  } else if (messageType === 'video') {
    body.type = 'video';
    body.size = body.file_length;
  }

  return _extends({}, formatMsg, {
    status: 'sent',
    chatType: chatType,
    session: message.from,
    body: _extends({}, body, ext, {
      chatType: chatType
    })
  });
}
export function getGroupName(str) {
  var _str$split = str.split("_#-#_"),
      name = _str$split[0],
      id = _str$split[1];

  return name;
}
export function getGroupId(str) {
  var _str$split2 = str.split("_#-#_"),
      name = _str$split2[0],
      id = _str$split2[1];

  return id;
}
export function sessionItemTime(time) {
  if (!time) return ''; // ['Fri', 'Jun', '10', '2022', '14:16:28', 'GMT+0800', '(中国标准时间)']
  //    0       1      2      3       4

  var localTimeList = new Date().toString().split(' ');
  var MsgTimeList = new Date(time).toString().split(' ');

  if (localTimeList[3] === MsgTimeList[3]) {
    if (localTimeList[1] === MsgTimeList[1]) {
      if (localTimeList[0] === MsgTimeList[0]) {
        if (localTimeList[2] === MsgTimeList[2]) {
          return MsgTimeList[4].substr(0, 5);
        }
      } else {
        if (Number(localTimeList[0]) - Number(MsgTimeList[0]) === 1) {
          return 'Yday';
        } else {
          return MsgTimeList[0];
        }
      }
    } else {
      return MsgTimeList[1];
    }
  } else {
    return MsgTimeList[1];
  }
}
var userAvatars = {
  1: avatarIcon1,
  2: avatarIcon2,
  3: avatarIcon3,
  4: avatarIcon4,
  5: avatarIcon5,
  6: avatarIcon6,
  7: avatarIcon7
};
export function userAvatar(id) {
  var adminInfo = JSON.parse(sessionStorage.getItem('webim_auth'));

  if (adminInfo && adminInfo.agoraId === id) {
    var adminAvatar = Number(localStorage.getItem('avatarIndex_1.0'));
    return userAvatars[adminAvatar + 1] || avatarIcon11;
  } else {
    var usersInfoData = localStorage.getItem("usersInfo_1.0");
    var avatarSrc = "";

    if (usersInfoData) {
      usersInfoData = JSON.parse(usersInfoData);
    }

    var findIndex = _.find(usersInfoData, {
      username: id
    }) || '';
    avatarSrc = userAvatars[findIndex.userAvatar] || avatarIcon11;
    return avatarSrc;
  }
}
export function getLocalStorageData() {
  return localStorage.getItem('soundPreviewText') ? JSON.parse(localStorage.getItem('soundPreviewText')) : {};
}