"use strict";

exports.__esModule = true;
exports.addLocalMessage = addLocalMessage;
exports["default"] = createlistener;

var _index = _interopRequireDefault(require("../redux/index"));

var _WebIM = _interopRequireDefault(require("../utils/WebIM"));

var _AppDB = _interopRequireDefault(require("../utils/AppDB"));

var _message3 = _interopRequireDefault(require("../redux/message"));

var _session = _interopRequireDefault(require("../redux/session"));

var _globalProps = _interopRequireDefault(require("../redux/globalProps"));

var _thread = _interopRequireDefault(require("../redux/thread"));

var _index2 = _interopRequireDefault(require("../EaseApp/index"));

var _index3 = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var conversationName = '';
var TimerId = null;

function addLocalMessage(obj) {
  console.log(obj, 'addLocalMessage');
  var to = obj.to,
      from = obj.from,
      chatType = obj.chatType,
      groupName = obj.groupName,
      createGroup = obj.createGroup,
      groupText = obj.groupText,
      firstCrate = obj.firstCrate,
      msgType = obj.msgType,
      addType = obj.addType;

  var session = _index["default"].getState().session;

  var sessionList = session.sessionList;
  var sessionId = chatType === 'singleChat' ? from : to;
  var found = sessionList.find(function (item) {
    return item.sessionId === sessionId;
  });
  var message = {
    chatType: chatType,
    ext: {},
    from: chatType === 'singleChat' ? to : from,
    id: _WebIM["default"].conn.getUniqueId(),
    msg: groupText,
    onlineState: 3,
    time: new Date().getTime(),
    to: chatType === 'singleChat' ? from : to,
    type: "groupNote"
  };

  if (!createGroup) {
    !found && _index["default"].dispatch(_session["default"]._pushSession({
      sessionType: chatType,
      sessionId: chatType === 'singleChat' ? from : to,
      sessionName: groupName || ''
    }));
  }

  if (firstCrate && !found) {
    if (addType === 'contactAdded') {
      var who = chatType === 'singleChat' ? from : to;
      var _message = {
        msg: groupText,
        type: "groupNote"
      };
      var formatMsg = (0, _index3.formatLocalMessage)(who, chatType, _message, msgType || 'txt', false);
      var msg = formatMsg.body.msg;
      var option = {
        chatType: chatType,
        type: msgType || 'txt',
        to: who,
        msg: msg,
        isChatThread: false
      };

      var msgObj = _WebIM["default"].message.create(option);

      formatMsg.id = msgObj.id;

      _index["default"].dispatch(_message3["default"].addMessage(formatMsg, msgType || "txt"));
    } else {
      _index["default"].dispatch(_message3["default"].addMessage(message, msgType || "txt"));
    }
  }
}

function createlistener(props) {
  _WebIM["default"].conn.addEventHandler("EaseChat", {
    onConnected: function onConnected(msg) {
      // init DB
      _AppDB["default"].init(_WebIM["default"].conn.context.userId); // get session list


      _index["default"].dispatch(_session["default"].getSessionList(_WebIM["default"].conn.context.userId));

      var options = {
        appKey: _WebIM["default"].conn.context.appKey,
        username: _WebIM["default"].conn.context.userId
      };

      _index["default"].dispatch(_session["default"].getJoinedGroupList());

      _index["default"].dispatch(_globalProps["default"].saveGlobalProps(options));

      props.successLoginCallback && props.successLoginCallback({
        isLogin: true
      });
    },
    onTextMessage: function onTextMessage(message) {
      console.log("onTextMessage", message);
      var chatType = message.chatType,
          from = message.from,
          to = message.to,
          ext = message.ext;
      var sessionId = chatType === "singleChat" ? from : to;

      if (ext.action === 'invite') {
        var id = _WebIM["default"].conn.getUniqueId();

        var _message2 = {
          id: id,
          status: 'sent',
          body: {
            type: 'custom',
            info: {
              type: ext.type,
              action: 'invite',
              duration: new Date().toString().slice(16, 21) + " " + new Date().toString().slice(4, 10)
            }
          },
          from: from,
          to: to,
          chatType: chatType
        };

        _index["default"].dispatch(_message3["default"].addMessage(_message2));
      } else {
        _index["default"].dispatch(_message3["default"].addMessage(message, "txt"));
      }

      _index["default"].dispatch(_session["default"].topSession(sessionId, chatType));
    },
    onFileMessage: function onFileMessage(message) {
      console.log("onFileMessage", message);

      _index["default"].dispatch(_message3["default"].addMessage(message, "file"));
    },
    onVideoMessage: function onVideoMessage(message) {
      console.log("onVideoMessage", message);

      _index["default"].dispatch(_message3["default"].addMessage(message, "video"));
    },
    onImageMessage: function onImageMessage(message) {
      console.log("onImageMessage", message);
      var chatType = message.chatType,
          from = message.from,
          to = message.to;
      var sessionId = chatType === "singleChat" ? from : to;

      _index["default"].dispatch(_message3["default"].addMessage(message, "img"));

      _index["default"].dispatch(_session["default"].topSession(sessionId, chatType));
    },
    onAudioMessage: function onAudioMessage(message) {
      console.log("onAudioMessage", message);
      var chatType = message.chatType,
          from = message.from,
          to = message.to;
      var sessionId = chatType === "singleChat" ? from : to;

      _index["default"].dispatch(_message3["default"].addAudioMessage(message, "audio"));
    },
    onRecallMessage: function onRecallMessage(message) {
      // When log in, have received the Recall message before get Message from db. so retract after 2 seconds
      if (!_index["default"].getState().message.byId[message.mid]) {
        setTimeout(function () {
          _index["default"].dispatch(_message3["default"].deleteMessage(message.mid, message.to, message.chatType));
        }, 2000);
        return;
      }

      _index["default"].dispatch(_message3["default"].deleteMessage(message.mid, message.to, message.chatType));
    },
    // The other has read the message
    onReadMessage: function onReadMessage(message) {
      console.log("onReadMessage", message);
      var mid = message.mid,
          id = message.id;

      _index["default"].dispatch(_message3["default"].updateMessageStatus(message, "read", id, mid));
    },
    onReceivedMessage: function onReceivedMessage(message) {
      console.log("updateMessageMid", message);
      var id = message.id,
          mid = message.mid,
          to = message.to;

      _index["default"].dispatch(_message3["default"].updateMessageMid(id, mid, to));
    },
    onDeliveredMessage: function onDeliveredMessage(message) {
      console.log("onDeliveredMessage", message);
      var mid = message.mid,
          id = message.id;

      _index["default"].dispatch(_message3["default"].updateMessageStatus(message, "received", id, mid));
    },
    onPresence: function onPresence(msg) {},
    onError: function onError(err) {
      console.log("error");
      console.error(err);
      props.failCallback && props.failCallback(err);
    },
    onClosed: function onClosed(msg) {
      console.warn("onClosed", msg);
    },
    onDisconnected: function onDisconnected() {
      _AppDB["default"].db = undefined;

      _index["default"].dispatch(_globalProps["default"].logout());
    },
    onGroupChange: function onGroupChange(event) {
      console.log("onGroupChange", event);
      var to = event.to,
          from = event.from,
          groupName = event.groupName,
          gid = event.gid;

      if (from === _WebIM["default"].conn.context.userId) {
        event.whoName = 'you';
      } else {
        event.whoName = '';
      }

      if (event.type === 'direct_joined') {
        _index["default"].dispatch(_session["default"].getJoinedGroupList());

        var storeSessionList = _index["default"].getState().session;

        var sessionList = storeSessionList.sessionList;

        var isNewSession = _.findIndex(sessionList, function (v) {
          return v.sessionId === gid;
        });

        if (isNewSession === -1) {
          addLocalMessage({
            to: gid,
            from: _WebIM["default"].conn.context.userId,
            chatType: 'groupChat',
            groupName: groupName,
            groupText: "You joined the group",
            firstCrate: true,
            msgType: 'notify'
          });
        }
      } else if (event.type === 'joinPublicGroupSuccess') {
        var joinedGroup = _index["default"].getState().session.joinedGroups;

        var result = joinedGroup.find(function (item) {
          item.groupid === event.gid;
        });

        if (!result) {
          _index["default"].dispatch(_session["default"].getJoinedGroupList());
        }
      } else if (event.type === 'invite') {
        conversationName = groupName;
      } else if (event.type === 'invite_accept') {
        var _storeSessionList = _index["default"].getState().session;

        var _sessionList = _storeSessionList.sessionList;

        var _isNewSession = _.findIndex(_sessionList, function (v) {
          return v.sessionId === gid;
        });

        if (_isNewSession === -1) {
          addLocalMessage({
            to: gid,
            from: _WebIM["default"].conn.context.userId,
            chatType: 'groupChat',
            groupName: conversationName,
            groupText: "You joined the group",
            firstCrate: true,
            msgType: 'notify'
          });
        }
      } else if (event.type === "memberJoinPublicGroupSuccess") {
        event.actionContent = 'joined the Group';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'deleteGroupChat') {
        //群组解散
        event.actionContent = 'dissolution the Group';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'join') {
        // 进群
        event.actionContent = 'join the Group';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'leave') {
        // 退群
        event.actionContent = 'leave the Group';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'removedFromGroup') {
        //被移出群 或者被加入黑名单
        event.actionContent = 'ware removed the Group';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'allow') {
        //被移除黑名单 当事人收到
        event.whoName = 'you';
        event.actionContent = 'ware removed the Block List';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'update') {
        // modifyGroup 修改群信息 触发
        event.actionContent = 'modify the Group Info';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'leaveGroup') {
        // ABSENCE （被移出群）
        event.actionContent = 'ware removed the Group';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'changeOwner') {
        //转让群组 当事的两个人收到
        event.actionContent = 'becomes the new Group Owner';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'addAdmin') {
        //成为管理员，当事人收到
        event.actionContent = 'becomes the new Group Admin';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'removeAdmin') {
        //去除管理员 当事人收到
        event.actionContent = 'ware removed the new Group Admin';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'addMute') {
        //用户被管理员禁言 当事人收到
        event.actionContent = 'ware muted';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'removeMute') {
        //用户被解除禁言 当事人收到
        event.actionContent = 'ware removed muted';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'updateAnnouncement') {
        // 更新群公告
        event.actionContent = 'update Group Announcement';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'addUserToGroupWhiteList') {
        //增加群/聊天室组白名单成员
        event.actionContent = 'were added to Group Allow List';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'rmUserFromGroupWhiteList') {
        //删除群/聊天室白名单成员
        event.actionContent = 'were removed the Group Allow List';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'muteGroup') {
        //群组/聊天室一键禁言
        event.actionContent = 'muted the Group';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      } else if (event.type === 'rmGroupMute') {
        //解除群组/聊天室一键禁言
        event.actionContent = 'removed muted the Group';

        _index["default"].dispatch(_message3["default"].addNotify(event, "groupChat"));
      }

      if (event.type === 'addAdmin' || event.type === 'removeAdmin' || event.type === 'changeOwner') {
        var _uikit_store$getState = _index["default"].getState().global.globalProps,
            chatType = _uikit_store$getState.chatType,
            _to = _uikit_store$getState.to;

        if (chatType === 'groupChat' && _to === event.gid) {
          _index["default"].dispatch(_thread["default"].getCurrentGroupRole({
            chatType: chatType,
            to: _to
          }));
        }
      }
    },
    onContactDeleted: function onContactDeleted(msg) {
      _index["default"].dispatch(_message3["default"].clearMessage("singleChat", msg.from));

      _index["default"].dispatch(_session["default"].deleteSession(msg.from));

      _index["default"].dispatch(_globalProps["default"].setGlobalProps({
        to: null
      }));
    },
    onReactionChange: function onReactionChange(message) {
      console.log("onReactionChange", message);

      _index["default"].dispatch(_message3["default"].updateReaction(message));
    },
    //thread notify
    onChatThreadChange: function onChatThreadChange(msg) {
      console.log("====thread change:", msg);

      _index["default"].dispatch(_thread["default"].updateThreadInfo(msg));
    },
    onMultiDeviceEvent: function onMultiDeviceEvent(msg) {
      console.log("====thread mutiDeviceEvent：", msg);

      _index["default"].dispatch(_thread["default"].updateMultiDeviceEvent(msg));
    },
    onReactionMessage: function onReactionMessage(message) {
      console.log("onReactionMessage", message);
    },
    onContactAgreed: function onContactAgreed(msg) {
      console.log("onContactAgreed", msg);
      var to = msg.to,
          from = msg.from;

      _index2["default"].addConversationItem({
        conversationType: 'singleChat',
        conversationId: from,
        ext: {
          from: {
            ext: 'Online'
          }
        },
        firstCrate: true,
        groupText: 'Your friend request has been approved',
        createGroup: false
      });
    },
    onContactAdded: function onContactAdded(msg) {
      console.log("onContactAdded", msg);
      var to = msg.to,
          from = msg.from;
      addLocalMessage({
        to: to,
        from: from,
        chatType: 'singleChat',
        groupText: 'You agreed the friend request',
        firstCrate: true,
        addType: 'contactAdded'
      });
    },
    onCmdMessage: function onCmdMessage(msg) {
      var action = msg.action;

      switch (action) {
        case 'TypingBegin':
          _index["default"].dispatch(_globalProps["default"].setShowTyping({
            showTyping: true
          }));

          break;

        case 'TypingEnd':
          _index["default"].dispatch(_globalProps["default"].setShowTyping({
            showTyping: false
          }));

          break;

        default:
          break;
      }

      if (TimerId) {
        clearTimeout(TimerId);
      }

      TimerId = setTimeout(function () {
        _index["default"].dispatch(_globalProps["default"].setShowTyping({
          showTyping: false
        }));
      }, 5000);
    }
  });
}