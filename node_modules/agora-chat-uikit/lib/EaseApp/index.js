"use strict";

exports.__esModule = true;
exports.useSelector = exports.useDispatch = exports["default"] = exports.EaseAppContext = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/styles");

var _Box = _interopRequireDefault(require("@material-ui/core/Box"));

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

var _reactRedux = require("react-redux");

var _WebIM = _interopRequireWildcard(require("../utils/WebIM"));

var _index = _interopRequireDefault(require("../redux/index"));

var _globalProps = _interopRequireDefault(require("../redux/globalProps"));

var _WebIMListen = _interopRequireWildcard(require("../utils/WebIMListen"));

var _message = _interopRequireDefault(require("../redux/message"));

var _session = _interopRequireDefault(require("../redux/session"));

var _thread = _interopRequireDefault(require("../redux/thread"));

var _lodash = _interopRequireDefault(require("lodash"));

require("../i18n");

require("../common/iconfont.css");

var _sessionList = _interopRequireDefault(require("../EaseChat/session/sessionList"));

var _index2 = _interopRequireDefault(require("../EaseChat/chat/index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var uikit_store = _react["default"].createContext();

var useDispatch = (0, _reactRedux.createDispatchHook)(uikit_store);
exports.useDispatch = useDispatch;
var useSelector = (0, _reactRedux.createSelectorHook)(uikit_store);
exports.useSelector = useSelector;
var EaseAppContext = (0, _react.createContext)();
exports.EaseAppContext = EaseAppContext;
var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      width: "100%",
      height: "100%",
      display: "flex"
    },
    grid: {
      backgroundColor: "rgb(237, 239, 242)",
      width: '360px'
    }
  };
});
var Item = (0, _styles.styled)(_Grid["default"])(function (_ref) {
  var theme = _ref.theme;
  return {};
});

var EaseApp = function EaseApp(props) {
  var dispatch = useDispatch(null);
  var classes = useStyles();
  var handleClickItem = (0, _react.useCallback)(function (session) {
    props.onConversationClick && props.onConversationClick(session);
    var sessionType = session.sessionType,
        sessionId = session.sessionId,
        name = session.name;

    if (!session.lastMessage) {
      dispatch(_message["default"].fetchMessage(sessionId, sessionType));
    }

    _WebIM["default"].conn.getPresenceStatus({
      usernames: [sessionId]
    }).then(function (res) {
      var _presenceExt;

      var extFlag = false;
      var device = '';
      var data = res.result[0].status;
      var dataExt = res.result[0];

      for (var item in data) {
        if (Number(data[item]) === 1) {
          extFlag = true;
          device = item.includes('webim') ? 'Web' : 'Mobile';
        }
      }

      if (!extFlag) {
        dataExt.ext = 'Offline';
      }

      if (!device) {
        device = Object.keys(data).length ? Object.keys(data)[0].includes('webim') ? 'Web' : 'Mobile' : '';
      }

      dispatch(_globalProps["default"].setGlobalProps({
        to: sessionId,
        chatType: sessionType,
        name: name,
        presenceExt: (_presenceExt = {}, _presenceExt[sessionId] = {
          ext: dataExt.ext,
          device: device
        }, _presenceExt)
      }));
    })["catch"](function (e) {
      console.log(e);
      dispatch(_globalProps["default"].setGlobalProps({
        to: sessionId,
        chatType: sessionType,
        name: name
      }));
    });

    dispatch(_session["default"].setCurrentSession(sessionId));
    dispatch(_message["default"].clearUnreadAsync(sessionType, sessionId));
    dispatch(_thread["default"].updateThreadStates(false));
    dispatch(_thread["default"].getCurrentGroupRole({
      sessionType: sessionType,
      sessionId: sessionId
    }));
  }, [props.width]);
  return /*#__PURE__*/_react["default"].createElement(_Box["default"], {
    sx: {
      flexGrow: 1
    }
  }, /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      display: "flex",
      position: "absolute",
      width: "100%",
      height: "calc(100%)"
    }
  }, /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
    item: true,
    className: classes.grid
  }, /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      height: "100%",
      overflowY: "auto",
      display: "flex",
      flexDirection: "column",
      width: '360px'
    }
  }, /*#__PURE__*/_react["default"].createElement("div", null, props.header), /*#__PURE__*/_react["default"].createElement(EaseAppContext.Provider, {
    value: props
  }, /*#__PURE__*/_react["default"].createElement(_sessionList["default"], {
    onClickItem: handleClickItem
  })))), /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
    style: {
      width: '100%',
      minWidth: '788px'
    }
  }, /*#__PURE__*/_react["default"].createElement(_index2["default"], props))));
};

var EaseAppProvider = function EaseAppProvider(props) {
  return /*#__PURE__*/_react["default"].createElement(_reactRedux.Provider, {
    context: uikit_store,
    store: _index["default"]
  }, /*#__PURE__*/_react["default"].createElement(_react["default"].StrictMode, null, /*#__PURE__*/_react["default"].createElement(EaseApp, props)));
};

var _default = EaseAppProvider;
exports["default"] = _default;

EaseAppProvider.addConversationItem = function (session) {
  if (session && Object.keys(session).length > 0) {
    var _presenceExt2;

    var conversationType = session.conversationType,
        conversationId = session.conversationId,
        conversationName = session.conversationName,
        ext = session.ext,
        firstCrate = session.firstCrate,
        groupText = session.groupText,
        createGroup = session.createGroup;
    var dispatch = _index["default"].dispatch;

    var storeSessionList = _index["default"].getState().session;

    var sessionList = storeSessionList.sessionList;

    var isNewSession = _lodash["default"].findIndex(sessionList, function (v) {
      return v.sessionId === session.conversationId;
    });

    if (isNewSession === -1) {
      dispatch(_session["default"]._pushSession({
        sessionType: session.conversationType,
        sessionId: session.conversationId,
        sessionName: session.conversationName
      }));
      (0, _WebIMListen.addLocalMessage)({
        to: conversationId,
        from: _WebIM["default"].conn.context.userId,
        chatType: conversationType,
        groupName: conversationName,
        createGroup: createGroup || true,
        groupText: groupText || "You have created a group",
        firstCrate: firstCrate,
        msgType: conversationType === 'groupChat' ? 'notify' : ''
      });
    }

    dispatch(_session["default"].setCurrentSession(conversationId));
    dispatch(_session["default"].topSession(conversationId, conversationType));
    dispatch(_globalProps["default"].setGlobalProps({
      to: conversationId,
      chatType: conversationType,
      name: conversationName,
      presenceExt: (_presenceExt2 = {}, _presenceExt2[conversationId] = ext, _presenceExt2)
    }));
    dispatch(_message["default"].clearUnreadAsync(conversationType, conversationId));
    dispatch(_thread["default"].updateThreadStates(false));
    dispatch(_thread["default"].getCurrentGroupRole({
      sessionType: conversationType,
      sessionId: conversationId
    }));
  }
};

EaseAppProvider.changePresenceStatus = function (ext) {
  var dispatch = _index["default"].dispatch,
      getState = _index["default"].getState;
  dispatch(_globalProps["default"].setGlobalProps(_extends({}, getState().global.globalProps, {
    presenceExt: ext
  })));
};

EaseAppProvider.getSdk = function (props) {
  if (!_WebIM["default"].conn) {
    (0, _WebIM.initIMSDK)(props.appkey);
    (0, _WebIMListen["default"])(props);
  }

  return _WebIM["default"];
};

EaseAppProvider.thread = {
  //是否支持thread功能 默认：否

  /**
   * 
   * @param {boolean} status: thread服务可用状态
   */
  setShowThread: function setShowThread(status) {
    _index["default"].dispatch(_thread["default"].setShowThread(status));
  },
  //是否有thread编辑面板，默认：否

  /**
   * 
   * @param {boolean} status 
   */
  setHasThreadEditPanel: function setHasThreadEditPanel(status) {
    _index["default"].dispatch(_thread["default"].setHasThreadEditPanel(status));
  },
  //关闭thread面板

  /**
   * @param {boolean} status 
   */
  closeThreadPanel: function closeThreadPanel() {
    _index["default"].dispatch(_thread["default"].updateThreadStates(false));
  }
};

EaseAppProvider.deleteSessionAndMessage = function (session) {
  var dispatch = _index["default"].dispatch;
  dispatch(_message["default"].clearMessage(session.sessionType, session.sessionId));
  dispatch(_session["default"].deleteSession(session.sessionId));
  dispatch(_globalProps["default"].setGlobalProps({
    to: null
  }));
};

EaseAppProvider.propTypes = process.env.NODE_ENV !== "production" ? {
  username: _propTypes["default"].string,
  agoraToken: _propTypes["default"].string,
  password: _propTypes["default"].string,
  appkey: _propTypes["default"].string,
  // custom header component
  header: _propTypes["default"].node,
  // addConversationItem: PropTypes.func,
  // show unread message count in conversation list
  isShowUnread: _propTypes["default"].bool,
  // true: unread count; false: red dot
  unreadType: _propTypes["default"].bool,
  // callback of click conversation item
  onConversationClick: _propTypes["default"].func,
  // Whether to show my own avatar in message item
  showByselfAvatar: _propTypes["default"].bool,
  // sendBox support all， noAudio， noEmoji， noAudioAndEmoji， onlyText
  easeInputMenu: _propTypes["default"].string,
  // sendBox more menu options: image file video
  menuList: _propTypes["default"].array,
  // callback of click sendBox more menu item
  handleMenuItem: _propTypes["default"].func,
  // callback of click chat component message bar avatar
  onChatAvatarClick: _propTypes["default"].func,
  // Whether to show reaction
  isShowReaction: _propTypes["default"].bool,
  // message operation menu options
  customMessageList: _propTypes["default"].array,
  // callback of click message operation menu options item
  customMessageClick: _propTypes["default"].func,
  //thread-click edit panel,get thread info
  onEditThreadPanel: _propTypes["default"].func,
  onOpenThreadPanel: _propTypes["default"].func,
  agoraUid: _propTypes["default"].string,
  getRTCToken: _propTypes["default"].func,
  isShowRTC: _propTypes["default"].bool,
  getIdMap: _propTypes["default"].func,
  appId: _propTypes["default"].string,
  deleteSessionAndMessage: _propTypes["default"].func
} : {};
EaseAppProvider.defaultProps = {
  isShowUnread: true,
  unreadType: true
};