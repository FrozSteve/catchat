"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _dialog = _interopRequireDefault(require("./dialog"));

var _index = require("../../../EaseApp/index");

var _react = _interopRequireWildcard(require("react"));

var _i18next = _interopRequireDefault(require("i18next"));

var _core = require("@material-ui/core");

var _styles = require("@material-ui/core/styles");

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _lodash = _interopRequireDefault(require("lodash"));

var _search2x = _interopRequireDefault(require("../../../common/images/search@2x.png"));

var _delete2x = _interopRequireDefault(require("../../../common/images/delete@2x.png"));

var _FormControlLabel = _interopRequireDefault(require("@material-ui/core/FormControlLabel"));

var _WebIM = _interopRequireDefault(require("../../../utils/WebIM"));

var _alert = require("../../common/alert");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      width: '650px',
      height: '480px'
    },
    listBox: {
      height: '410px',
      overflowY: 'auto'
    },
    container: {
      display: 'flex',
      minHeight: '410px'
    },
    btnBox: {
      height: '70px',
      lineHeight: '70px',
      textAlign: 'right',
      padding: '0 23px'
    },
    gMemberAvatar: {
      width: '36px',
      height: '36px',
      borderRadius: '20px',
      backgroundColor: '#FF9F4D'
    },
    searchBox: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      height: '30px'
    },
    contactsItem: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      height: '50px'
    },
    memberBox: {
      width: '50%',
      background: '#EDEFF2',
      padding: '10px'
    }
  };
});

var InviteModal = function InviteModal(props) {
  var _WebIM$conn, _WebIM$conn$context;

  var open = props.open,
      onClose = props.onClose,
      onCall = props.onCall,
      members = props.members,
      joinedMembers = props.joinedMembers;
  var classes = useStyles();
  var username = (_WebIM$conn = _WebIM["default"].conn) === null || _WebIM$conn === void 0 ? void 0 : (_WebIM$conn$context = _WebIM$conn.context) === null || _WebIM$conn$context === void 0 ? void 0 : _WebIM$conn$context.userId;
  var contacts = members.length > 0 ? members.map(function (item) {
    return {
      id: item.member || item.owner
    };
  }) : [];
  contacts = contacts.filter(function (item) {
    if (username == item.id) {
      return false;
    } else {
      return true;
    }
  });
  console.log('joinedMembers', joinedMembers);
  joinedMembers && joinedMembers.forEach(function (item) {
    var user = contacts.find(function (el) {
      if (el.id === item.imUserId) {
        return true;
      }
    });

    if (user) {
      user.checked = true;
      user.disabled = true;
    }
  });
  var groupById = (0, _index.useSelector)(function (state) {
    var _state$group;

    return (_state$group = state.group) === null || _state$group === void 0 ? void 0 : _state$group.group.byId;
  }) || {};

  var _useState = (0, _react.useState)(''),
      searchValue = _useState[0],
      setSearchValue = _useState[1];

  var _useState2 = (0, _react.useState)([]),
      groupMembers = _useState2[0],
      setGroupMembers = _useState2[1];

  var _useState3 = (0, _react.useState)(contacts),
      contactsObjs = _useState3[0],
      setContactsObjs = _useState3[1];

  console.log('contactsObjs', contactsObjs);
  (0, _react.useEffect)(function () {
    setContactsObjs(contacts);
  }, [members]); // search value

  var searchChangeValue = function searchChangeValue(e) {
    setSearchValue(e.target.value);
  }; // click search


  var handleSearchValue = function handleSearchValue() {
    console.log(searchValue);

    if (searchValue === '') {
      contacts.forEach(function (user) {
        if (groupMembers.includes(user.id)) {
          user.checked = true;
        } else {
          user.checked = false;
        }
      });
      setContactsObjs(contacts);
      return;
    }

    var searched = contactsObjs.filter(function (item) {
      if (item.id.includes(searchValue)) {
        return item;
      }
    });
    setContactsObjs(searched);
  };

  var handleSelect = function handleSelect(val) {
    return function (e) {
      console.log('e.target.checked', e.target);

      if (e.target.checked) {
        var joinedNum = joinedMembers ? joinedMembers.length : 0;

        if (joinedNum > 0 && groupMembers.length + joinedNum >= 3) {
          _alert.message.error('There can only be 16 people in the channel');

          return;
        }

        if (joinedNum === 0 && groupMembers.length + 1 >= 3) {
          _alert.message.error('There can only be 16 people in the channel');

          return;
        }

        var newSelected = [].concat(groupMembers);
        newSelected.push(val);
        console.log('groupMembers', [].concat(newSelected));
        setGroupMembers(newSelected);
        var newContactsObjs = [].concat(contactsObjs);
        newContactsObjs.forEach(function (value) {
          if (value.id === val) {
            value.checked = true;
          }
        });
        setContactsObjs(newContactsObjs);
      } else if (!e.target.checked) {
        var _newSelected = [].concat(groupMembers);

        var groupMembersPull = _lodash["default"].pull(_newSelected, val);

        setGroupMembers(groupMembersPull);

        var _newContactsObjs = [].concat(contactsObjs);

        _newContactsObjs.forEach(function (value) {
          if (value.id === val) {
            value.checked = false;
          }
        });

        setContactsObjs(_newContactsObjs);
      }
    };
  };

  var deleteGroupMember = function deleteGroupMember(val) {
    return function () {
      var newGroupAry = _lodash["default"].pull(groupMembers, val);

      setGroupMembers(newGroupAry);
      contactsObjs.forEach(function (value) {
        if (value.id === val) {
          value.checked = false;
        }
      });
      setContactsObjs([].concat(contactsObjs));
    };
  };

  var startCall = function startCall() {
    onCall(groupMembers);
    setGroupMembers([]);
    setContactsObjs([]);
    setSearchValue([]);
  };

  var onCloseModal = function onCloseModal() {
    setGroupMembers([]);
    setContactsObjs([]);
    setSearchValue([]);
    onClose();
  };

  var renderMember = function renderMember() {
    return /*#__PURE__*/_react["default"].createElement(_core.Box, {
      className: classes.root
    }, /*#__PURE__*/_react["default"].createElement(_core.Box, {
      className: classes.listBox
    }, /*#__PURE__*/_react["default"].createElement(_core.Box, {
      className: classes.container
    }, /*#__PURE__*/_react["default"].createElement(_core.Box, {
      style: {
        width: '50%',
        background: '#F5F7FA',
        padding: '10px'
      }
    }, /*#__PURE__*/_react["default"].createElement(_core.Box, {
      className: classes.searchBox
    }, /*#__PURE__*/_react["default"].createElement(_core.InputBase, {
      type: "search",
      placeholder: _i18next["default"].t('Group Members'),
      style: {
        width: '100%',
        padding: '5px'
      },
      onChange: searchChangeValue
    }), /*#__PURE__*/_react["default"].createElement("img", {
      src: _search2x["default"],
      alt: "",
      style: {
        width: '32px',
        cursor: 'pointer'
      },
      onClick: handleSearchValue
    })), /*#__PURE__*/_react["default"].createElement(_core.List, null, contactsObjs.length > 0 && contactsObjs.map(function (item, key) {
      return /*#__PURE__*/_react["default"].createElement(_core.ListItem, {
        key: key,
        onClick: handleSelect(item.id),
        className: classes.contactsItem
      }, /*#__PURE__*/_react["default"].createElement(_core.Box, {
        style: {
          display: 'flex',
          alignItems: 'center'
        }
      }, /*#__PURE__*/_react["default"].createElement(_core.Box, {
        className: classes.gMemberAvatar
      }), /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
        style: {
          marginLeft: '10px'
        }
      }, item.id)), /*#__PURE__*/_react["default"].createElement(_FormControlLabel["default"], {
        disabled: item.disabled,
        control: /*#__PURE__*/_react["default"].createElement(_core.Checkbox, {
          checked: !!item.checked
        })
      }));
    }))), /*#__PURE__*/_react["default"].createElement(_core.Box, {
      className: classes.memberBox
    }, /*#__PURE__*/_react["default"].createElement(_Typography["default"], null, _i18next["default"].t('Selected') + "(" + groupMembers.length + ")"), /*#__PURE__*/_react["default"].createElement(_core.List, null, groupMembers.length > 0 && groupMembers.map(function (item, key) {
      return /*#__PURE__*/_react["default"].createElement(_core.ListItem, {
        key: key,
        className: classes.contactsItem
      }, /*#__PURE__*/_react["default"].createElement(_core.Box, {
        style: {
          display: 'flex',
          alignItems: 'center'
        }
      }, /*#__PURE__*/_react["default"].createElement(_core.Box, {
        className: classes.gMemberAvatar
      }), /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
        style: {
          marginLeft: '10px'
        }
      }, item)), /*#__PURE__*/_react["default"].createElement("img", {
        src: _delete2x["default"],
        alt: "",
        style: {
          width: '20px',
          cursor: 'pointer'
        },
        onClick: deleteGroupMember(item)
      }));
    }))))), /*#__PURE__*/_react["default"].createElement(_core.Box, {
      className: classes.btnBox
    }, /*#__PURE__*/_react["default"].createElement(_core.Button, {
      style: {
        textTransform: "none"
      },
      variant: "contained",
      color: "primary",
      onClick: startCall,
      disabled: groupMembers.length == 0
    }, "Call")));
  };

  return /*#__PURE__*/_react["default"].createElement(_dialog["default"], {
    open: !!open,
    onClose: onCloseModal,
    title: _i18next["default"].t('Call for Gromp Members'),
    content: renderMember(),
    maxWidth: 880
  });
};

var _default = InviteModal;
exports["default"] = _default;
module.exports = exports.default;