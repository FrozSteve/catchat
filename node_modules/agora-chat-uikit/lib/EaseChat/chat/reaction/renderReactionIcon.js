"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/styles");

var _reactionEmoji = require("../../../common/reactionEmoji");

var _core = require("@material-ui/core");

var _Popover = _interopRequireDefault(require("@material-ui/core/Popover"));

var _WebIM = _interopRequireDefault(require("../../../utils/WebIM"));

var _index = _interopRequireDefault(require("../../../redux/index"));

var _message = _interopRequireDefault(require("../../../redux/message"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      width: "390px",
      height: "288px",
      maxHeight: "500px",
      borderRadius: "12px"
    },
    text: {
      fontFamily: "SF Compact Text",
      fontSize: "12px",
      fontStyle: "normal",
      fontWeight: "400",
      lineHeight: "20px",
      letterSpacing: "0px",
      textAlign: "left",
      color: "#999999",
      padding: "3px 8px"
    },
    emojiStyle: {
      height: "26px",
      width: "26px"
    },
    emojiItem: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      margin: "0 3px"
    },
    btnStyle: {
      width: "34px",
      height: "34px",
      minHeight: "0",
      minWidth: "0",
      borderRadius: "16px" // background:

    },
    clickStyle: {
      width: "34px",
      height: "34px",
      minHeight: "0",
      minWidth: "0",
      borderRadius: "16px",
      background: "#E6E6E6"
    },
    emojiBox: {
      width: function width(props) {
        return props.width + "px";
      },
      height: function height(props) {
        return props.height + "px";
      },
      display: "flex",
      flexWrap: "wrap",
      padding: "8px"
    },
    defaultEmojiBox: {
      width: function width(props) {
        return props.width + "px";
      },
      display: "flex",
      flexWrap: "wrap",
      padding: "8px"
    }
  };
});

var ReactionIcon = function ReactionIcon(_ref) {
  var anchorEl = _ref.anchorEl,
      onClose = _ref.onClose,
      onSelected = _ref.onSelected,
      message = _ref.message;
  var classes = useStyles();
  var reactionMsg = message.reactions || [];
  var currentLoginId = _WebIM["default"].conn.context.userId || "";
  var newStatus = {};

  var isStatus = function isStatus(v) {
    reactionMsg.length > 0 && reactionMsg.forEach(function (val) {
      var _reactionEmoji$map$re;

      var reaction = val.reaction,
          userList = val.userList,
          isAddedBySelf = val.isAddedBySelf;

      if (((_reactionEmoji$map$re = _reactionEmoji.reactionEmoji.map[reaction]) === null || _reactionEmoji$map$re === void 0 ? void 0 : _reactionEmoji$map$re.includes(v)) && userList.includes(currentLoginId)) {
        newStatus[v] = isAddedBySelf;
      }
    });
    return newStatus[v];
  };

  var renderReactions = function renderReactions(type) {
    var renderType = type === "default";
    return Object.keys((renderType ? _reactionEmoji.defaultReactions : _reactionEmoji.reactionEmoji).map).map(function (k, i) {
      var v = _reactionEmoji.reactionEmoji.map[k];

      var emojiSrc = require("../../../common/reactions/" + v)["default"];

      return /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.emojiItem,
        key: i,
        onClick: isStatus(v) ? handleDelete : handleEmojiClick
      }, /*#__PURE__*/_react["default"].createElement(_core.Button, {
        key: k,
        className: isStatus(v) ? classes.clickStyle : classes.btnStyle
      }, /*#__PURE__*/_react["default"].createElement("img", {
        src: emojiSrc,
        alt: k,
        className: classes.emojiStyle
      })));
    });
  };

  var handleEmojiClick = function handleEmojiClick(e) {
    var emoji = e.target.alt || e.target.children[0].alt;
    onSelected(emoji);
    onClose();
  };

  var handleDelete = function handleDelete(e) {
    var emoji = e.target.alt || e.target.children[0].alt;

    _index["default"].dispatch(_message["default"].deleteReaction(message, emoji));

    onClose();
  };

  return /*#__PURE__*/_react["default"].createElement(_Popover["default"], {
    keepMounted: true,
    open: Boolean(anchorEl),
    onClose: onClose,
    anchorEl: anchorEl,
    anchorOrigin: {
      vertical: "bottom",
      horizontal: "left"
    },
    transformOrigin: {
      vertical: "top",
      horizontal: "left"
    }
  }, /*#__PURE__*/_react["default"].createElement(_core.Box, {
    className: classes.root
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.text
  }, "Frequently"), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.defaultEmojiBox // onClick={handleEmojiClick}

  }, renderReactions("default")), /*#__PURE__*/_react["default"].createElement("hr", null), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.text
  }, "All Emojis"), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.emojiBox
  }, renderReactions("all"))));
};

var _default = (0, _react.memo)(ReactionIcon);

exports["default"] = _default;
module.exports = exports.default;