"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/styles");

var _core = require("@material-ui/core");

var _avatar = _interopRequireDefault(require("../../../common/icons/avatar1.jpg"));

var _i18next = _interopRequireDefault(require("i18next"));

var _utils = require("../../../utils");

var _index = require("../index");

var _reaction = _interopRequireDefault(require("../reaction"));

var _renderReaction = _interopRequireDefault(require("../reaction/renderReaction"));

var _thread = _interopRequireDefault(require("../../../common/images/thread.png"));

var _msgThreadInfo = _interopRequireDefault(require("./msgThreadInfo"));

var _messageStatus = _interopRequireDefault(require("./messageStatus"));

var _giphy = _interopRequireDefault(require("../../../common/images/giphy.gif"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  var _textBodyBox;

  return {
    pulldownListItem: {
      padding: "10px 0",
      listStyle: "none",
      marginTop: "26px",
      position: "relative",
      display: "flex",
      flexDirection: function flexDirection(props) {
        return props.bySelf ? "row-reverse" : "row";
      },
      alignItems: "flex-end"
    },
    userName: {
      padding: "0 10px 4px",
      color: "#8797A4",
      fontSize: "14px",
      display: function display(props) {
        return props.chatType !== "singleChat" && !props.bySelf ? "inline-block" : "none";
      },
      textAlign: function textAlign(props) {
        return props.bySelf ? "right" : "left";
      }
    },
    textBodyBox: (_textBodyBox = {
      display: "flex",
      flexDirection: function flexDirection(props) {
        return props.bySelf ? "inherit" : "column";
      },
      maxWidth: "80%"
    }, _textBodyBox["maxWidth"] = "40%", _textBodyBox.marginLeft = "10px", _textBodyBox.alignItems = function alignItems(props) {
      return props.bySelf ? "inherit" : "unset";
    }, _textBodyBox.background = function background(props) {
      return props.showThreaddInfo ? "#f2f2f2" : '';
    }, _textBodyBox.padding = function padding(props) {
      return props.showThreaddInfo ? "12px" : '0';
    }, _textBodyBox.borderRadius = function borderRadius(props) {
      return props.bySelf ? "16px 16px 4px 16px" : "16px 16px 16px 4px";
    }, _textBodyBox),
    imgBox: {
      "& img": {
        maxWidth: "100%",
        borderRadius: function borderRadius(props) {
          return props.showThreaddInfo && props.bySelf ? "8px 8px 4px 8px" : props.showThreaddInfo && !props.bySelf ? "8px 8px 8px 4px" : props.bySelf ? "16px 16px 4px 16px" : "16px 16px 16px 4px";
        }
      },
      position: "relative"
    },
    time: {
      position: "absolute",
      fontSize: "11px",
      height: "16px",
      color: "rgba(1, 1, 1, .2)",
      lineHeight: "20px",
      textAlign: "center",
      top: "-18px",
      width: "100%"
    },
    textReaction: {
      position: "absolute",
      right: function right(props) {
        return !props.bySelf && props.showThreaddInfo ? "-12px" : !props.showThreaddInfo && !props.bySelf ? "0" : "";
      },
      bottom: "6px",
      transform: function transform(props) {
        return props.bySelf ? "translateX(-100%)" : "translateX(100%)";
      },
      marginLeft: function marginLeft(props) {
        return props.bySelf ? "-10px" : "";
      },
      height: '24px',
      left: function left(props) {
        return props.bySelf ? "8px" : "";
      }
    },
    textReactionCon: {
      width: function width(props) {
        return props.showThreadEntry ? "48px" : "24px";
      },
      height: '100%',
      "float": function float(props) {
        return props.bySelf ? 'right' : 'left';
      }
    },
    reactionBox: {
      position: "absolute",
      top: function top(props) {
        return props.bySelf ? "-15px" : "-10px";
      },
      right: function right(props) {
        return props.bySelf ? "0px" : "";
      },
      left: function left(props) {
        return props.bySelf ? "" : "0px";
      },
      background: "#F2F2F2",
      borderRadius: "17.5px",
      padding: "3px",
      border: "solid 2px #FFFFFF",
      boxShadow: "0 10px 10px 0 rgb(0 0 0 / 30%)"
    },
    threadCon: {
      "float": function float(props) {
        return props.bySelf ? 'left' : 'right';
      },
      height: '24px',
      width: '24px',
      borderRadius: '50%',
      '&:hover': {
        background: '#E6E6E6'
      }
    },
    thread: {
      marginTop: '5px',
      marginLeft: '4px',
      width: '16px',
      height: '15px',
      background: "url(" + _thread["default"] + ") center center no-repeat",
      backgroundSize: 'contain',
      cursor: 'pointer'
    },
    tooltipthread: {
      background: '#fff',
      color: 'rgba(0, 0, 0, 0.87)',
      boxShadow: '6px 6px 12px rgba(0, 0, 0, 0.12), -2px 0px 8px rgba(0, 0, 0, 0.08)'
    }
  };
});
var initialState = {
  mouseX: null,
  mouseY: null
};

function ImgMessage(_ref) {
  var message = _ref.message,
      onRecallMessage = _ref.onRecallMessage,
      showByselfAvatar = _ref.showByselfAvatar,
      onCreateThread = _ref.onCreateThread,
      isThreadPanel = _ref.isThreadPanel,
      showThread = _ref.showThread;
  var easeChatProps = (0, _react.useContext)(_index.EaseChatContext);
  var onAvatarChange = easeChatProps.onAvatarChange,
      isShowReaction = easeChatProps.isShowReaction,
      customMessageClick = easeChatProps.customMessageClick,
      customMessageList = easeChatProps.customMessageList;
  var showThreadEntry = showThread && !message.chatThreadOverview && !isThreadPanel && message.chatType === 'groupChat';
  var showThreaddInfo = showThread && !isThreadPanel && message.chatType === "groupChat" && message.chatThreadOverview && JSON.stringify(message.chatThreadOverview) !== '{}';
  var classes = useStyles({
    bySelf: message.bySelf,
    showThreaddInfo: showThreaddInfo,
    showThreadEntry: showThreadEntry
  });

  var _useState = (0, _react.useState)(initialState),
      state = _useState[0],
      setState = _useState[1];

  var _useState2 = (0, _react.useState)(false),
      hoverDeviceModule = _useState2[0],
      setHoverDeviceModule = _useState2[1];

  var reactionMsg = (message === null || message === void 0 ? void 0 : message.reactions) || [];

  var _useState3 = (0, _react.useState)(false),
      openDialog = _useState3[0],
      setOpenDialog = _useState3[1];

  var _useState4 = (0, _react.useState)(false),
      bigImgUrl = _useState4[0],
      setBigImgUrl = _useState4[1];

  var _useState5 = (0, _react.useState)(true),
      loadingFlag = _useState5[0],
      setLoadingFlag = _useState5[1];

  var handleClose = function handleClose() {
    setState(initialState);
  };

  var recallMessage = function recallMessage() {
    onRecallMessage(message);
    handleClose();
  };

  var handleClick = function handleClick(event) {
    event.preventDefault();
    setState({
      mouseX: event.clientX - 2,
      mouseY: event.clientY - 4
    });
  };

  var _customMessageClick = function _customMessageClick(val, option) {
    return function (e) {
      customMessageClick && customMessageClick(e, val, option);
      handleClose();
    };
  };

  var createThread = function createThread() {
    onCreateThread(message);
  };

  var sentStatus = function sentStatus() {
    return /*#__PURE__*/_react["default"].createElement("div", null, message.bySelf && !isThreadPanel && /*#__PURE__*/_react["default"].createElement(_messageStatus["default"], {
      status: message.status,
      style: {
        marginRight: "-30px",
        marginTop: message.chatType === "singleChat" ? "0" : "22px"
      }
    }));
  };

  var openBigImg = function openBigImg(url) {
    setOpenDialog(true); // setBigImgUrl(url)

    canvasDataURL(url, {
      quality: 0.2
    });
    setLoadingFlag(true);
  };

  function canvasDataURL(path, obj, callback) {
    var img = new Image();
    img.src = path;
    img.setAttribute("crossOrigin", 'Anonymous');

    img.onload = function () {
      var that = this; // 默认按比例压缩

      var w = that.width,
          h = that.height,
          scale = w / h;
      w = obj.width || w;
      h = obj.height || w / scale;
      var quality = 0.7; // 默认图片质量为0.7
      //生成canvas

      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext('2d'); // 创建属性节点

      var anw = document.createAttribute("width");
      anw.nodeValue = w;
      var anh = document.createAttribute("height");
      anh.nodeValue = h;
      canvas.setAttributeNode(anw);
      canvas.setAttributeNode(anh);
      ctx.drawImage(that, 0, 0, w, h); // 图像质量

      if (obj.quality && obj.quality <= 1 && obj.quality > 0) {
        quality = obj.quality;
      } // quality值越小，所绘制出的图像越模糊


      var base64 = canvas.toDataURL('image/jpeg', quality);
      setBigImgUrl(base64);
      setLoadingFlag(false); // 回调函数返回base64的值
      // callback(base64);
    };
  }

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("li", {
    className: classes.pulldownListItem,
    onMouseOver: function onMouseOver() {
      return setHoverDeviceModule(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setHoverDeviceModule(false);
    }
  }, !message.bySelf && /*#__PURE__*/_react["default"].createElement(_core.Avatar, {
    src: (0, _utils.userAvatar)(message.from),
    onClick: function onClick(e) {
      return onAvatarChange && onAvatarChange(e, message);
    }
  }), showByselfAvatar && message.bySelf && /*#__PURE__*/_react["default"].createElement(_core.Avatar, {
    src: (0, _utils.userAvatar)(message.from)
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.textBodyBox
  }, /*#__PURE__*/_react["default"].createElement("span", {
    className: classes.userName
  }, message.from), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.imgBox,
    onContextMenu: handleClick
  }, /*#__PURE__*/_react["default"].createElement("img", {
    src: message.thumb || (message.url.includes('blob') ? message.url : message.url + '?thumbnail=true'),
    alt: "img message",
    onClick: function onClick() {
      return openBigImg(message.url);
    }
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.textReaction
  }, hoverDeviceModule ? /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.textReactionCon
  }, isShowReaction && /*#__PURE__*/_react["default"].createElement(_reaction["default"], {
    message: message
  }), showThreadEntry && /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.threadCon,
    onClick: createThread
  }, /*#__PURE__*/_react["default"].createElement(_core.Tooltip, {
    title: "Create Thread",
    placement: "top",
    classes: {
      tooltip: classes.tooltipthread
    }
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.thread
  })))) : sentStatus()), showThreaddInfo ? /*#__PURE__*/_react["default"].createElement(_msgThreadInfo["default"], {
    message: message
  }) : null, reactionMsg.length > 0 && /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.reactionBox
  }, /*#__PURE__*/_react["default"].createElement(_renderReaction["default"], {
    message: message
  })))), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.time
  }, (0, _utils.sessionItemTime)(message.time)), /*#__PURE__*/_react["default"].createElement(_core.Menu, {
    keepMounted: true,
    open: state.mouseY !== null,
    onClose: handleClose,
    anchorReference: "anchorPosition",
    anchorPosition: state.mouseY !== null && state.mouseX !== null ? {
      top: state.mouseY,
      left: state.mouseX
    } : undefined
  }, message.bySelf && /*#__PURE__*/_react["default"].createElement(_core.MenuItem, {
    onClick: recallMessage
  }, _i18next["default"].t("Withdraw")), customMessageList && customMessageList.map(function (val, key) {
    var bySelf = message.bySelf;
    var show = false;

    if (val.position === 'others') {}

    switch (val.position) {
      case 'others':
        show = bySelf ? false : true;
        break;

      case 'self':
        show = bySelf ? true : false;
        break;

      default:
        show = true;
        break;
    }

    return show ? /*#__PURE__*/_react["default"].createElement(_core.MenuItem, {
      key: key,
      onClick: _customMessageClick(val, message)
    }, val.name) : null;
  }))), /*#__PURE__*/_react["default"].createElement(_core.Dialog, {
    open: openDialog,
    onClose: function onClose() {
      return setOpenDialog(false);
    }
  }, /*#__PURE__*/_react["default"].createElement("div", null, loadingFlag ? /*#__PURE__*/_react["default"].createElement("img", {
    style: {
      width: '40px'
    },
    src: _giphy["default"],
    alt: "loading"
  }) : /*#__PURE__*/_react["default"].createElement("img", {
    style: {
      width: '100%',
      verticalAlign: 'middle'
    },
    src: bigImgUrl,
    alt: "big image"
  }))));
}

var _default = (0, _react.memo)(ImgMessage);

exports["default"] = _default;
module.exports = exports.default;