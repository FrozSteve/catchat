"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/styles");

var _i18next = _interopRequireDefault(require("i18next"));

var _reactRedux = require("react-redux");

var _thread = _interopRequireDefault(require("../../../redux/thread"));

var _AppDB = _interopRequireDefault(require("../../../utils/AppDB"));

var _alert = require("../../../EaseChat/common/alert");

var _index = require("../index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    pulldownListItem: {
      padding: '10px 0',
      listStyle: 'none',
      marginTop: '26px',
      position: 'relative',
      alignItems: 'center'
    },
    root: {
      width: '100%',
      textAlign: 'center',
      fontSize: '12px',
      color: '#999',
      fontWeight: '600',
      lineHeight: '20px'
    },
    name: {
      color: '#154DFE',
      cursor: 'pointer'
    }
  };
});

function ThreadNotify(_ref) {
  var message = _ref.message;
  var classes = useStyles();
  var dispatch = (0, _reactRedux.useDispatch)();
  var threadList = (0, _reactRedux.useSelector)(function (state) {
    var _state$thread;

    return (_state$thread = state.thread) === null || _state$thread === void 0 ? void 0 : _state$thread.threadList;
  }) || [];
  var easeChatProps = (0, _react.useContext)(_index.EaseChatContext);
  var onOpenThreadPanel = easeChatProps.onOpenThreadPanel;

  var joinThread = function joinThread() {
    //Whether you are in the thread. If not, call the interface added by SDK
    var hasJoined = threadList.find(function (item) {
      return item.id === message.threadId;
    });

    if (!hasJoined) {
      WebIM.conn.joinChatThread({
        chatThreadId: message.threadId
      }).then(function (res) {
        changeThreadStatus();
      })["catch"](function (e) {
        if (e.type === 1301) {
          changeThreadStatus();
        } else if (e.type === 1300) {
          _alert.message.warn(_i18next["default"].t('The thread has been disbanded'));
        }
      });
      return;
    }

    changeThreadStatus();
  }; //changes thread status after joing the thread


  var changeThreadStatus = function changeThreadStatus() {
    //change the status of creatingThread
    dispatch(_thread["default"].setIsCreatingThread(false)); //updtate currentThreadInfo

    WebIM.conn.getChatThreadDetail({
      chatThreadId: message.threadId
    }).then(function (res) {
      var _res$data;

      dispatch(_thread["default"].setCurrentThreadInfo(res.data)); //updatea setThreadOriginalMsg

      if ((_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.messageId) {
        _AppDB["default"].findLocalMessage('groupChat', res.data.messageId).then(function (res) {
          var msg = res.length === 1 ? res[0] : {};
          dispatch(_thread["default"].setThreadOriginalMsg(msg));
        });
      }

      onOpenThreadPanel && onOpenThreadPanel(res.data);
    }); //open threadPanel

    dispatch(_thread["default"].updateThreadStates(true));
  };

  return /*#__PURE__*/_react["default"].createElement("li", {
    className: classes.pulldownListItem
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.root
  }, message.from, " ", _i18next["default"].t("Started a Thread"), ": ", message.name, ", ", /*#__PURE__*/_react["default"].createElement("span", {
    className: classes.name,
    onClick: joinThread
  }, _i18next["default"].t("Join the thread"))));
}

var _default = (0, _react.memo)(ThreadNotify);

exports["default"] = _default;
module.exports = exports.default;