"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/styles");

var _i18next = _interopRequireDefault(require("i18next"));

var _utils = require("../../../utils");

var _video_dark2x = _interopRequireDefault(require("../../../common/images/video_dark@2x.png"));

var _video_white2x = _interopRequireDefault(require("../../../common/images/video_white@2x.png"));

var _audio_dark2x = _interopRequireDefault(require("../../../common/images/audio_dark@2x.png"));

var _audio_white2x = _interopRequireDefault(require("../../../common/images/audio_white@2x.png"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  var _text;

  return {
    messageBox: {
      listStyle: 'none',
      marginTop: '26px',
      position: 'relative',
      alignItems: 'center',
      display: 'flex',
      width: '100%',
      height: '90px',
      flexDirection: function flexDirection(props) {
        return props.bySelf ? "row-reverse" : "row";
      }
    },
    text: (_text = {
      textAlign: 'center',
      color: 'rgba(1, 1, 0, 0.3)',
      fontSize: '12px',
      marginBottom: '26px',
      width: '229px'
    }, _text["color"] = 'rgba(1, 1, 0, 0.3)', _text["fontSize"] = '12px', _text["textAlign"] = 'center', _text.background = '#F2F2F2', _text.flexDirection = 'row', _text.height = '70px', _text.display = 'flex', _text.alignItems = 'center', _text.justifyContent = 'space-between', _text.padding = '10px', _text.boxSizing = 'border-box', _text.borderRadius = function borderRadius(props) {
      return props.bySelf ? "15px 15px 5px 15px" : "15px 15px 15px 5px";
    }, _text),
    textBox: {
      display: 'flex',
      flexDirection: 'column',
      height: '100%',
      justifyContent: 'space-between',
      paddingLeft: '2px',
      '& span:nth-child(1)': {
        fontSize: '16px',
        color: '#000',
        textAlign: 'left',
        lineHeight: '22px'
      },
      '& span:nth-child(2)': {
        fontSize: '14px',
        color: '#666666',
        textAlign: 'left',
        lineHeight: '18px'
      }
    },
    iconBox: {
      width: '50px',
      height: '50px',
      background: function background(props) {
        return props.ended ? '#fff' : '#00CE76';
      },
      borderRadius: '8px',
      '& img': {
        width: '100%'
      }
    },
    time: {
      position: 'absolute',
      fontSize: '11px',
      height: '16px',
      color: 'rgba(1, 1, 1, .2)',
      lineHeight: '16px',
      textAlign: 'center',
      top: '-18px',
      width: '100%'
    }
  };
});

function CustomMessage(_ref) {
  var message = _ref.message;
  console.log('message', message);
  var info = message.body.info || {};
  var icon = '';
  var ended = true;

  switch (info.type) {
    case 0:
    case 3:
      icon = _audio_dark2x["default"];
      break;

    case 1:
    case 2:
      icon = _video_dark2x["default"];
      break;

    default:
      break;
  }

  if (info.action === 'invite') {
    if (info.type === 2) {
      icon = _video_white2x["default"];
    } else {
      icon = _audio_white2x["default"];
    }

    ended = false;
  }

  var callType = info.type == 0 || info.type == 3 ? 'Audio Call' : 'Video Call';
  var classes = useStyles({
    bySelf: message.bySelf,
    ended: ended
  });
  var title = ended ? 'Call ended' : "" + callType;
  return /*#__PURE__*/_react["default"].createElement("li", {
    className: classes.messageBox
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.text
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.textBox
  }, /*#__PURE__*/_react["default"].createElement("span", null, title), /*#__PURE__*/_react["default"].createElement("span", null, info.duration || '00:00')), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.iconBox
  }, /*#__PURE__*/_react["default"].createElement("img", {
    src: icon,
    alt: ""
  }))), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.time
  }, (0, _utils.renderTime)(message.time)));
}

var _default = (0, _react.memo)(CustomMessage);

exports["default"] = _default;
module.exports = exports.default;