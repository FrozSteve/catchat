"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/styles");

var _core = require("@material-ui/core");

var _thread = _interopRequireDefault(require("../../../common/images/thread.png"));

var _open = _interopRequireDefault(require("../../../common/images/open.png"));

var _index = require("../../../EaseApp/index");

var _thread2 = _interopRequireDefault(require("../../../redux/thread"));

var _message = _interopRequireDefault(require("../../../redux/message"));

var _index2 = require("../../../utils/index");

var _WebIM = _interopRequireDefault(require("../../../utils/WebIM"));

var _avatar = _interopRequireDefault(require("../../../common/icons/avatar1.jpg"));

var _i18next = _interopRequireDefault(require("i18next"));

var _emoji = require("../../../common/emoji");

var _AppDB = _interopRequireDefault(require("../../../utils/AppDB"));

var _alert = require("../../../EaseChat/common/alert");

var _index3 = require("../index");

var _utils = require("../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  var _container;

  return {
    root: {
      position: 'relative',
      minWidth: "134px",
      marginTop: "5px",
      width: '100%',
      height: "85px",
      display: "flex"
    },
    container: (_container = {
      position: 'absolute',
      bottom: '0',
      display: 'flex',
      flexDirection: 'column',
      marginTop: '8px',
      padding: '0px 10px',
      width: '100%',
      height: "80px"
    }, _container["display"] = "flex", _container.background = '#fff', _container.borderRadius = '5px', _container.boxSizing = 'border-box', _container),
    triangle: {
      display: 'block',
      position: 'absolute',
      left: '13px',
      top: '-8px',
      height: '0',
      width: '0',
      borderLeft: '8px solid transparent',
      borderRight: '8px solid transparent',
      borderBottom: '8px solid #fff'
    },
    threadTop: {
      display: 'flex',
      marginTop: '4px',
      height: '20px',
      lineHeight: '20px',
      width: '100%'
    },
    threadIcon: {
      flex: '0 0 20px',
      marginTop: '3px',
      height: '13px',
      background: "url(" + _thread["default"] + ") 2px center no-repeat",
      backgroundSize: 'contain'
    },
    threadName: {
      flex: '1 1 auto',
      fontWeight: '700',
      fontSize: '14px',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      color: '#000',
      textAlign: 'left'
    },
    messageCount: {
      flex: '0 0 42px',
      textAlign: 'right',
      fontWeight: '500',
      color: '#154DFE'
    },
    threadBottom: {
      marginTop: '9px',
      width: '100%',
      height: '35px',
      overflow: 'hidden',
      textAlign: 'left'
    },
    threadInfo: {
      display: 'flex',
      height: '16px',
      lineHeight: '16px',
      width: '100%'
    },
    messageInfo: {
      marginTop: '3px',
      display: 'inline-block',
      paddingLeft: '20px',
      height: '16px',
      lineHeight: '16px',
      color: '#4d4d4d',
      fontSize: '12px',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      width: '100%',
      boxSizing: 'border-box'
    },
    threadAva: {
      flex: '0 0 16px',
      textAlign: 'center',
      lineHeight: '16px'
    },
    threadAvaIcon: {
      display: 'inline-block',
      marginTop: '2px',
      height: '14px',
      width: '14px',
      borderRadius: '50%'
    },
    threadMsg: {
      marginLeft: '4px',
      fontSize: '14px',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      color: '#000',
      width: 'calc(100% - 70px)',
      fontWeight: '500'
    },
    time: {
      color: '#999',
      fontSize: '12px',
      flex: '0 0 50px',
      textAlign: 'right'
    },
    threadOwner: {
      color: '#000'
    },
    lastMessage: {
      color: '#666'
    },
    defaultMessage: {
      fontSize: '12px',
      lineHeight: '16px',
      marginTop: '8px',
      color: '#4d4d4d',
      textAlign: 'left'
    },
    count: {
      marginRight: '4px'
    },
    openImg: {
      width: '8px',
      height: '12px',
      objectFit: 'contain'
    }
  };
});

var MsgThreadInfo = function MsgThreadInfo(props) {
  var chatThreadOverview = props.message.chatThreadOverview;
  var easeChatProps = (0, _react.useContext)(_index3.EaseChatContext);
  var onOpenThreadPanel = easeChatProps.onOpenThreadPanel;
  var dispatch = (0, _index.useDispatch)();
  var classes = useStyles();

  var renderMessage = function renderMessage(message) {
    switch (message.type) {
      case 'txt':
        return renderTxt(message.msg);

      case 'file':
        return "[" + _i18next["default"].t('File') + "]";

      case 'img':
        return "[" + _i18next["default"].t('Image') + "]";

      case 'audio':
        return "[" + _i18next["default"].t('Audio') + "]";

      case 'video':
        return "[" + _i18next["default"].t('Video') + "]";

      default:
        return '';
    }
  };

  var renderTxt = function renderTxt(txt) {
    if (txt === undefined) {
      return [];
    }

    var rnTxt = [];
    var match = null;
    var regex = /(\[.*?\])/g;
    var start = 0;
    var index = 0;

    while (match = regex.exec(txt)) {
      index = match.index;

      if (index > start) {
        rnTxt.push(txt.substring(start, index));
      }

      if (match[1] in _emoji.emoji.map) {
        var v = _emoji.emoji.map[match[1]];
        rnTxt.push( /*#__PURE__*/_react["default"].createElement("img", {
          key: v + Math.floor(Math.random() * 99 + 1),
          alt: v,
          src: require("../../../common/reactions/" + v)["default"],
          width: 20,
          height: 20,
          style: {
            verticalAlign: 'middle'
          }
        }));
      } else {
        rnTxt.push(match[1]);
      }

      start = index + match[1].length;
    }

    rnTxt.push(txt.substring(start, txt.length));
    return rnTxt;
  };

  var threadList = (0, _index.useSelector)(function (state) {
    var _state$thread;

    return (_state$thread = state.thread) === null || _state$thread === void 0 ? void 0 : _state$thread.threadList;
  }) || [];

  var changeMessage = function changeMessage() {
    //Whether you are in the thread. If not, call the interface added by SDK
    var hasJoined = threadList.find(function (item) {
      return item.id === props.message.chatThreadOverview.id;
    });

    if (!hasJoined) {
      _WebIM["default"].conn.joinChatThread({
        chatThreadId: props.message.chatThreadOverview.id
      }).then(function (res) {
        changeThreadStatus();
      })["catch"](function (e) {
        if (e.type === 1301) {
          changeThreadStatus();
        } else if (e.type === 1300) {
          _alert.message.warn(_i18next["default"].t('The thread has been disbanded'));
        }
      });

      return;
    }

    changeThreadStatus();
  }; //changes thread status after joing the thread


  var changeThreadStatus = function changeThreadStatus() {
    //change the status of creatingThread
    dispatch(_thread2["default"].setIsCreatingThread(false)); //updtate currentThreadInfo

    _WebIM["default"].conn.getChatThreadDetail({
      chatThreadId: props.message.chatThreadOverview.id
    }).then(function (res) {
      var _res$data;

      dispatch(_thread2["default"].setCurrentThreadInfo(res.data)); //updatea setThreadOriginalMsg

      if ((_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.messageId) {
        _AppDB["default"].findLocalMessage('groupChat', res.data.messageId).then(function (res) {
          var msg = res.length === 1 ? res[0] : {};
          dispatch(_thread2["default"].setThreadOriginalMsg(msg));
        });
      }

      onOpenThreadPanel && onOpenThreadPanel(res.data);
    }); //open threadPanel


    dispatch(_thread2["default"].updateThreadStates(true));
  };

  return /*#__PURE__*/_react["default"].createElement(_core.Box, {
    className: classes.root
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.container,
    onClick: changeMessage
  }, /*#__PURE__*/_react["default"].createElement("span", {
    className: classes.triangle
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.threadTop
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.threadIcon
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.threadName
  }, chatThreadOverview.name), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.messageCount
  }, /*#__PURE__*/_react["default"].createElement("span", {
    className: classes.count
  }, chatThreadOverview.messageCount > 99 ? '99+' : chatThreadOverview.messageCount), /*#__PURE__*/_react["default"].createElement("img", {
    alt: "",
    className: classes.openImg,
    src: _open["default"]
  }))), chatThreadOverview.lastMessage && JSON.stringify(chatThreadOverview.lastMessage) !== '{}' && /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.threadBottom
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.threadInfo
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.threadAva
  }, /*#__PURE__*/_react["default"].createElement("img", {
    className: classes.threadAvaIcon,
    src: (0, _utils.userAvatar)(chatThreadOverview.lastMessage.from)
  })), /*#__PURE__*/_react["default"].createElement("span", {
    className: classes.threadMsg
  }, chatThreadOverview.lastMessage.from || ''), /*#__PURE__*/_react["default"].createElement("span", {
    className: classes.time
  }, (0, _index2.getTimeDiff)(chatThreadOverview.lastMessage.time))), /*#__PURE__*/_react["default"].createElement("span", {
    className: classes.messageInfo
  }, renderMessage(chatThreadOverview.lastMessage))), (!chatThreadOverview.lastMessage || JSON.stringify(chatThreadOverview.lastMessage) === '{}') && /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.defaultMessage
  }, "No Messages")));
};

var _default = MsgThreadInfo;
exports["default"] = _default;
module.exports = exports.default;