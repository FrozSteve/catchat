"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _styles = require("@material-ui/styles");

require("./index.css");

var _reactRedux = require("react-redux");

var _message = _interopRequireDefault(require("../../redux/message"));

var _retractedMessage = _interopRequireDefault(require("./messages/retractedMessage"));

var _fileMessage = _interopRequireDefault(require("./messages/fileMessage"));

var _imageMessage = _interopRequireDefault(require("./messages/imageMessage"));

var _audioOrVideoMessage = _interopRequireDefault(require("./messages/audioOrVideoMessage"));

var _textMessage = _interopRequireDefault(require("./messages/textMessage"));

var _noticeMessage = _interopRequireDefault(require("./messages/noticeMessage"));

var _customMessage = _interopRequireDefault(require("./messages/customMessage"));

var _thread = _interopRequireDefault(require("../../redux/thread"));

var _i18next = _interopRequireDefault(require("i18next"));

var _threadNotify = _interopRequireDefault(require("./messages/threadNotify"));

var _notify = _interopRequireDefault(require("./messages/notify"));

var _loadmore2x = _interopRequireDefault(require("../../common/icons/loadmore@2x.png"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      width: "100%",
      flex: 1,
      display: "flex",
      position: "relative",
      bottom: "0",
      top: "0",
      overflow: "hidden"
    },
    loadMore: {
      width: '16px',
      height: '16px',
      animation: "rotate 800ms infinite"
    },
    "@keyframes rotate": {
      "0%": {
        transform: "rotate(0deg)"
      },
      "100%": {
        transform: "rotate(360deg)"
      }
    }
  };
});
var PAGE_NUM = 20;

function MessageList(_ref) {
  var messageList = _ref.messageList,
      showByselfAvatar = _ref.showByselfAvatar;
  var classes = useStyles();
  var dispatch = (0, _reactRedux.useDispatch)();
  var globalProps = (0, _reactRedux.useSelector)(function (state) {
    return state.global.globalProps;
  });
  var showThread = (0, _reactRedux.useSelector)(function (state) {
    return state.thread.showThread;
  });
  var to = globalProps.to,
      chatType = globalProps.chatType;
  console.log("** Render MessageList **", messageList);
  var scrollEl = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(false),
      isPullingDown = _useState[0],
      setIsPullingDown = _useState[1];

  var _useState2 = (0, _react.useState)(false),
      isLoaded = _useState2[0],
      setIsLoaded = _useState2[1];

  var _not_scroll_bottom = false;

  var _useState3 = (0, _react.useState)(0),
      boxScrollHeight = _useState3[0],
      setBoxScrollHeight = _useState3[1];

  (0, _react.useEffect)(function () {
    // if (!_not_scroll_bottom) {
    //   setTimeout(() => {
    //     const dom = scrollEl.current;
    //     if (!ReactDOM.findDOMNode(dom)) return;
    //     dom.scrollTop = dom.scrollHeight;
    //   }, 0);
    // }
    var tempArr = [];
    messageList.forEach(function (item) {
      if (item.body.type === 'img' || item.body.type === 'video') {
        tempArr.push(item.body);
      }
    });
    var time = tempArr.length ? tempArr.length * 1000 : 510;
    var TimerId = setInterval(function () {
      if (document.getElementById('pulldownList')) {
        setBoxScrollHeight(document.getElementById('pulldownList').scrollHeight);
      }
    }, 500);
    var TimeId = setTimeout(function () {
      clearTimeout(TimeId);
      clearInterval(TimerId);
    }, time);
  }, [messageList.length]);
  (0, _react.useEffect)(function () {
    document.getElementById('pulldownList').scrollIntoView({
      behavior: 'smooth',
      block: 'end'
    });
  }, [boxScrollHeight]);
  var handleRecallMsg = (0, _react.useCallback)(function (message) {
    console.log("handleRecallMsg", message);
    var to = message.to,
        chatType = message.chatType;
    dispatch(_message["default"].recallMessage(to, chatType, message));
  }, [dispatch]);

  var handleScroll = function handleScroll(e) {
    if (e.target.scrollTop === 0 && !isLoaded) {
      setTimeout(function () {
        var offset = messageList.length;
        dispatch(_message["default"].fetchMessage(to, chatType, offset, function (res) {
          setIsPullingDown(false);

          if (res < PAGE_NUM) {
            setIsLoaded(true);
          }
        }));
      }, 500);
      setIsPullingDown(true);
    }
  };

  var createThread = function createThread(message) {
    //update currentThreadInfo
    dispatch(_thread["default"].setThreadOriginalMsg(message));
    dispatch(_thread["default"].setCurrentThreadInfo({})); //updated the historyStatus of Newly created chatThread

    dispatch(_message["default"].setThreadHasHistory(false)); //change the status of threadPanel

    dispatch(_thread["default"].updateThreadStates(true)); //change the status of creatingThread

    dispatch(_thread["default"].setIsCreatingThread(true));
  };

  return /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.root
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "pulldown-wrapper",
    onScroll: handleScroll
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "pulldown-tips"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      display: isLoaded ? "block" : "none"
    }
  }, /*#__PURE__*/_react["default"].createElement("span", {
    style: {
      fontSize: "12px"
    }
  }, _i18next["default"].t("no more messages"))), /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      display: isPullingDown ? "block" : "none"
    }
  }, /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement("img", {
    className: classes.loadMore,
    src: _loadmore2x["default"],
    alt: "Loading..."
  })))), /*#__PURE__*/_react["default"].createElement("ul", {
    ref: scrollEl,
    className: "pulldown-list",
    id: "pulldownList"
  }, messageList.length ? messageList.map(function (msg, index) {
    if (msg.body.type === "txt") {
      return /*#__PURE__*/_react["default"].createElement(_textMessage["default"], {
        message: msg,
        key: msg.id + index,
        onRecallMessage: handleRecallMsg,
        onCreateThread: createThread,
        showByselfAvatar: showByselfAvatar,
        showThread: showThread
      });
    } else if (msg.body.type === "file") {
      return /*#__PURE__*/_react["default"].createElement(_fileMessage["default"], {
        message: msg,
        key: msg.id + index,
        onRecallMessage: handleRecallMsg,
        onCreateThread: createThread,
        showByselfAvatar: showByselfAvatar,
        showThread: showThread
      });
    } else if (msg.body.type === "img") {
      return /*#__PURE__*/_react["default"].createElement(_imageMessage["default"], {
        message: msg,
        key: msg.id + index,
        onRecallMessage: handleRecallMsg,
        onCreateThread: createThread,
        showByselfAvatar: showByselfAvatar,
        showThread: showThread
      });
    } else if (msg.body.type === "audio" || msg.body.type === "video") {
      return /*#__PURE__*/_react["default"].createElement(_audioOrVideoMessage["default"], {
        message: msg,
        key: msg.id + index,
        showByselfAvatar: showByselfAvatar
      });
    } else if (msg.body.type === "recall") {
      return /*#__PURE__*/_react["default"].createElement(_retractedMessage["default"], {
        message: msg,
        key: msg.id + index
      });
    } else if (msg.body.type === "notice") {
      return /*#__PURE__*/_react["default"].createElement(_noticeMessage["default"], {
        message: msg,
        key: msg.id + index
      });
    } else if (msg.body.type === 'custom') {
      return /*#__PURE__*/_react["default"].createElement(_customMessage["default"], {
        message: msg,
        key: msg.id + index
      });
    } else if (msg.body.type === "threadNotify") {
      return /*#__PURE__*/_react["default"].createElement(_threadNotify["default"], {
        message: msg,
        key: msg.id + index
      });
    } else if (msg.body.type === "notify") {
      return /*#__PURE__*/_react["default"].createElement(_notify["default"], {
        message: msg,
        key: msg.id + index
      });
    } else {
      return null;
    }
  }) : null)));
}

var _default = (0, _react.memo)(MessageList);

exports["default"] = _default;
module.exports = exports.default;