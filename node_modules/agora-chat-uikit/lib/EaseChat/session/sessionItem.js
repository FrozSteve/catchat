"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _material = require("@mui/material");

var _styles = require("@material-ui/styles");

var _ListItem = _interopRequireDefault(require("@material-ui/core/ListItem"));

var _ListItemAvatar = _interopRequireDefault(require("@material-ui/core/ListItemAvatar"));

var _Avatar = _interopRequireDefault(require("@material-ui/core/Avatar"));

var _MoreVert = _interopRequireDefault(require("@material-ui/icons/MoreVert"));

var _Box = _interopRequireDefault(require("@material-ui/core/Box"));

var _core = require("@material-ui/core");

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _index = require("../../utils/index");

var _index2 = require("../../EaseApp/index");

var _message = _interopRequireDefault(require("../../redux/message"));

var _session2 = _interopRequireDefault(require("../../redux/session"));

var _globalProps = _interopRequireDefault(require("../../redux/globalProps"));

var _i18next = _interopRequireDefault(require("i18next"));

var _gray2x = _interopRequireDefault(require("../../common/images/gray@2x.png"));

var _delete2x = _interopRequireDefault(require("../../common/icons/delete@2x.png"));

var _emoji = require("../../common/emoji");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    paper: {
      margin: '5px',
      paddingRight: '20px',
      borderRadius: '20px',
      display: 'flex'
    },
    moreVertStyle: {
      width: '15px',
      height: '15px',
      backgroundColor: '#f0f2f4',
      boxShadow: '1px 1px 10px rgb(0 0 0 / 30%)',
      '&:hover': {
        backgroundColor: '#ffffff'
      }
    },
    listItem: {
      padding: "0 14px",
      borderRadius: '16px',
      height: '72px',
      marginBottom: '8px',
      '& .Mui-selected': {
        backgroundColor: 'rgba(255, 255, 255, 1) !important'
      }
    },
    itemBox: {
      display: "flex",
      flex: 1,
      height: "100%",
      alignItems: "center",
      boxSizing: "border-box",
      padding: '5px 0'
    },
    itemRightBox: {
      flex: 1
    },
    itemName: {
      fontSize: "16px",
      overflow: "hidden",
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between",
      color: '#0d0d0d'
    },
    itemMsgBox: {
      position: "relative",
      height: "24px",
      display: "flex",
      alignItems: "center"
    },
    time: {
      display: "inline-block",
      height: "17px",
      fontSize: "12px",
      color: "rgba(1, 1, 1, .6)",
      marginRight: "2px"
    },
    itemMsg: {
      display: "inline-block",
      height: "24px",
      overflow: "hidden",
      color: "#666",
      width: "calc(100% - 18px)",
      fontSize: "14px",
      wordBreak: 'break-all'
    },
    unreadNum: {
      color: "#fff",
      background: "rgba(245, 12, 205, 1)",
      display: "inline-block",
      height: "16px",
      borderRadius: "8px",
      fontSize: "12px",
      minWidth: "16px",
      textAlign: "center",
      position: "absolute",
      right: "0",
      padding: '0 3px',
      letterSpacing: 0,
      lineHeight: '16px'
    },
    muteImgStyle: {
      width: '12px',
      marginLeft: '2px',
      height: '12px'
    },
    avatarImg: {
      width: '50px',
      height: '50px'
    }
  };
});

function SessionItem(props) {
  var _presenceExt$session$, _session$lastMessage, _session$lastMessage2, _session$lastMessage3, _presenceExt$session$2;

  var easeAppProps = (0, _react.useContext)(_index2.EaseAppContext);
  var isShowUnread = easeAppProps.isShowUnread,
      unreadType = easeAppProps.unreadType;
  var currentVal = props.currentVal,
      handleListItemClick = props.handleListItemClick,
      deleteSessionClick = props.deleteSessionClick;
  var session = currentVal.session,
      index = currentVal.index,
      currentSessionIndex = currentVal.currentSessionIndex,
      avatarSrc = currentVal.avatarSrc;
  var classes = useStyles();
  var dispatch = (0, _index2.useDispatch)();

  var _useState = (0, _react.useState)(false),
      isShowMoreVertStyle = _useState[0],
      setIsShowMoreVertStyle = _useState[1];

  var _useState2 = (0, _react.useState)(null),
      sessionEl = _useState2[0],
      setSessionEl = _useState2[1];

  var menuList = [{
    name: _i18next["default"].t('Delete Chat'),
    key: '0',
    value: 'deleteSession'
  }];
  var globalProps = (0, _index2.useSelector)(function (state) {
    var _state$global;

    return (_state$global = state.global) === null || _state$global === void 0 ? void 0 : _state$global.globalProps;
  });
  var presenceExt = globalProps.presenceExt;

  var onClickMenuItem = function onClickMenuItem(option, _session) {
    return function (e) {
      var value = option.value;
      e.preventDefault();
      e.stopPropagation();

      switch (value) {
        case 'deleteSession':
          deleteSessionClick(_session);
          dispatch(_message["default"].clearMessage(_session.sessionType, _session.sessionId));
          dispatch(_session2["default"].deleteSession(_session.sessionId));
          index === currentSessionIndex && dispatch(_globalProps["default"].setGlobalProps({
            to: null
          }));
          setSessionEl(null);
          setIsShowMoreVertStyle(false);
          break;

        default:
          break;
      }
    };
  };

  var showMoreVert = function showMoreVert(e) {
    e.preventDefault();
    e.stopPropagation();
    setSessionEl(e.currentTarget);
  };

  var closeSession = function closeSession(e) {
    e.preventDefault();
    e.stopPropagation();
    setSessionEl(null);
  };

  var renderTxt = function renderTxt(txt) {
    if (txt === undefined) {
      return [];
    }

    var rnTxt = [];
    var match = null;
    var regex = /(\[.*?\])/g;
    var start = 0;
    var index = 0;

    while (match = regex.exec(txt)) {
      index = match.index;

      if (index > start) {
        rnTxt.push(txt.substring(start, index));
      }

      if (match[1] in _emoji.emoji.map) {
        var v = _emoji.emoji.map[match[1]];
        rnTxt.push( /*#__PURE__*/_react["default"].createElement("img", {
          key: v + Math.floor(Math.random() * 100000 + 1) + new Date().getTime().toString(),
          alt: v,
          src: require("../../common/reactions/" + v)["default"],
          width: 20,
          height: 20,
          style: {
            verticalAlign: 'middle'
          }
        }));
      } else {
        rnTxt.push(match[1]);
      }

      start = index + match[1].length;
    }

    rnTxt.push(txt.substring(start, txt.length));
    return rnTxt;
  };

  var renderMenu = function renderMenu(_session) {
    return /*#__PURE__*/_react["default"].createElement(_material.Menu, {
      id: "simple-menu",
      anchorEl: sessionEl,
      keepMounted: true,
      open: Boolean(sessionEl),
      onClose: function onClose(e) {
        return closeSession(e);
      },
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "left"
      },
      transformOrigin: {
        vertical: "top",
        horizontal: "left"
      }
    }, menuList && menuList.map(function (option, index) {
      return /*#__PURE__*/_react["default"].createElement(_material.MenuItem, {
        onClick: onClickMenuItem(option, _session),
        key: index,
        style: {
          width: '240px'
        }
      }, /*#__PURE__*/_react["default"].createElement("img", {
        src: _delete2x["default"],
        style: {
          width: '30px',
          height: '30px',
          marginRight: '8px'
        },
        alt: ""
      }), /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
        variant: "inherit",
        noWrap: true
      }, _i18next["default"].t(option.name)));
    }));
  };

  return /*#__PURE__*/_react["default"].createElement(_ListItem["default"], {
    key: session.sessionId,
    selected: currentSessionIndex === index,
    onClick: function onClick(event) {
      return handleListItemClick(event, index, session);
    },
    className: classes.listItem,
    button: true,
    onMouseOver: function onMouseOver() {
      return setIsShowMoreVertStyle(true);
    },
    onMouseLeave: function onMouseLeave() {
      setIsShowMoreVertStyle(false);
      setSessionEl(null);
    }
  }, /*#__PURE__*/_react["default"].createElement(_Box["default"], {
    className: classes.itemBox
  }, /*#__PURE__*/_react["default"].createElement(_ListItemAvatar["default"], null, /*#__PURE__*/_react["default"].createElement(_Avatar["default"], {
    style: {
      borderRadius: "" + session.sessionType === "singleChat" ? "50%" : 'inherit'
    },
    alt: "" + (session.sessionName || session.name || session.sessionId),
    src: avatarSrc,
    className: classes.avatarImg
  })), /*#__PURE__*/_react["default"].createElement(_Box["default"], {
    className: classes.itemRightBox
  }, /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    className: classes.itemName
  }, /*#__PURE__*/_react["default"].createElement("span", null, session.sessionName || session.name || session.sessionId, presenceExt && ((_presenceExt$session$ = presenceExt[session.sessionId]) === null || _presenceExt$session$ === void 0 ? void 0 : _presenceExt$session$.muteFlag) ? /*#__PURE__*/_react["default"].createElement("img", {
    className: classes.muteImgStyle,
    alt: "",
    src: _gray2x["default"]
  }) : null), /*#__PURE__*/_react["default"].createElement("span", {
    className: classes.time
  }, (0, _index.sessionItemTime)(session === null || session === void 0 ? void 0 : (_session$lastMessage = session.lastMessage) === null || _session$lastMessage === void 0 ? void 0 : _session$lastMessage.time))), /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    className: classes.itemMsgBox
  }, /*#__PURE__*/_react["default"].createElement("span", {
    className: classes.itemMsg
  }, renderTxt(session === null || session === void 0 ? void 0 : (_session$lastMessage2 = session.lastMessage) === null || _session$lastMessage2 === void 0 ? void 0 : (_session$lastMessage3 = _session$lastMessage2.body) === null || _session$lastMessage3 === void 0 ? void 0 : _session$lastMessage3.msg)), isShowUnread && presenceExt && !((_presenceExt$session$2 = presenceExt[session.sessionId]) === null || _presenceExt$session$2 === void 0 ? void 0 : _presenceExt$session$2.muteFlag) && /*#__PURE__*/_react["default"].createElement("span", {
    className: classes.unreadNum,
    style: {
      display: session.unreadNum ? "inline-block" : "none"
    }
  }, unreadType ? Number(session.unreadNum) > 99 ? '99+' : session.unreadNum : null), isShowMoreVertStyle && /*#__PURE__*/_react["default"].createElement(_core.IconButton, {
    className: classes.moreVertStyle,
    onClick: function onClick(e) {
      return showMoreVert(e);
    }
  }, /*#__PURE__*/_react["default"].createElement(_MoreVert["default"], {
    fontSize: "small"
  })), renderMenu(session)))));
}

var _default = (0, _react.memo)(SessionItem);

exports["default"] = _default;
module.exports = exports.default;