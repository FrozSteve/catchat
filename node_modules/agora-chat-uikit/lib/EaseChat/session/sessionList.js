"use strict";

exports.__esModule = true;
exports["default"] = SessionList;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/styles");

var _List = _interopRequireDefault(require("@material-ui/core/List"));

var _Search = _interopRequireDefault(require("@material-ui/icons/Search"));

var _core = require("@material-ui/core");

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

var _index = require("../../EaseApp/index");

var _lodash = _interopRequireDefault(require("lodash"));

var _sessionItem = _interopRequireDefault(require("./sessionItem"));

var _groupAvatar = _interopRequireDefault(require("../../common/images/groupAvatar.png"));

var _chatroom2x = _interopRequireDefault(require("../../common/images/chatroom@2x.jpg"));

var _notice2x = _interopRequireDefault(require("../../common/images/notice@2x.png"));

var _avatar = _interopRequireDefault(require("../../common/images/avatar1.jpg"));

var _avatar2 = _interopRequireDefault(require("../../common/images/avatar2.jpg"));

var _avatar3 = _interopRequireDefault(require("../../common/images/avatar3.jpg"));

var _avatar4 = _interopRequireDefault(require("../../common/images/avatar4.jpg"));

var _avatar5 = _interopRequireDefault(require("../../common/images/avatar5.jpg"));

var _avatar6 = _interopRequireDefault(require("../../common/images/avatar6.jpg"));

var _avatar7 = _interopRequireDefault(require("../../common/images/avatar7.jpg"));

var _avatar8 = _interopRequireDefault(require("../../common/images/avatar11.jpg"));

var _searchgray = _interopRequireDefault(require("../../common/images/searchgray.png"));

var _i18next = _interopRequireDefault(require("i18next"));

var _HighlightOff = _interopRequireDefault(require("@material-ui/icons/HighlightOff"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      width: "100%",
      height: "100%",
      margin: '0 !important',
      padding: '0 8px !important',
      overflowY: 'auto',
      boxSizing: 'border-box',
      '& .MuiListItem-root.Mui-selected': {
        background: '#fff'
      },
      '& .MuiListItem-root.Mui-selected:hover': {
        background: '#fff'
      },
      '& .MuiListItem-button:hover': {
        background: 'rgb(242, 243, 245)'
      }
    },
    paper: {
      margin: '8px 8px 15px 8px',
      paddingRight: '20px',
      borderRadius: '25px',
      display: 'flex',
      boxShadow: 'none',
      position: 'relative',
      '& .MuiIconButton-root': {
        padding: '8px'
      }
    },
    inputBase: {
      width: '100%',
      paddingRight: '14px',
      height: '40px'
    },
    closeBtn: {
      position: 'absolute !important',
      right: '0px',
      top: '0px'
    },
    searchImgStyle: {
      width: '22px',
      height: '22px',
      margin: '10px 8px 0px 8px'
    }
  };
});

function SessionList(props) {
  var easeAppProps = (0, _react.useContext)(_index.EaseAppContext);
  var classes = useStyles();
  var sessionList = (0, _index.useSelector)(function (state) {
    var _state$session;

    return (_state$session = state.session) === null || _state$session === void 0 ? void 0 : _state$session.sessionList;
  }) || [];
  var to = (0, _index.useSelector)(function (state) {
    return state.global.globalProps.to;
  });
  var message = (0, _index.useSelector)(function (state) {
    return state.message;
  });
  var unread = message.unread;
  var currentSession = (0, _index.useSelector)(function (state) {
    var _state$session2;

    return (_state$session2 = state.session) === null || _state$session2 === void 0 ? void 0 : _state$session2.currentSession;
  });
  var currentSessionIndex = null;
  var joinedGroups = (0, _index.useSelector)(function (state) {
    var _state$session3;

    return (_state$session3 = state.session) === null || _state$session3 === void 0 ? void 0 : _state$session3.joinedGroups;
  }); // dealwith notice unread num

  var notices = (0, _index.useSelector)(function (state) {
    var _state$notice;

    return (_state$notice = state.notice) === null || _state$notice === void 0 ? void 0 : _state$notice.notices;
  }) || [];

  var _useState = (0, _react.useState)([]),
      searchAry = _useState[0],
      setSearchAry = _useState[1];

  var newGroupName = (0, _index.useSelector)(function (state) {
    return state.global.globalProps.name;
  });

  var _useState2 = (0, _react.useState)(''),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var noticeUnreadNum = 0;
  /******** -session- ********/

  notices.forEach(function (item) {
    if (!item.disabled) {
      noticeUnreadNum++;
    }
  });
  var renderSessionList = sessionList.asMutable({
    deep: true
  }).map(function (session) {
    var _message$session$sess;

    /******* --sessionId replaces the group name-- *******/
    joinedGroups.length > 0 && joinedGroups.forEach(function (item) {
      if (item.groupid === session.sessionId) {
        session.name = newGroupName && newGroupName[session.sessionId] ? newGroupName[session.sessionId] : item.groupname;
      }
    });
    var chatMsgs = (message === null || message === void 0 ? void 0 : (_message$session$sess = message[session.sessionType]) === null || _message$session$sess === void 0 ? void 0 : _message$session$sess[session.sessionId]) || [];

    if (chatMsgs.length > 0) {
      var lastMessage = chatMsgs[chatMsgs.length - 1];
      var val = lastMessage.body || '';

      if (val && val.type === 'recall') {
        session.lastMessage = {
          time: lastMessage.time,
          body: {
            msg: lastMessage.chatType === 'singleChat' && lastMessage.bySelf ? _i18next["default"].t("you retracted a message") : "" + lastMessage.from + _i18next["default"].t("retracted a message")
          }
        };
      } else {
        session.lastMessage = lastMessage;
      }

      session.unreadNum = unread[session.sessionType][session.sessionId];
    }

    if (session.sessionType === "notice") {
      if (notices.length) {
        var msg;
        session.unreadNum = noticeUnreadNum;

        if (notices[notices.length - 1].type === "joinGroupNotifications") {
          msg = "Request to join the group:" + notices[notices.length - 1].gid;
        } else {
          var _notices;

          msg = (_notices = notices[notices.length - 1]) === null || _notices === void 0 ? void 0 : _notices.status;
        }

        session.lastMessage = {
          time: notices[notices.length - 1].id,
          body: {
            msg: msg
          }
        };
      }
    }

    return session;
  }).sort(function (a, b) {
    var _a$lastMessage, _b$lastMessage, _b$lastMessage2, _a$lastMessage2;

    if (!(a === null || a === void 0 ? void 0 : (_a$lastMessage = a.lastMessage) === null || _a$lastMessage === void 0 ? void 0 : _a$lastMessage.time)) return 1;
    if (!(b === null || b === void 0 ? void 0 : (_b$lastMessage = b.lastMessage) === null || _b$lastMessage === void 0 ? void 0 : _b$lastMessage.time)) return -1;
    return (b === null || b === void 0 ? void 0 : (_b$lastMessage2 = b.lastMessage) === null || _b$lastMessage2 === void 0 ? void 0 : _b$lastMessage2.time) - (a === null || a === void 0 ? void 0 : (_a$lastMessage2 = a.lastMessage) === null || _a$lastMessage2 === void 0 ? void 0 : _a$lastMessage2.time);
  });
  /******** -- ********/

  renderSessionList.forEach(function (element, index) {
    if (element.sessionId === currentSession) {
      currentSessionIndex = index;
    }
  });

  var handleListItemClick = function handleListItemClick(e, index, session) {
    e.preventDefault();
    e.stopPropagation();

    if (currentSessionIndex !== index || !to) {
      props.onClickItem(session);
    }
  };

  var searchSession = function searchSession(e) {
    setInputValue(e.target.value);
    var ary = [];

    if (e.target.value) {
      renderSessionList.map(function (val, key) {
        var isIncludeAry = val.sessionType === 'groupChat' ? val.name : val.sessionId;

        var isIncludeVal = _lodash["default"].includes(_lodash["default"].toLower(isIncludeAry), _lodash["default"].toLower(e.target.value));

        if (isIncludeVal) {
          ary.push(val);
        }

        setSearchAry(_lodash["default"].uniq(ary));
      });
    } else {
      setSearchAry([]);
    }
  };

  var userAvatars = {
    1: _avatar["default"],
    2: _avatar2["default"],
    3: _avatar3["default"],
    4: _avatar4["default"],
    5: _avatar5["default"],
    6: _avatar6["default"],
    7: _avatar7["default"]
  };
  var renderSession = searchAry && searchAry.length > 0 ? searchAry : renderSessionList;

  var deleteSessionClick = function deleteSessionClick(v) {
    var newAry = _lodash["default"].filter(searchAry, function (o) {
      return v.sessionId !== o.sessionId;
    });

    setSearchAry(newAry);
  };

  var handleMouseDownPassword = function handleMouseDownPassword(event) {
    event.preventDefault();
  };

  var handleClickClearagoraId = function handleClickClearagoraId() {
    setInputValue('');
    setSearchAry([]);
  };

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_Paper["default"], {
    component: "form",
    className: classes.paper,
    sx: {
      p: '2px 4px',
      display: 'flex',
      alignItems: 'center'
    }
  }, /*#__PURE__*/_react["default"].createElement("img", {
    alt: "search",
    className: classes.searchImgStyle,
    src: _searchgray["default"]
  }), /*#__PURE__*/_react["default"].createElement(_core.InputBase, {
    className: classes.inputBase,
    sx: {
      ml: 1,
      flex: 2
    },
    placeholder: "Search",
    value: inputValue,
    onChange: searchSession
  }), inputValue && /*#__PURE__*/_react["default"].createElement(_core.IconButton, {
    "aria-label": "toggle password visibility",
    onClick: handleClickClearagoraId,
    onMouseDown: handleMouseDownPassword,
    className: classes.closeBtn
  }, /*#__PURE__*/_react["default"].createElement(_HighlightOff["default"], null))), /*#__PURE__*/_react["default"].createElement(_List["default"], {
    dense: true,
    className: classes.root
  }, renderSession.map(function (session, index) {
    var usersInfoData = localStorage.getItem("usersInfo_1.0");
    var avatarSrc = "";

    if (session.sessionType === "singleChat") {
      if (usersInfoData) {
        usersInfoData = JSON.parse(usersInfoData);
      }

      var findIndex = _lodash["default"].find(usersInfoData, {
        username: session.sessionId
      }) || '';
      avatarSrc = userAvatars[findIndex.userAvatar] || _avatar8["default"];
    } else if (session.sessionType === "groupChat") {
      avatarSrc = _groupAvatar["default"];
    } else if (session.sessionType === "chatRoom") {
      avatarSrc = _chatroom2x["default"];
    } else if (session.sessionType === "notice") {
      avatarSrc = _notice2x["default"];
    }

    return /*#__PURE__*/_react["default"].createElement(_sessionItem["default"], {
      key: index,
      currentVal: {
        session: session,
        index: index,
        currentSessionIndex: currentSessionIndex,
        avatarSrc: avatarSrc
      },
      handleListItemClick: handleListItemClick,
      deleteSessionClick: deleteSessionClick
    });
  })));
}

module.exports = exports.default;