import React, { useEffect, useContext, useRef } from 'react';
import Draggable from 'react-draggable';
import Header from './header';
import Main from './main';
import './index.css';
import { useSelector } from 'react-redux';
import classnames from 'classnames';
import MiniWindow from '../modules/miniWindow';
import { CALLSTATUS } from '../redux/reducer';
import { CallkitContext } from '../index';

function Layout(_ref) {
  var onAddPerson = _ref.onAddPerson,
      onStateChange = _ref.onStateChange,
      onInvite = _ref.onInvite;
  var CallkitProps = useContext(CallkitContext);
  var confr = useSelector(function (state) {
    return state.confr;
  });
  var size = useSelector(function (state) {
    return state.windowSize;
  });
  var callStatus = useSelector(function (state) {
    return state.callStatus;
  });
  var cls = classnames('callkit-layout-cantainer', {
    'callkit-layout-large': size === 'large',
    'callkit-layout-displaynone': size === 'mini'
  });
  var miniCls = classnames({
    'callkit-layout-displaynone': size !== 'mini'
  });
  var position = size === 'large' ? {
    x: 0,
    y: 0
  } : null;

  var addPerson = function addPerson(confr) {
    onAddPerson && onAddPerson(confr);
  };

  var audio = useRef(null);
  useEffect(function () {
    if (callStatus === CALLSTATUS.alerting) {
      onInvite && onInvite(confr);

      if (!CallkitProps.ringingSource) {
        console.warn('no ringing source.');
        return;
      }

      audio.current = new Audio();
      audio.current.muted = "muted";
      audio.current.src = CallkitProps.ringingSource;
      audio.current.play();
      audio.current.muted = false;

      audio.current.onended = function () {
        audio.current.load();
        audio.current.play();
      };
    } else if (callStatus != CALLSTATUS.receivedConfirmRing) {
      if (!audio.current) return;
      audio.current.pause();
      audio.current.src = null;
      audio.current.load();
    }
  }, [callStatus]);
  return callStatus > CALLSTATUS.idle ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Draggable, {
    position: position
  }, /*#__PURE__*/React.createElement("div", {
    className: cls
  }, /*#__PURE__*/React.createElement(Header, {
    onAddPerson: addPerson
  }), /*#__PURE__*/React.createElement(Main, null))), /*#__PURE__*/React.createElement(MiniWindow, {
    className: miniCls
  })) : null;
}

export default Layout;