import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import './index.css';
import Avatar from '../../components/avatar';
import React, { useState, useEffect, memo, useContext } from 'react';
import head from '../../assets/images/head.png';
import classnames from 'classnames';
import Icon from '../../components/Icon';
import Button from '../../components/button';
import { useSelector, useDispatch } from 'react-redux';
import { updateConfr, setCallStatus, CALLSTATUS, updateJoinedMembers, setUidToUserId } from '../../redux/reducer';
import { answerCall } from '../message';
import { WebIM, callManager } from '../callManager';
import store from '../../redux';
import { CallkitContext } from '../../index';
var MAXUSERS = 16;

function VideoCall(props) {
  var text = props.text,
      className = props.className,
      id = props.id;
  var CallkitProps = useContext(CallkitContext);
  var contactAvatar = CallkitProps.contactAvatar;
  var cls = classnames(className, {
    'callkit-group-video-box-4': true
  });
  var data = props.data;
  var audioIconClass = classnames({
    iconfont: true,
    'icon-mic_slash': true,
    'callkit-group-audio-icon2': true,
    'display-none': data.audio
  });
  var videoIconClass = classnames({
    iconfont: true,
    'icon-video_slash': true,
    'callkit-group-video-icon': true,
    'display-none': data.video
  });
  var showAvatar = !data.video;
  return /*#__PURE__*/React.createElement("div", {
    className: cls,
    id: id
  }, showAvatar && /*#__PURE__*/React.createElement("div", {
    className: "callkit-group-video-avatar-box"
  }, /*#__PURE__*/React.createElement(Avatar, {
    src: contactAvatar || head,
    className: "callkit-group-audio-avatar"
  })), /*#__PURE__*/React.createElement("span", {
    className: "callkit-group-video-name"
  }, text), /*#__PURE__*/React.createElement(Icon, {
    className: audioIconClass
  }), /*#__PURE__*/React.createElement(Icon, {
    className: videoIconClass
  }));
}

function AudioCall(props) {
  var active = props.active,
      text = props.text,
      mute = props.mute;
  var CallkitProps = useContext(CallkitContext);
  var contactAvatar = CallkitProps.contactAvatar;
  var cls = classnames({
    'callkit-group-audio-avatar': true,
    'callkit-group-audio-active': active
  });
  var iconClass = classnames({
    iconfont: true,
    'icon-mic_slash': true,
    'callkit-group-audio-icon': true,
    'display-none': !mute
  });
  return /*#__PURE__*/React.createElement("div", {
    className: "callkit-group-audio-container"
  }, /*#__PURE__*/React.createElement(Avatar, {
    src: contactAvatar || head,
    alt: "name",
    className: cls
  }), /*#__PURE__*/React.createElement(Icon, {
    className: iconClass
  }), /*#__PURE__*/React.createElement("div", {
    className: "callkit-group-audio-username"
  }, text));
}

function GroupCall(props) {
  var CallkitProps = useContext(CallkitContext);

  var _useState = useState(false),
      isMute = _useState[0],
      setMute = _useState[1];

  var _useState2 = useState(false),
      isCloseCamera = _useState2[0],
      setCamera = _useState2[1];

  var _useState3 = useState([]),
      isTalking = _useState3[0],
      setTalkings = _useState3[1];

  var state = useSelector(function (state) {
    return state;
  });
  var uid2userids = useSelector(function (state) {
    return state.uid2userId;
  });
  var dispatch = useDispatch();
  var username = WebIM.conn.context.userId;
  var groupAvatar = CallkitProps.groupAvatar;

  function getControls() {
    if (state.confr.type === 3) {
      if (state.callStatus === 2 || state.callStatus === 4) {
        // 受邀请方按钮
        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {
          circle: true,
          danger: true,
          onClick: refuse
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-phone_down callkit-main-button"
        })), /*#__PURE__*/React.createElement(Button, {
          circle: true,
          right: true,
          onClick: accept
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-phone callkit-main-button"
        })));
      } else {
        return /*#__PURE__*/React.createElement(React.Fragment, null, isMute ? /*#__PURE__*/React.createElement(Button, {
          className: "callkit-singleCall-slash",
          circle: true,
          onClick: swichMic
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-mic_slash callkit-main-button"
        })) : /*#__PURE__*/React.createElement(Button, {
          circle: true,
          onClick: swichMic
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-mic callkit-main-button"
        })), /*#__PURE__*/React.createElement(Button, {
          circle: true,
          danger: true,
          onClick: hangup
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-phone_down callkit-main-button"
        })));
      }
    } else {
      if (state.callStatus === 2 || state.callStatus === 4) {
        // 受邀请方按钮
        return /*#__PURE__*/React.createElement(React.Fragment, null, isCloseCamera ? /*#__PURE__*/React.createElement(Button, {
          className: "callkit-singleCall-slash",
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-video_slash callkit-main-button"
        })) : /*#__PURE__*/React.createElement(Button, {
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-video callkit-main-button"
        })), /*#__PURE__*/React.createElement(Button, {
          circle: true,
          danger: true,
          onClick: refuse
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-phone_down callkit-main-button"
        })), /*#__PURE__*/React.createElement(Button, {
          circle: true,
          right: true,
          onClick: accept
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-phone callkit-main-button"
        })));
      } else {
        return /*#__PURE__*/React.createElement(React.Fragment, null, isCloseCamera ? /*#__PURE__*/React.createElement(Button, {
          className: "callkit-singleCall-slash",
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-video_slash callkit-main-button"
        })) : /*#__PURE__*/React.createElement(Button, {
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-video callkit-main-button"
        })), isMute ? /*#__PURE__*/React.createElement(Button, {
          circle: true,
          onClick: swichMic,
          className: "callkit-singleCall-slash"
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-mic_slash callkit-main-button"
        })) : /*#__PURE__*/React.createElement(Button, {
          circle: true,
          onClick: swichMic
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-mic callkit-main-button"
        })), /*#__PURE__*/React.createElement(Button, {
          circle: true,
          danger: true,
          onClick: hangup
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-phone_down callkit-main-button"
        })));
      }
    }
  }

  callManager.setCallKitProps(CallkitProps);

  function addListener() {
    return _addListener.apply(this, arguments);
  }

  function _addListener() {
    _addListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              WebIM.rtc.client.on("user-published", /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(user, mediaType) {
                  var state, videoElm, joined, remoteVideoTrack, remoteAudioTrack;
                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          state = store.getState();

                          if (!(state.joinedMembers.length >= MAXUSERS)) {
                            _context2.next = 3;
                            break;
                          }

                          return _context2.abrupt("return");

                        case 3:
                          CallkitProps.onStateChange && CallkitProps.onStateChange({
                            type: "user-published",
                            user: user,
                            mediaType: mediaType,
                            confr: state.confr
                          });

                          if (uid2userids[user.uid]) {
                            user.uid2userid = uid2userids[user.uid]; // user.uid2userid - im user
                          } else {
                            user.uid2userid = user.uid;
                          }

                          _context2.next = 7;
                          return WebIM.rtc.client.subscribe(user, mediaType);

                        case 7:
                          videoElm = '';
                          joined = {};
                          joined = {
                            name: user.uid2userid,
                            videoElm: 'video' + user.uid,
                            type: mediaType,
                            value: user.uid,
                            action: 'add',
                            audio: true,
                            video: true
                          };
                          state.joinedMembers.forEach(function (member) {
                            if (member.value == user.uid) {
                              joined = Object.assign({
                                action: 'add'
                              }, member);
                            }
                          });
                          videoElm = 'video' + user.uid; // subscribe video stream。

                          if (mediaType === "video") {
                            remoteVideoTrack = user.videoTrack;
                            joined.video = true;
                            dispatch(updateJoinedMembers(joined));
                            setTimeout(function () {
                              remoteVideoTrack.play(videoElm);
                            }, 500);
                          } // subscribe audio stream。


                          if (mediaType === "audio") {
                            joined.audio = true;
                            dispatch(updateJoinedMembers(joined));
                            remoteAudioTrack = user.audioTrack;
                            remoteAudioTrack && remoteAudioTrack.play();
                          }

                        case 14:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }));

                return function (_x, _x2) {
                  return _ref2.apply(this, arguments);
                };
              }());
              WebIM.rtc.client.on("user-unpublished", function (user, mediaType) {
                var state = store.getState();
                CallkitProps.onStateChange && CallkitProps.onStateChange({
                  type: "user-unpublished",
                  user: user,
                  mediaType: mediaType
                });
                var joinedMembersCp = [].concat(state.joinedMembers);
                joinedMembersCp.forEach(function (item, index) {
                  if (item.value == user.uid) {
                    var _user = Object.assign({}, item);

                    if (mediaType === 'audio') {
                      _user.audio = false;
                    } else {
                      _user.video = false;
                    }

                    joinedMembersCp[index] = _user;
                  }
                });
                dispatch(updateJoinedMembers(joinedMembersCp));
              });
              WebIM.rtc.client.on("user-left", function (user, mediaType) {
                CallkitProps.onStateChange && CallkitProps.onStateChange({
                  type: "user-left",
                  user: user,
                  mediaType: mediaType
                });
                var state = store.getState();
                var joinCurrent = state.joinedMembers.filter(function (item) {
                  return item.value !== user.uid;
                });
                dispatch(updateJoinedMembers(joinCurrent));
              });
              WebIM.rtc.client.enableAudioVolumeIndicator();
              WebIM.rtc.client.on("volume-indicator", function (result) {
                var isTalkingCp = [].concat(isTalking);
                result.forEach(function (volume, index) {
                  var userId = uid2userids[volume.uid]; // userId - im user id

                  if (!userId) return;

                  if (volume.level > 1 && !isTalkingCp.includes(userId)) {
                    isTalkingCp.push(userId);
                  } else {
                    if (volume.level < 1 && isTalkingCp.includes(userId)) {
                      var i = isTalkingCp.indexOf(userId);
                      isTalkingCp.splice(i, 1);
                    }
                  }
                });
                setTalkings(isTalkingCp);
              });

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _addListener.apply(this, arguments);
  }

  useEffect(function () {
    addListener();
    return function () {
      WebIM.rtc.client.removeAllListeners();
    };
  }, []);
  useEffect(function () {
    var newJoined = [].concat(state.joinedMembers);
    newJoined.forEach(function (item, index) {
      var newJoinedItem = {
        name: item.name,
        type: item.type,
        value: item.value,
        videoElm: item.videoElm,
        video: item.video,
        audio: item.audio,
        isSelf: item.isSelf
      };

      if (newJoinedItem.value in uid2userids) {
        newJoinedItem.name = uid2userids[newJoinedItem.value];
      }

      newJoined[index] = newJoinedItem;
    });
    dispatch(updateJoinedMembers(newJoined));
  }, [Object.keys(state.uid2userId).length, state.joinedMembers.length]);

  var joinConfr = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return callManager.join();

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function joinConfr() {
      return _ref.apply(this, arguments);
    };
  }();

  useEffect(function () {
    if (state.callStatus === CALLSTATUS.confirmRing || state.callStatus === CALLSTATUS.answerCall) {
      joinConfr();
    }
  }, [state.callStatus]);

  var hangup = function hangup() {
    if (state.callStatus < CALLSTATUS.confirmCallee) {
      // The call has not been connected, send cancel call
      callManager.hangup('normal', true);
    } else {
      // The call has been connected, don't send cancel call
      if (state.joinedMembers.length == 1 && state.confr.callerIMName == username) {
        // send cancel when you are left alone
        callManager.hangup('normal', true);
        return;
      }

      callManager.hangup('normal', false);
    }

    dispatch(setCallStatus(CALLSTATUS.idle));
  };

  var accept = function accept() {
    answerCall('accept');
    dispatch(setCallStatus(CALLSTATUS.answerCall)); // 5

    CallkitProps.onStateChange && CallkitProps.onStateChange({
      type: "accept",
      callInfo: state.confr
    });
    clearTimeout(WebIM.rtc.timer);
  };

  var refuse = function refuse() {
    answerCall('refuse'); // 

    if (state.callStatus < 7) {
      //拒接
      callManager.hangup('normal');
      dispatch(setCallStatus(CALLSTATUS.idle));
    } // CallkitProps.onStateChange && CallkitProps.onStateChange({
    // 	type: "refuse",
    // 	callInfo: state.confr,
    // 	groupId: state.groupId,
    // 	groupName: state.groupName
    // })


    clearTimeout(WebIM.rtc.timer);
  };

  var swichMic = function swichMic() {
    if (state.callStatus < CALLSTATUS.confirmRing || state.callStatus === CALLSTATUS.receivedConfirmRing) {
      return console.warn('not joined the call yet');
    }

    setMute(function (isMute) {
      return !isMute;
    });
    WebIM.rtc.localAudioTrack.setEnabled(isMute);
  };

  var swichCamera = function swichCamera() {
    if (state.callStatus < CALLSTATUS.confirmRing || state.callStatus === CALLSTATUS.receivedConfirmRing) {
      return console.warn('not joined the call yet');
    }

    setCamera(function (isCloseCamera) {
      return !isCloseCamera;
    });
    var status = isCloseCamera ? true : false;
    WebIM.rtc.localVideoTrack.setEnabled && WebIM.rtc.localVideoTrack.setEnabled(status);
  };

  var showAvatar = [0, 3, 5, 6, 7].includes(state.callStatus) ? false : true;
  var callType = state.confr.type === 3 ? 'Audio Call' : 'Video Call';
  var containerCls = classnames({
    'callkit-groupCall-container': true,
    'callkit-group-flex-start': state.joinedMembers.length > 6,
    'callkit-group-container-video': state.confr.type === 2
  });
  return /*#__PURE__*/React.createElement("div", {
    className: containerCls
  }, showAvatar && /*#__PURE__*/React.createElement("div", {
    className: "callkit-group-avatar"
  }, /*#__PURE__*/React.createElement(Avatar, {
    src: groupAvatar || head,
    style: {
      borderRadius: groupAvatar ? 'inherit' : '50%',
      zIndex: 9
    },
    alt: "name"
  }), /*#__PURE__*/React.createElement("div", {
    className: "callkit-singleCall-username"
  }, state.groupName), /*#__PURE__*/React.createElement("div", {
    className: "callkit-singleCall-title"
  }, callType)), state.confr.type === 3 && state.joinedMembers.map(function (item) {
    var talking = isTalking.includes(item.name);
    return /*#__PURE__*/React.createElement(AudioCall, {
      key: item.name,
      active: talking,
      text: item.name,
      mute: !item.audio
    });
  }), state.confr.type === 2 && state.joinedMembers.map(function (item) {
    var className = '';

    if (state.joinedMembers.length <= 2) {
      if (item.isSelf) {
        className = 'callkit-group-video-2-self';
      } else {
        className = 'callkit-group-video-2-target';
      }
    }

    return /*#__PURE__*/React.createElement(VideoCall, {
      key: item.value,
      text: item.name,
      id: 'video' + item.value,
      className: className,
      data: item
    });
  }), /*#__PURE__*/React.createElement("div", {
    className: "callkit-group-control"
  }, getControls()));
}

export default memo(GroupCall);