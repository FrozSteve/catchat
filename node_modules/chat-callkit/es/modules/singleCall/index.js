import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import Avatar from '../../components/avatar';
import Button from '../../components/button';
import Icon from '../../components/Icon';
import './index.css';
import head from '../../assets/images/head.png';
import { useEffect, useState } from 'react';
import React, { useContext } from 'react';
import { WebIM, callManager } from '../callManager';
import { useSelector, useDispatch } from 'react-redux';
import { setCallStatus, CALLSTATUS, updateJoinedMembers } from '../../redux/reducer';
import { answerCall } from '../message';
import { CallkitContext } from '../../index';
import store from '../../redux';

function VideoCall() {
  var _useState = useState(true),
      selfScreenFull = _useState[0],
      setScreen = _useState[1];

  var swichScreen = function swichScreen() {
    setScreen(function () {
      return !selfScreenFull;
    });
  };

  return /*#__PURE__*/React.createElement("div", {
    className: "callkit-single-videobox"
  }, /*#__PURE__*/React.createElement("div", {
    id: "local-player",
    className: selfScreenFull ? 'callkit-single-video-self' : 'callkit-single-video-target',
    onClick: swichScreen
  }), /*#__PURE__*/React.createElement("div", {
    id: "remote-player",
    className: !selfScreenFull ? 'callkit-single-video-self' : 'callkit-single-video-target',
    onClick: swichScreen
  }));
}

function SingleCall(props) {
  var CallkitProps = useContext(CallkitContext);
  var style = props.style;

  var _useState2 = useState(false),
      isMute = _useState2[0],
      setMute = _useState2[1];

  var _useState3 = useState(false),
      isCloseCamera = _useState3[0],
      setCamera = _useState3[1];

  var state = useSelector(function (state) {
    return state;
  });
  var dispatch = useDispatch();
  var contactAvatar = CallkitProps.contactAvatar;
  var uid2userids = useSelector(function (state) {
    return state.uid2userId;
  });
  var client = callManager.client;
  callManager.setCallKitProps(CallkitProps);

  var addListener = function addListener() {
    client.on("user-published", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, mediaType) {
        var joined, remoteVideoTrack, remoteAudioTrack;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                CallkitProps.onStateChange && CallkitProps.onStateChange({
                  type: "user-published",
                  user: user,
                  mediaType: mediaType
                });

                if (uid2userids[user.uid]) {
                  user.uid2userid = uid2userids[user.uid]; // user.uid2userid - im user
                } else {
                  user.uid2userid = user.uid;
                } // subscribe user


                _context.next = 4;
                return client.subscribe(user, mediaType);

              case 4:
                joined = {};
                joined = {
                  name: user.uid2userid,
                  videoElm: 'remote-player',
                  type: mediaType,
                  value: user.uid,
                  action: 'add',
                  audio: true,
                  video: true
                };

                if (mediaType === "video") {
                  remoteVideoTrack = user.videoTrack;
                  joined.video = true;
                  dispatch(updateJoinedMembers(joined));
                  remoteVideoTrack.play('remote-player');
                  WebIM.rtc.remoteVideoTrack = remoteVideoTrack;
                }

                if (mediaType === "audio") {
                  remoteAudioTrack = user.audioTrack;
                  joined.audio = true;
                  dispatch(updateJoinedMembers(joined));
                  WebIM.rtc.other = user;
                  remoteAudioTrack.play();
                }

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());
    client.on("user-left", function (user, mediaType) {
      CallkitProps.onStateChange && CallkitProps.onStateChange({
        type: "user-left",
        user: user,
        mediaType: mediaType
      });
      hangup('user-left');
    });
    client.on("user-unpublished", function (user, mediaType) {
      CallkitProps.onStateChange && CallkitProps.onStateChange({
        type: "user-unpublished",
        user: user,
        mediaType: mediaType
      });
    });
  };

  useEffect(function () {
    addListener();
    return function () {
      WebIM.rtc.client.removeAllListeners();
    };
  }, []);
  useEffect(function () {
    if (state.callStatus === CALLSTATUS.confirmRing || state.callStatus === CALLSTATUS.answerCall) {
      joinConfr();
    }
  }, [state.callStatus]);

  var joinConfr = function joinConfr() {
    callManager.join();
  };

  var hangup = function hangup() {
    callManager.hangup('normal', true);
    dispatch(setCallStatus(CALLSTATUS.idle));
  };

  var accept = function accept() {
    answerCall('accept');
    dispatch(setCallStatus(CALLSTATUS.answerCall));
    CallkitProps.onStateChange && CallkitProps.onStateChange({
      type: "accept",
      callInfo: state.confr
    });
    clearTimeout(WebIM.rtc.timer);
  };

  var refuse = function refuse() {
    answerCall('refuse');

    if (state.callStatus < CALLSTATUS.confirmCallee) {
      callManager.hangup('normal');
      dispatch(setCallStatus(CALLSTATUS.idle));
    } // CallkitProps.onStateChange && CallkitProps.onStateChange({
    // 	type: "refuse",
    // 	callInfo: state.confr,
    // 	groupId: state.groupId,
    // 	groupName: state.groupName
    // })


    clearTimeout(WebIM.rtc.timer);
  };

  var swichMic = function swichMic() {
    if (state.callStatus < CALLSTATUS.confirmRing || state.callStatus === CALLSTATUS.receivedConfirmRing) {
      return console.warn('not joined the call yet');
    }

    setMute(function (isMute) {
      return !isMute;
    });
    WebIM.rtc.localAudioTrack.setEnabled(isMute);
  };

  var swichCamera = function swichCamera() {
    if (state.callStatus < CALLSTATUS.confirmRing || state.callStatus === CALLSTATUS.receivedConfirmRing) {
      return console.warn('not joined the call yet');
    }

    setCamera(function (isCloseCamera) {
      return !isCloseCamera;
    });
    var status = isCloseCamera ? true : false;
    WebIM.rtc.localVideoTrack.setEnabled && WebIM.rtc.localVideoTrack.setEnabled(status);
  };

  function getControls() {
    if (state.confr.type === 0) {
      if (state.callStatus === CALLSTATUS.alerting || state.callStatus === CALLSTATUS.receivedConfirmRing) {
        // btn for callee
        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {
          circle: true,
          danger: true,
          onClick: refuse
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-phone_down callkit-main-button"
        })), /*#__PURE__*/React.createElement(Button, {
          circle: true,
          right: true,
          onClick: accept
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-phone callkit-main-button"
        })));
      } else {
        return /*#__PURE__*/React.createElement(React.Fragment, null, isMute ? /*#__PURE__*/React.createElement(Button, {
          className: "callkit-singleCall-slash",
          circle: true,
          onClick: swichMic
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-mic_slash callkit-main-button"
        })) : /*#__PURE__*/React.createElement(Button, {
          circle: true,
          onClick: swichMic
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-mic callkit-main-button"
        })), /*#__PURE__*/React.createElement(Button, {
          circle: true,
          danger: true,
          onClick: hangup
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-phone_down callkit-main-button"
        })));
      }
    } else {
      if (state.callStatus === CALLSTATUS.alerting || state.callStatus === CALLSTATUS.receivedConfirmRing) {
        // btn for callee
        return /*#__PURE__*/React.createElement(React.Fragment, null, isCloseCamera ? /*#__PURE__*/React.createElement(Button, {
          className: "callkit-singleCall-slash",
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-video_slash callkit-main-button"
        })) : /*#__PURE__*/React.createElement(Button, {
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-video callkit-main-button"
        })), /*#__PURE__*/React.createElement(Button, {
          circle: true,
          danger: true,
          onClick: refuse
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-phone_down callkit-main-button"
        })), /*#__PURE__*/React.createElement(Button, {
          circle: true,
          right: true,
          onClick: accept
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-phone callkit-main-button"
        })));
      } else {
        return /*#__PURE__*/React.createElement(React.Fragment, null, isCloseCamera ? /*#__PURE__*/React.createElement(Button, {
          className: "callkit-singleCall-slash",
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-video_slash callkit-main-button"
        })) : /*#__PURE__*/React.createElement(Button, {
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-video callkit-main-button"
        })), isMute ? /*#__PURE__*/React.createElement(Button, {
          circle: true,
          onClick: swichMic,
          className: "callkit-singleCall-slash"
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-mic_slash callkit-main-button"
        })) : /*#__PURE__*/React.createElement(Button, {
          circle: true,
          onClick: swichMic
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-mic callkit-main-button"
        })), /*#__PURE__*/React.createElement(Button, {
          circle: true,
          danger: true,
          onClick: hangup
        }, /*#__PURE__*/React.createElement(Icon, {
          className: "iconfont icon-phone_down callkit-main-button"
        })));
      }
    }
  }

  var showAvatar = state.confr.type === 0 ? true : state.callStatus === 7 ? false : true;
  var callType = state.confr.type === 0 ? 'Audio Call' : 'Video Call';
  var _state$confr = state.confr,
      callerIMName = _state$confr.callerIMName,
      calleeIMName = _state$confr.calleeIMName;
  var myName = WebIM.conn.context.jid.name;
  var targetUserId = callerIMName == myName ? calleeIMName : callerIMName;
  var targetUserName = targetUserId;

  if (uid2userids[targetUserId]) {
    targetUserName = uid2userids[targetUserId];
  }

  if (state.callStatus > CALLSTATUS.answerCall && state.confr.type === 0) {
    callType = state.callDuration;
  }

  return /*#__PURE__*/React.createElement("div", {
    style: style,
    className: "callkit-singleCall-container"
  }, showAvatar && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Avatar, {
    src: contactAvatar || head,
    alt: "name",
    style: {
      zIndex: 9
    }
  }), /*#__PURE__*/React.createElement("div", {
    className: "callkit-singleCall-username"
  }, targetUserName), /*#__PURE__*/React.createElement("div", {
    className: "callkit-singleCall-title"
  }, callType)), callType === 'Video Call' && /*#__PURE__*/React.createElement(VideoCall, null), /*#__PURE__*/React.createElement("div", {
    className: "callkit-singleCall-control"
  }, getControls()));
}

export default SingleCall;