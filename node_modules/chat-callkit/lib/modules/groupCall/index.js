"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

require("./index.css");

var _avatar = _interopRequireDefault(require("../../components/avatar"));

var _react = _interopRequireWildcard(require("react"));

var _head = _interopRequireDefault(require("../../assets/images/head.png"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Icon = _interopRequireDefault(require("../../components/Icon"));

var _button = _interopRequireDefault(require("../../components/button"));

var _reactRedux = require("react-redux");

var _reducer = require("../../redux/reducer");

var _message = require("../message");

var _callManager = require("../callManager");

var _redux = _interopRequireDefault(require("../../redux"));

var _index2 = require("../../index");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var MAXUSERS = 16;

function VideoCall(props) {
  var text = props.text,
      className = props.className,
      id = props.id;
  var CallkitProps = (0, _react.useContext)(_index2.CallkitContext);
  var contactAvatar = CallkitProps.contactAvatar;
  var cls = (0, _classnames["default"])(className, {
    'callkit-group-video-box-4': true
  });
  var data = props.data;
  var audioIconClass = (0, _classnames["default"])({
    iconfont: true,
    'icon-mic_slash': true,
    'callkit-group-audio-icon2': true,
    'display-none': data.audio
  });
  var videoIconClass = (0, _classnames["default"])({
    iconfont: true,
    'icon-video_slash': true,
    'callkit-group-video-icon': true,
    'display-none': data.video
  });
  var showAvatar = !data.video;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: cls,
    id: id
  }, showAvatar && /*#__PURE__*/_react["default"].createElement("div", {
    className: "callkit-group-video-avatar-box"
  }, /*#__PURE__*/_react["default"].createElement(_avatar["default"], {
    src: contactAvatar || _head["default"],
    className: "callkit-group-audio-avatar"
  })), /*#__PURE__*/_react["default"].createElement("span", {
    className: "callkit-group-video-name"
  }, text), /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
    className: audioIconClass
  }), /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
    className: videoIconClass
  }));
}

function AudioCall(props) {
  var active = props.active,
      text = props.text,
      mute = props.mute;
  var CallkitProps = (0, _react.useContext)(_index2.CallkitContext);
  var contactAvatar = CallkitProps.contactAvatar;
  var cls = (0, _classnames["default"])({
    'callkit-group-audio-avatar': true,
    'callkit-group-audio-active': active
  });
  var iconClass = (0, _classnames["default"])({
    iconfont: true,
    'icon-mic_slash': true,
    'callkit-group-audio-icon': true,
    'display-none': !mute
  });
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "callkit-group-audio-container"
  }, /*#__PURE__*/_react["default"].createElement(_avatar["default"], {
    src: contactAvatar || _head["default"],
    alt: "name",
    className: cls
  }), /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
    className: iconClass
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: "callkit-group-audio-username"
  }, text));
}

function GroupCall(props) {
  var CallkitProps = (0, _react.useContext)(_index2.CallkitContext);

  var _useState = (0, _react.useState)(false),
      isMute = _useState[0],
      setMute = _useState[1];

  var _useState2 = (0, _react.useState)(false),
      isCloseCamera = _useState2[0],
      setCamera = _useState2[1];

  var _useState3 = (0, _react.useState)([]),
      isTalking = _useState3[0],
      setTalkings = _useState3[1];

  var state = (0, _reactRedux.useSelector)(function (state) {
    return state;
  });
  var uid2userids = (0, _reactRedux.useSelector)(function (state) {
    return state.uid2userId;
  });
  var dispatch = (0, _reactRedux.useDispatch)();
  var username = _callManager.WebIM.conn.context.userId;
  var groupAvatar = CallkitProps.groupAvatar;

  function getControls() {
    if (state.confr.type === 3) {
      if (state.callStatus === 2 || state.callStatus === 4) {
        // 受邀请方按钮
        return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          danger: true,
          onClick: refuse
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-phone_down callkit-main-button"
        })), /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          right: true,
          onClick: accept
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-phone callkit-main-button"
        })));
      } else {
        return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, isMute ? /*#__PURE__*/_react["default"].createElement(_button["default"], {
          className: "callkit-singleCall-slash",
          circle: true,
          onClick: swichMic
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-mic_slash callkit-main-button"
        })) : /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          onClick: swichMic
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-mic callkit-main-button"
        })), /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          danger: true,
          onClick: hangup
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-phone_down callkit-main-button"
        })));
      }
    } else {
      if (state.callStatus === 2 || state.callStatus === 4) {
        // 受邀请方按钮
        return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, isCloseCamera ? /*#__PURE__*/_react["default"].createElement(_button["default"], {
          className: "callkit-singleCall-slash",
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-video_slash callkit-main-button"
        })) : /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-video callkit-main-button"
        })), /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          danger: true,
          onClick: refuse
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-phone_down callkit-main-button"
        })), /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          right: true,
          onClick: accept
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-phone callkit-main-button"
        })));
      } else {
        return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, isCloseCamera ? /*#__PURE__*/_react["default"].createElement(_button["default"], {
          className: "callkit-singleCall-slash",
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-video_slash callkit-main-button"
        })) : /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-video callkit-main-button"
        })), isMute ? /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          onClick: swichMic,
          className: "callkit-singleCall-slash"
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-mic_slash callkit-main-button"
        })) : /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          onClick: swichMic
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-mic callkit-main-button"
        })), /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          danger: true,
          onClick: hangup
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-phone_down callkit-main-button"
        })));
      }
    }
  }

  _callManager.callManager.setCallKitProps(CallkitProps);

  function addListener() {
    return _addListener.apply(this, arguments);
  }

  function _addListener() {
    _addListener = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _callManager.WebIM.rtc.client.on("user-published", /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee2(user, mediaType) {
                  var state, videoElm, joined, remoteVideoTrack, remoteAudioTrack;
                  return _regenerator["default"].wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          state = _redux["default"].getState();

                          if (!(state.joinedMembers.length >= MAXUSERS)) {
                            _context2.next = 3;
                            break;
                          }

                          return _context2.abrupt("return");

                        case 3:
                          CallkitProps.onStateChange && CallkitProps.onStateChange({
                            type: "user-published",
                            user: user,
                            mediaType: mediaType,
                            confr: state.confr
                          });

                          if (uid2userids[user.uid]) {
                            user.uid2userid = uid2userids[user.uid]; // user.uid2userid - im user
                          } else {
                            user.uid2userid = user.uid;
                          }

                          _context2.next = 7;
                          return _callManager.WebIM.rtc.client.subscribe(user, mediaType);

                        case 7:
                          videoElm = '';
                          joined = {};
                          joined = {
                            name: user.uid2userid,
                            videoElm: 'video' + user.uid,
                            type: mediaType,
                            value: user.uid,
                            action: 'add',
                            audio: true,
                            video: true
                          };
                          state.joinedMembers.forEach(function (member) {
                            if (member.value == user.uid) {
                              joined = Object.assign({
                                action: 'add'
                              }, member);
                            }
                          });
                          videoElm = 'video' + user.uid; // subscribe video stream。

                          if (mediaType === "video") {
                            remoteVideoTrack = user.videoTrack;
                            joined.video = true;
                            dispatch((0, _reducer.updateJoinedMembers)(joined));
                            setTimeout(function () {
                              remoteVideoTrack.play(videoElm);
                            }, 500);
                          } // subscribe audio stream。


                          if (mediaType === "audio") {
                            joined.audio = true;
                            dispatch((0, _reducer.updateJoinedMembers)(joined));
                            remoteAudioTrack = user.audioTrack;
                            remoteAudioTrack && remoteAudioTrack.play();
                          }

                        case 14:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }));

                return function (_x, _x2) {
                  return _ref2.apply(this, arguments);
                };
              }());

              _callManager.WebIM.rtc.client.on("user-unpublished", function (user, mediaType) {
                var state = _redux["default"].getState();

                CallkitProps.onStateChange && CallkitProps.onStateChange({
                  type: "user-unpublished",
                  user: user,
                  mediaType: mediaType
                });
                var joinedMembersCp = [].concat(state.joinedMembers);
                joinedMembersCp.forEach(function (item, index) {
                  if (item.value == user.uid) {
                    var _user = Object.assign({}, item);

                    if (mediaType === 'audio') {
                      _user.audio = false;
                    } else {
                      _user.video = false;
                    }

                    joinedMembersCp[index] = _user;
                  }
                });
                dispatch((0, _reducer.updateJoinedMembers)(joinedMembersCp));
              });

              _callManager.WebIM.rtc.client.on("user-left", function (user, mediaType) {
                CallkitProps.onStateChange && CallkitProps.onStateChange({
                  type: "user-left",
                  user: user,
                  mediaType: mediaType
                });

                var state = _redux["default"].getState();

                var joinCurrent = state.joinedMembers.filter(function (item) {
                  return item.value !== user.uid;
                });
                dispatch((0, _reducer.updateJoinedMembers)(joinCurrent));
              });

              _callManager.WebIM.rtc.client.enableAudioVolumeIndicator();

              _callManager.WebIM.rtc.client.on("volume-indicator", function (result) {
                var isTalkingCp = [].concat(isTalking);
                result.forEach(function (volume, index) {
                  var userId = uid2userids[volume.uid]; // userId - im user id

                  if (!userId) return;

                  if (volume.level > 1 && !isTalkingCp.includes(userId)) {
                    isTalkingCp.push(userId);
                  } else {
                    if (volume.level < 1 && isTalkingCp.includes(userId)) {
                      var i = isTalkingCp.indexOf(userId);
                      isTalkingCp.splice(i, 1);
                    }
                  }
                });
                setTalkings(isTalkingCp);
              });

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _addListener.apply(this, arguments);
  }

  (0, _react.useEffect)(function () {
    addListener();
    return function () {
      _callManager.WebIM.rtc.client.removeAllListeners();
    };
  }, []);
  (0, _react.useEffect)(function () {
    var newJoined = [].concat(state.joinedMembers);
    newJoined.forEach(function (item, index) {
      var newJoinedItem = {
        name: item.name,
        type: item.type,
        value: item.value,
        videoElm: item.videoElm,
        video: item.video,
        audio: item.audio,
        isSelf: item.isSelf
      };

      if (newJoinedItem.value in uid2userids) {
        newJoinedItem.name = uid2userids[newJoinedItem.value];
      }

      newJoined[index] = newJoinedItem;
    });
    dispatch((0, _reducer.updateJoinedMembers)(newJoined));
  }, [Object.keys(state.uid2userId).length, state.joinedMembers.length]);

  var joinConfr = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _callManager.callManager.join();

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function joinConfr() {
      return _ref.apply(this, arguments);
    };
  }();

  (0, _react.useEffect)(function () {
    if (state.callStatus === _reducer.CALLSTATUS.confirmRing || state.callStatus === _reducer.CALLSTATUS.answerCall) {
      joinConfr();
    }
  }, [state.callStatus]);

  var hangup = function hangup() {
    if (state.callStatus < _reducer.CALLSTATUS.confirmCallee) {
      // The call has not been connected, send cancel call
      _callManager.callManager.hangup('normal', true);
    } else {
      // The call has been connected, don't send cancel call
      if (state.joinedMembers.length == 1 && state.confr.callerIMName == username) {
        // send cancel when you are left alone
        _callManager.callManager.hangup('normal', true);

        return;
      }

      _callManager.callManager.hangup('normal', false);
    }

    dispatch((0, _reducer.setCallStatus)(_reducer.CALLSTATUS.idle));
  };

  var accept = function accept() {
    (0, _message.answerCall)('accept');
    dispatch((0, _reducer.setCallStatus)(_reducer.CALLSTATUS.answerCall)); // 5

    CallkitProps.onStateChange && CallkitProps.onStateChange({
      type: "accept",
      callInfo: state.confr
    });
    clearTimeout(_callManager.WebIM.rtc.timer);
  };

  var refuse = function refuse() {
    (0, _message.answerCall)('refuse'); // 

    if (state.callStatus < 7) {
      //拒接
      _callManager.callManager.hangup('normal');

      dispatch((0, _reducer.setCallStatus)(_reducer.CALLSTATUS.idle));
    } // CallkitProps.onStateChange && CallkitProps.onStateChange({
    // 	type: "refuse",
    // 	callInfo: state.confr,
    // 	groupId: state.groupId,
    // 	groupName: state.groupName
    // })


    clearTimeout(_callManager.WebIM.rtc.timer);
  };

  var swichMic = function swichMic() {
    if (state.callStatus < _reducer.CALLSTATUS.confirmRing || state.callStatus === _reducer.CALLSTATUS.receivedConfirmRing) {
      return console.warn('not joined the call yet');
    }

    setMute(function (isMute) {
      return !isMute;
    });

    _callManager.WebIM.rtc.localAudioTrack.setEnabled(isMute);
  };

  var swichCamera = function swichCamera() {
    if (state.callStatus < _reducer.CALLSTATUS.confirmRing || state.callStatus === _reducer.CALLSTATUS.receivedConfirmRing) {
      return console.warn('not joined the call yet');
    }

    setCamera(function (isCloseCamera) {
      return !isCloseCamera;
    });
    var status = isCloseCamera ? true : false;
    _callManager.WebIM.rtc.localVideoTrack.setEnabled && _callManager.WebIM.rtc.localVideoTrack.setEnabled(status);
  };

  var showAvatar = [0, 3, 5, 6, 7].includes(state.callStatus) ? false : true;
  var callType = state.confr.type === 3 ? 'Audio Call' : 'Video Call';
  var containerCls = (0, _classnames["default"])({
    'callkit-groupCall-container': true,
    'callkit-group-flex-start': state.joinedMembers.length > 6,
    'callkit-group-container-video': state.confr.type === 2
  });
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: containerCls
  }, showAvatar && /*#__PURE__*/_react["default"].createElement("div", {
    className: "callkit-group-avatar"
  }, /*#__PURE__*/_react["default"].createElement(_avatar["default"], {
    src: groupAvatar || _head["default"],
    style: {
      borderRadius: groupAvatar ? 'inherit' : '50%',
      zIndex: 9
    },
    alt: "name"
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: "callkit-singleCall-username"
  }, state.groupName), /*#__PURE__*/_react["default"].createElement("div", {
    className: "callkit-singleCall-title"
  }, callType)), state.confr.type === 3 && state.joinedMembers.map(function (item) {
    var talking = isTalking.includes(item.name);
    return /*#__PURE__*/_react["default"].createElement(AudioCall, {
      key: item.name,
      active: talking,
      text: item.name,
      mute: !item.audio
    });
  }), state.confr.type === 2 && state.joinedMembers.map(function (item) {
    var className = '';

    if (state.joinedMembers.length <= 2) {
      if (item.isSelf) {
        className = 'callkit-group-video-2-self';
      } else {
        className = 'callkit-group-video-2-target';
      }
    }

    return /*#__PURE__*/_react["default"].createElement(VideoCall, {
      key: item.value,
      text: item.name,
      id: 'video' + item.value,
      className: className,
      data: item
    });
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: "callkit-group-control"
  }, getControls()));
}

var _default = (0, _react.memo)(GroupCall);

exports["default"] = _default;
module.exports = exports.default;