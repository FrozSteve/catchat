"use strict";

exports.__esModule = true;
exports["default"] = void 0;

require("./index.css");

var _avatar = _interopRequireDefault(require("../../components/avatar"));

var _head = _interopRequireDefault(require("../../assets/images/head.png"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _reactDraggable = _interopRequireWildcard(require("react-draggable"));

var _reactRedux = require("react-redux");

var _reducer = require("../../redux/reducer");

var _callManager = require("../callManager");

var _index2 = require("../../index");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function MiniWindow(props) {
  var className = props.className;
  var dispatch = (0, _reactRedux.useDispatch)();
  var state = (0, _reactRedux.useSelector)(function (state) {
    return state;
  });
  var callDuration = state.callDuration,
      callStatus = state.callStatus,
      confr = state.confr;
  var isVideo = confr.type === 1;
  var text = callStatus < _reducer.CALLSTATUS.answerCall ? 'Calling' : callDuration;
  var CallkitProps = (0, _react.useContext)(_index2.CallkitContext);
  var contactAvatar = CallkitProps.contactAvatar,
      groupAvatar = CallkitProps.groupAvatar;
  var cls = (0, _classnames["default"])(className, {
    'callkit-miniwin-container': true,
    'callkit-miniwin-minivideo': isVideo
  });
  var temp;

  var handleStart = function handleStart() {
    temp = Date.now();
  };

  var handleStop = function handleStop() {
    var current = Date.now();

    if (current - temp < 300) {
      dispatch((0, _reducer.changeWinSize)('normal'));
    }
  };

  (0, _react.useEffect)(function () {
    if (confr.type !== 1) return;

    if (state.windowSize === 'mini') {
      _callManager.WebIM.rtc.remoteVideoTrack && _callManager.WebIM.rtc.remoteVideoTrack.play('mini-player');
    }

    return function () {
      _callManager.WebIM.rtc.remoteVideoTrack && _callManager.WebIM.rtc.remoteVideoTrack.play('remote-player');
    };
  }, [state.windowSize]);
  var avater;

  if (confr.type > 1) {
    avater = groupAvatar ? groupAvatar : _head["default"];
  } else {
    avater = contactAvatar ? contactAvatar : _head["default"];
  }

  var content = isVideo ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    id: "mini-player",
    className: "callkit-miniwin-video"
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: "callkit-miniwin-video-text"
  }, text)) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_avatar["default"], {
    style: {
      borderRadius: groupAvatar ? 'inherit' : '50%'
    },
    src: avater,
    className: "callkit-miniwin-avatar"
  }), /*#__PURE__*/_react["default"].createElement("span", {
    className: "callkit-miniwin-text"
  }, text));
  return /*#__PURE__*/_react["default"].createElement(_reactDraggable["default"], {
    onStart: handleStart,
    onStop: handleStop
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: cls
  }, content));
}

var _default = MiniWindow;
exports["default"] = _default;
module.exports = exports.default;