"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _avatar = _interopRequireDefault(require("../../components/avatar"));

var _button = _interopRequireDefault(require("../../components/button"));

var _Icon = _interopRequireDefault(require("../../components/Icon"));

require("./index.css");

var _head = _interopRequireDefault(require("../../assets/images/head.png"));

var _react = _interopRequireWildcard(require("react"));

var _callManager = require("../callManager");

var _reactRedux = require("react-redux");

var _reducer = require("../../redux/reducer");

var _message = require("../message");

var _index2 = require("../../index");

var _redux = _interopRequireDefault(require("../../redux"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function VideoCall() {
  var _useState = (0, _react.useState)(true),
      selfScreenFull = _useState[0],
      setScreen = _useState[1];

  var swichScreen = function swichScreen() {
    setScreen(function () {
      return !selfScreenFull;
    });
  };

  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "callkit-single-videobox"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    id: "local-player",
    className: selfScreenFull ? 'callkit-single-video-self' : 'callkit-single-video-target',
    onClick: swichScreen
  }), /*#__PURE__*/_react["default"].createElement("div", {
    id: "remote-player",
    className: !selfScreenFull ? 'callkit-single-video-self' : 'callkit-single-video-target',
    onClick: swichScreen
  }));
}

function SingleCall(props) {
  var CallkitProps = (0, _react.useContext)(_index2.CallkitContext);
  var style = props.style;

  var _useState2 = (0, _react.useState)(false),
      isMute = _useState2[0],
      setMute = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      isCloseCamera = _useState3[0],
      setCamera = _useState3[1];

  var state = (0, _reactRedux.useSelector)(function (state) {
    return state;
  });
  var dispatch = (0, _reactRedux.useDispatch)();
  var contactAvatar = CallkitProps.contactAvatar;
  var uid2userids = (0, _reactRedux.useSelector)(function (state) {
    return state.uid2userId;
  });
  var client = _callManager.callManager.client;

  _callManager.callManager.setCallKitProps(CallkitProps);

  var addListener = function addListener() {
    client.on("user-published", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee(user, mediaType) {
        var joined, remoteVideoTrack, remoteAudioTrack;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                CallkitProps.onStateChange && CallkitProps.onStateChange({
                  type: "user-published",
                  user: user,
                  mediaType: mediaType
                });

                if (uid2userids[user.uid]) {
                  user.uid2userid = uid2userids[user.uid]; // user.uid2userid - im user
                } else {
                  user.uid2userid = user.uid;
                } // subscribe user


                _context.next = 4;
                return client.subscribe(user, mediaType);

              case 4:
                joined = {};
                joined = {
                  name: user.uid2userid,
                  videoElm: 'remote-player',
                  type: mediaType,
                  value: user.uid,
                  action: 'add',
                  audio: true,
                  video: true
                };

                if (mediaType === "video") {
                  remoteVideoTrack = user.videoTrack;
                  joined.video = true;
                  dispatch((0, _reducer.updateJoinedMembers)(joined));
                  remoteVideoTrack.play('remote-player');
                  _callManager.WebIM.rtc.remoteVideoTrack = remoteVideoTrack;
                }

                if (mediaType === "audio") {
                  remoteAudioTrack = user.audioTrack;
                  joined.audio = true;
                  dispatch((0, _reducer.updateJoinedMembers)(joined));
                  _callManager.WebIM.rtc.other = user;
                  remoteAudioTrack.play();
                }

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());
    client.on("user-left", function (user, mediaType) {
      CallkitProps.onStateChange && CallkitProps.onStateChange({
        type: "user-left",
        user: user,
        mediaType: mediaType
      });
      hangup('user-left');
    });
    client.on("user-unpublished", function (user, mediaType) {
      CallkitProps.onStateChange && CallkitProps.onStateChange({
        type: "user-unpublished",
        user: user,
        mediaType: mediaType
      });
    });
  };

  (0, _react.useEffect)(function () {
    addListener();
    return function () {
      _callManager.WebIM.rtc.client.removeAllListeners();
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (state.callStatus === _reducer.CALLSTATUS.confirmRing || state.callStatus === _reducer.CALLSTATUS.answerCall) {
      joinConfr();
    }
  }, [state.callStatus]);

  var joinConfr = function joinConfr() {
    _callManager.callManager.join();
  };

  var hangup = function hangup() {
    _callManager.callManager.hangup('normal', true);

    dispatch((0, _reducer.setCallStatus)(_reducer.CALLSTATUS.idle));
  };

  var accept = function accept() {
    (0, _message.answerCall)('accept');
    dispatch((0, _reducer.setCallStatus)(_reducer.CALLSTATUS.answerCall));
    CallkitProps.onStateChange && CallkitProps.onStateChange({
      type: "accept",
      callInfo: state.confr
    });
    clearTimeout(_callManager.WebIM.rtc.timer);
  };

  var refuse = function refuse() {
    (0, _message.answerCall)('refuse');

    if (state.callStatus < _reducer.CALLSTATUS.confirmCallee) {
      _callManager.callManager.hangup('normal');

      dispatch((0, _reducer.setCallStatus)(_reducer.CALLSTATUS.idle));
    } // CallkitProps.onStateChange && CallkitProps.onStateChange({
    // 	type: "refuse",
    // 	callInfo: state.confr,
    // 	groupId: state.groupId,
    // 	groupName: state.groupName
    // })


    clearTimeout(_callManager.WebIM.rtc.timer);
  };

  var swichMic = function swichMic() {
    if (state.callStatus < _reducer.CALLSTATUS.confirmRing || state.callStatus === _reducer.CALLSTATUS.receivedConfirmRing) {
      return console.warn('not joined the call yet');
    }

    setMute(function (isMute) {
      return !isMute;
    });

    _callManager.WebIM.rtc.localAudioTrack.setEnabled(isMute);
  };

  var swichCamera = function swichCamera() {
    if (state.callStatus < _reducer.CALLSTATUS.confirmRing || state.callStatus === _reducer.CALLSTATUS.receivedConfirmRing) {
      return console.warn('not joined the call yet');
    }

    setCamera(function (isCloseCamera) {
      return !isCloseCamera;
    });
    var status = isCloseCamera ? true : false;
    _callManager.WebIM.rtc.localVideoTrack.setEnabled && _callManager.WebIM.rtc.localVideoTrack.setEnabled(status);
  };

  function getControls() {
    if (state.confr.type === 0) {
      if (state.callStatus === _reducer.CALLSTATUS.alerting || state.callStatus === _reducer.CALLSTATUS.receivedConfirmRing) {
        // btn for callee
        return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          danger: true,
          onClick: refuse
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-phone_down callkit-main-button"
        })), /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          right: true,
          onClick: accept
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-phone callkit-main-button"
        })));
      } else {
        return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, isMute ? /*#__PURE__*/_react["default"].createElement(_button["default"], {
          className: "callkit-singleCall-slash",
          circle: true,
          onClick: swichMic
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-mic_slash callkit-main-button"
        })) : /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          onClick: swichMic
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-mic callkit-main-button"
        })), /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          danger: true,
          onClick: hangup
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-phone_down callkit-main-button"
        })));
      }
    } else {
      if (state.callStatus === _reducer.CALLSTATUS.alerting || state.callStatus === _reducer.CALLSTATUS.receivedConfirmRing) {
        // btn for callee
        return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, isCloseCamera ? /*#__PURE__*/_react["default"].createElement(_button["default"], {
          className: "callkit-singleCall-slash",
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-video_slash callkit-main-button"
        })) : /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-video callkit-main-button"
        })), /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          danger: true,
          onClick: refuse
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-phone_down callkit-main-button"
        })), /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          right: true,
          onClick: accept
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-phone callkit-main-button"
        })));
      } else {
        return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, isCloseCamera ? /*#__PURE__*/_react["default"].createElement(_button["default"], {
          className: "callkit-singleCall-slash",
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-video_slash callkit-main-button"
        })) : /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          onClick: swichCamera
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-video callkit-main-button"
        })), isMute ? /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          onClick: swichMic,
          className: "callkit-singleCall-slash"
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-mic_slash callkit-main-button"
        })) : /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          onClick: swichMic
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-mic callkit-main-button"
        })), /*#__PURE__*/_react["default"].createElement(_button["default"], {
          circle: true,
          danger: true,
          onClick: hangup
        }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
          className: "iconfont icon-phone_down callkit-main-button"
        })));
      }
    }
  }

  var showAvatar = state.confr.type === 0 ? true : state.callStatus === 7 ? false : true;
  var callType = state.confr.type === 0 ? 'Audio Call' : 'Video Call';
  var _state$confr = state.confr,
      callerIMName = _state$confr.callerIMName,
      calleeIMName = _state$confr.calleeIMName;
  var myName = _callManager.WebIM.conn.context.jid.name;
  var targetUserId = callerIMName == myName ? calleeIMName : callerIMName;
  var targetUserName = targetUserId;

  if (uid2userids[targetUserId]) {
    targetUserName = uid2userids[targetUserId];
  }

  if (state.callStatus > _reducer.CALLSTATUS.answerCall && state.confr.type === 0) {
    callType = state.callDuration;
  }

  return /*#__PURE__*/_react["default"].createElement("div", {
    style: style,
    className: "callkit-singleCall-container"
  }, showAvatar && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_avatar["default"], {
    src: contactAvatar || _head["default"],
    alt: "name",
    style: {
      zIndex: 9
    }
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: "callkit-singleCall-username"
  }, targetUserName), /*#__PURE__*/_react["default"].createElement("div", {
    className: "callkit-singleCall-title"
  }, callType)), callType === 'Video Call' && /*#__PURE__*/_react["default"].createElement(VideoCall, null), /*#__PURE__*/_react["default"].createElement("div", {
    className: "callkit-singleCall-control"
  }, getControls()));
}

var _default = SingleCall;
exports["default"] = _default;
module.exports = exports.default;